// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// LogQueryLogTypeValue represents the possible values for attribute "logType".
type LogQueryLogTypeValue string

const (
	// LogQueryLogTypeDecryption represents the value Decryption.
	LogQueryLogTypeDecryption LogQueryLogTypeValue = "Decryption"

	// LogQueryLogTypeThreat represents the value Threat.
	LogQueryLogTypeThreat LogQueryLogTypeValue = "Threat"

	// LogQueryLogTypeTraffic represents the value Traffic.
	LogQueryLogTypeTraffic LogQueryLogTypeValue = "Traffic"

	// LogQueryLogTypeURLFiltering represents the value URLFiltering.
	LogQueryLogTypeURLFiltering LogQueryLogTypeValue = "URLFiltering"
)

// LogQueryIdentity represents the Identity of the object.
var LogQueryIdentity = elemental.Identity{
	Name:     "logquery",
	Category: "logqueries",
	Package:  "logging",
	Private:  false,
}

// LogQueriesList represents a list of LogQueries
type LogQueriesList []*LogQuery

// Identity returns the identity of the objects in the list.
func (o LogQueriesList) Identity() elemental.Identity {

	return LogQueryIdentity
}

// Copy returns a pointer to a copy the LogQueriesList.
func (o LogQueriesList) Copy() elemental.Identifiables {

	copy := append(LogQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the LogQueriesList.
func (o LogQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(LogQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*LogQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o LogQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o LogQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the LogQueriesList converted to SparseLogQueriesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o LogQueriesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseLogQueriesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseLogQuery)
	}

	return out
}

// Version returns the version of the content.
func (o LogQueriesList) Version() int {

	return 1
}

// LogQuery represents the model of a logquery
type LogQuery struct {
	// Optional hint about the result set size, provided by the caller.
	CountHint int `json:"countHint" msgpack:"countHint" bson:"-" mapstructure:"countHint,omitempty"`

	// The NGFW name.
	FirewallName string `json:"firewallName" msgpack:"firewallName" bson:"firewallname" mapstructure:"firewallName,omitempty"`

	// The result of the log query.
	LogResult []*LogQueryItem `json:"logResult" msgpack:"logResult" bson:"-" mapstructure:"logResult,omitempty"`

	// The type of firewall log to query.
	LogType LogQueryLogTypeValue `json:"logType" msgpack:"logType" bson:"-" mapstructure:"logType,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewLogQuery returns a new *LogQuery
func NewLogQuery() *LogQuery {

	return &LogQuery{
		ModelVersion: 1,
		LogResult:    []*LogQueryItem{},
	}
}

// Identity returns the Identity of the object.
func (o *LogQuery) Identity() elemental.Identity {

	return LogQueryIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *LogQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *LogQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesLogQuery{}

	s.FirewallName = o.FirewallName

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesLogQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.FirewallName = s.FirewallName

	return nil
}

// Version returns the hardcoded version of the model.
func (o *LogQuery) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *LogQuery) BleveType() string {

	return "logquery"
}

// DefaultOrder returns the list of default ordering fields.
func (o *LogQuery) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *LogQuery) Doc() string {

	return `Answer general queries on firewall logs.`
}

func (o *LogQuery) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *LogQuery) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseLogQuery{
			CountHint:    &o.CountHint,
			FirewallName: &o.FirewallName,
			LogResult:    &o.LogResult,
			LogType:      &o.LogType,
		}
	}

	sp := &SparseLogQuery{}
	for _, f := range fields {
		switch f {
		case "countHint":
			sp.CountHint = &(o.CountHint)
		case "firewallName":
			sp.FirewallName = &(o.FirewallName)
		case "logResult":
			sp.LogResult = &(o.LogResult)
		case "logType":
			sp.LogType = &(o.LogType)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseLogQuery to the object.
func (o *LogQuery) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseLogQuery)
	if so.CountHint != nil {
		o.CountHint = *so.CountHint
	}
	if so.FirewallName != nil {
		o.FirewallName = *so.FirewallName
	}
	if so.LogResult != nil {
		o.LogResult = *so.LogResult
	}
	if so.LogType != nil {
		o.LogType = *so.LogType
	}
}

// DeepCopy returns a deep copy if the LogQuery.
func (o *LogQuery) DeepCopy() *LogQuery {

	if o == nil {
		return nil
	}

	out := &LogQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *LogQuery.
func (o *LogQuery) DeepCopyInto(out *LogQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy LogQuery: %s", err))
	}

	*out = *target.(*LogQuery)
}

// Validate valides the current information stored into the structure.
func (o *LogQuery) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("firewallName", o.FirewallName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.LogResult {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("logType", string(o.LogType), []string{"Traffic", "Threat", "URLFiltering", "Decryption"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*LogQuery) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := LogQueryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return LogQueryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*LogQuery) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return LogQueryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *LogQuery) ValueForAttribute(name string) any {

	switch name {
	case "countHint":
		return o.CountHint
	case "firewallName":
		return o.FirewallName
	case "logResult":
		return o.LogResult
	case "logType":
		return o.LogType
	}

	return nil
}

// LogQueryAttributesMap represents the map of attribute for LogQuery.
var LogQueryAttributesMap = map[string]elemental.AttributeSpecification{
	"CountHint": {
		AllowedChoices: []string{},
		ConvertedName:  "CountHint",
		Description:    `Optional hint about the result set size, provided by the caller.`,
		Exposed:        true,
		Name:           "countHint",
		Type:           "integer",
	},
	"FirewallName": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallname",
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogResult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "LogResult",
		Description:    `The result of the log query.`,
		Exposed:        true,
		Name:           "logResult",
		ReadOnly:       true,
		SubType:        "logqueryitem",
		Type:           "refList",
	},
	"LogType": {
		AllowedChoices: []string{"Traffic", "Threat", "URLFiltering", "Decryption"},
		ConvertedName:  "LogType",
		Description:    `The type of firewall log to query.`,
		Exposed:        true,
		Name:           "logType",
		Type:           "enum",
	},
}

// LogQueryLowerCaseAttributesMap represents the map of attribute for LogQuery.
var LogQueryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"counthint": {
		AllowedChoices: []string{},
		ConvertedName:  "CountHint",
		Description:    `Optional hint about the result set size, provided by the caller.`,
		Exposed:        true,
		Name:           "countHint",
		Type:           "integer",
	},
	"firewallname": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallname",
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logresult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "LogResult",
		Description:    `The result of the log query.`,
		Exposed:        true,
		Name:           "logResult",
		ReadOnly:       true,
		SubType:        "logqueryitem",
		Type:           "refList",
	},
	"logtype": {
		AllowedChoices: []string{"Traffic", "Threat", "URLFiltering", "Decryption"},
		ConvertedName:  "LogType",
		Description:    `The type of firewall log to query.`,
		Exposed:        true,
		Name:           "logType",
		Type:           "enum",
	},
}

// SparseLogQueriesList represents a list of SparseLogQueries
type SparseLogQueriesList []*SparseLogQuery

// Identity returns the identity of the objects in the list.
func (o SparseLogQueriesList) Identity() elemental.Identity {

	return LogQueryIdentity
}

// Copy returns a pointer to a copy the SparseLogQueriesList.
func (o SparseLogQueriesList) Copy() elemental.Identifiables {

	copy := append(SparseLogQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseLogQueriesList.
func (o SparseLogQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseLogQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseLogQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseLogQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseLogQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseLogQueriesList converted to LogQueriesList.
func (o SparseLogQueriesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseLogQueriesList) Version() int {

	return 1
}

// SparseLogQuery represents the sparse version of a logquery.
type SparseLogQuery struct {
	// Optional hint about the result set size, provided by the caller.
	CountHint *int `json:"countHint,omitempty" msgpack:"countHint,omitempty" bson:"-" mapstructure:"countHint,omitempty"`

	// The NGFW name.
	FirewallName *string `json:"firewallName,omitempty" msgpack:"firewallName,omitempty" bson:"firewallname,omitempty" mapstructure:"firewallName,omitempty"`

	// The result of the log query.
	LogResult *[]*LogQueryItem `json:"logResult,omitempty" msgpack:"logResult,omitempty" bson:"-" mapstructure:"logResult,omitempty"`

	// The type of firewall log to query.
	LogType *LogQueryLogTypeValue `json:"logType,omitempty" msgpack:"logType,omitempty" bson:"-" mapstructure:"logType,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseLogQuery returns a new  SparseLogQuery.
func NewSparseLogQuery() *SparseLogQuery {
	return &SparseLogQuery{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseLogQuery) Identity() elemental.Identity {

	return LogQueryIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseLogQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseLogQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseLogQuery{}

	if o.FirewallName != nil {
		s.FirewallName = o.FirewallName
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseLogQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.FirewallName != nil {
		o.FirewallName = s.FirewallName
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseLogQuery) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseLogQuery) ToPlain() elemental.PlainIdentifiable {

	out := NewLogQuery()
	if o.CountHint != nil {
		out.CountHint = *o.CountHint
	}
	if o.FirewallName != nil {
		out.FirewallName = *o.FirewallName
	}
	if o.LogResult != nil {
		out.LogResult = *o.LogResult
	}
	if o.LogType != nil {
		out.LogType = *o.LogType
	}

	return out
}

// DeepCopy returns a deep copy if the SparseLogQuery.
func (o *SparseLogQuery) DeepCopy() *SparseLogQuery {

	if o == nil {
		return nil
	}

	out := &SparseLogQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseLogQuery.
func (o *SparseLogQuery) DeepCopyInto(out *SparseLogQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseLogQuery: %s", err))
	}

	*out = *target.(*SparseLogQuery)
}

type mongoAttributesLogQuery struct {
	FirewallName string `bson:"firewallname"`
}
type mongoAttributesSparseLogQuery struct {
	FirewallName *string `bson:"firewallname,omitempty"`
}
