// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallTargetCriteria represents the model of a firewalltargetcriteria
type FirewallTargetCriteria struct {
	// List of CIDRs.
	CIDRs []string `json:"CIDRs" msgpack:"CIDRs" bson:"cidrs" mapstructure:"CIDRs,omitempty"`

	// List of FQDNs.
	FQDNs []string `json:"FQDNs" msgpack:"FQDNs" bson:"fqdns" mapstructure:"FQDNs,omitempty"`

	// List of country codes.
	CountryCodes []string `json:"countryCodes" msgpack:"countryCodes" bson:"countrycodes" mapstructure:"countryCodes,omitempty"`

	// List of firewall custom external feed IDs that are of type IPList.
	CustomExternalFeedIDs []string `json:"customExternalFeedIDs" msgpack:"customExternalFeedIDs" bson:"customexternalfeedids" mapstructure:"customExternalFeedIDs,omitempty"`

	// List of firewall external feed IDs that are of type IPList.
	ExternalFeedIDs []string `json:"externalFeedIDs" msgpack:"externalFeedIDs" bson:"externalfeedids" mapstructure:"externalFeedIDs,omitempty"`

	// List of Firewall CIDR list IDs.
	FirewallCIDRListIDs []string `json:"firewallCIDRListIDs" msgpack:"firewallCIDRListIDs" bson:"firewallcidrlistids" mapstructure:"firewallCIDRListIDs,omitempty"`

	// List of FQDN list IDs.
	FirewallFQDNListIDs []string `json:"firewallFQDNListIDs" msgpack:"firewallFQDNListIDs" bson:"firewallfqdnlistids" mapstructure:"firewallFQDNListIDs,omitempty"`

	// Negates this match criteria.
	Negate bool `json:"negate" msgpack:"negate" bson:"negate" mapstructure:"negate,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallTargetCriteria returns a new *FirewallTargetCriteria
func NewFirewallTargetCriteria() *FirewallTargetCriteria {

	return &FirewallTargetCriteria{
		ModelVersion:          1,
		CIDRs:                 []string{},
		FQDNs:                 []string{},
		CountryCodes:          []string{},
		CustomExternalFeedIDs: []string{},
		ExternalFeedIDs:       []string{},
		FirewallCIDRListIDs:   []string{},
		FirewallFQDNListIDs:   []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallTargetCriteria) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallTargetCriteria{}

	s.CIDRs = o.CIDRs
	s.FQDNs = o.FQDNs
	s.CountryCodes = o.CountryCodes
	s.CustomExternalFeedIDs = o.CustomExternalFeedIDs
	s.ExternalFeedIDs = o.ExternalFeedIDs
	s.FirewallCIDRListIDs = o.FirewallCIDRListIDs
	s.FirewallFQDNListIDs = o.FirewallFQDNListIDs
	s.Negate = o.Negate

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallTargetCriteria) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallTargetCriteria{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.CIDRs = s.CIDRs
	o.FQDNs = s.FQDNs
	o.CountryCodes = s.CountryCodes
	o.CustomExternalFeedIDs = s.CustomExternalFeedIDs
	o.ExternalFeedIDs = s.ExternalFeedIDs
	o.FirewallCIDRListIDs = s.FirewallCIDRListIDs
	o.FirewallFQDNListIDs = s.FirewallFQDNListIDs
	o.Negate = s.Negate

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallTargetCriteria) BleveType() string {

	return "firewalltargetcriteria"
}

// DeepCopy returns a deep copy if the FirewallTargetCriteria.
func (o *FirewallTargetCriteria) DeepCopy() *FirewallTargetCriteria {

	if o == nil {
		return nil
	}

	out := &FirewallTargetCriteria{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallTargetCriteria.
func (o *FirewallTargetCriteria) DeepCopyInto(out *FirewallTargetCriteria) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallTargetCriteria: %s", err))
	}

	*out = *target.(*FirewallTargetCriteria)
}

// Validate valides the current information stored into the structure.
func (o *FirewallTargetCriteria) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateOptionalCIDRList("CIDRs", o.CIDRs); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateOptionalFQDNList("FQDNs", o.FQDNs); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallTargetCriteria) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallTargetCriteriaAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallTargetCriteriaLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallTargetCriteria) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallTargetCriteriaAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallTargetCriteria) ValueForAttribute(name string) any {

	switch name {
	case "CIDRs":
		return o.CIDRs
	case "FQDNs":
		return o.FQDNs
	case "countryCodes":
		return o.CountryCodes
	case "customExternalFeedIDs":
		return o.CustomExternalFeedIDs
	case "externalFeedIDs":
		return o.ExternalFeedIDs
	case "firewallCIDRListIDs":
		return o.FirewallCIDRListIDs
	case "firewallFQDNListIDs":
		return o.FirewallFQDNListIDs
	case "negate":
		return o.Negate
	}

	return nil
}

// FirewallTargetCriteriaAttributesMap represents the map of attribute for FirewallTargetCriteria.
var FirewallTargetCriteriaAttributesMap = map[string]elemental.AttributeSpecification{
	"CIDRs": {
		AllowedChoices: []string{},
		BSONFieldName:  "cidrs",
		ConvertedName:  "CIDRs",
		Description:    `List of CIDRs.`,
		Exposed:        true,
		Name:           "CIDRs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"FQDNs": {
		AllowedChoices: []string{},
		BSONFieldName:  "fqdns",
		ConvertedName:  "FQDNs",
		Description:    `List of FQDNs.`,
		Exposed:        true,
		Name:           "FQDNs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"CountryCodes": {
		AllowedChoices: []string{},
		BSONFieldName:  "countrycodes",
		ConvertedName:  "CountryCodes",
		Description:    `List of country codes.`,
		Exposed:        true,
		Name:           "countryCodes",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"CustomExternalFeedIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "customexternalfeedids",
		ConvertedName:  "CustomExternalFeedIDs",
		Description:    `List of firewall custom external feed IDs that are of type IPList.`,
		Exposed:        true,
		Name:           "customExternalFeedIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"ExternalFeedIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "externalfeedids",
		ConvertedName:  "ExternalFeedIDs",
		Description:    `List of firewall external feed IDs that are of type IPList.`,
		Exposed:        true,
		Name:           "externalFeedIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"FirewallCIDRListIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallcidrlistids",
		ConvertedName:  "FirewallCIDRListIDs",
		Description:    `List of Firewall CIDR list IDs.`,
		Exposed:        true,
		Name:           "firewallCIDRListIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"FirewallFQDNListIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallfqdnlistids",
		ConvertedName:  "FirewallFQDNListIDs",
		Description:    `List of FQDN list IDs.`,
		Exposed:        true,
		Name:           "firewallFQDNListIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Negate": {
		AllowedChoices: []string{},
		BSONFieldName:  "negate",
		ConvertedName:  "Negate",
		Description:    `Negates this match criteria.`,
		Exposed:        true,
		Name:           "negate",
		Stored:         true,
		Type:           "boolean",
	},
}

// FirewallTargetCriteriaLowerCaseAttributesMap represents the map of attribute for FirewallTargetCriteria.
var FirewallTargetCriteriaLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"cidrs": {
		AllowedChoices: []string{},
		BSONFieldName:  "cidrs",
		ConvertedName:  "CIDRs",
		Description:    `List of CIDRs.`,
		Exposed:        true,
		Name:           "CIDRs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"fqdns": {
		AllowedChoices: []string{},
		BSONFieldName:  "fqdns",
		ConvertedName:  "FQDNs",
		Description:    `List of FQDNs.`,
		Exposed:        true,
		Name:           "FQDNs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"countrycodes": {
		AllowedChoices: []string{},
		BSONFieldName:  "countrycodes",
		ConvertedName:  "CountryCodes",
		Description:    `List of country codes.`,
		Exposed:        true,
		Name:           "countryCodes",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"customexternalfeedids": {
		AllowedChoices: []string{},
		BSONFieldName:  "customexternalfeedids",
		ConvertedName:  "CustomExternalFeedIDs",
		Description:    `List of firewall custom external feed IDs that are of type IPList.`,
		Exposed:        true,
		Name:           "customExternalFeedIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"externalfeedids": {
		AllowedChoices: []string{},
		BSONFieldName:  "externalfeedids",
		ConvertedName:  "ExternalFeedIDs",
		Description:    `List of firewall external feed IDs that are of type IPList.`,
		Exposed:        true,
		Name:           "externalFeedIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"firewallcidrlistids": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallcidrlistids",
		ConvertedName:  "FirewallCIDRListIDs",
		Description:    `List of Firewall CIDR list IDs.`,
		Exposed:        true,
		Name:           "firewallCIDRListIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"firewallfqdnlistids": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallfqdnlistids",
		ConvertedName:  "FirewallFQDNListIDs",
		Description:    `List of FQDN list IDs.`,
		Exposed:        true,
		Name:           "firewallFQDNListIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"negate": {
		AllowedChoices: []string{},
		BSONFieldName:  "negate",
		ConvertedName:  "Negate",
		Description:    `Negates this match criteria.`,
		Exposed:        true,
		Name:           "negate",
		Stored:         true,
		Type:           "boolean",
	},
}

type mongoAttributesFirewallTargetCriteria struct {
	CIDRs                 []string `bson:"cidrs"`
	FQDNs                 []string `bson:"fqdns"`
	CountryCodes          []string `bson:"countrycodes"`
	CustomExternalFeedIDs []string `bson:"customexternalfeedids"`
	ExternalFeedIDs       []string `bson:"externalfeedids"`
	FirewallCIDRListIDs   []string `bson:"firewallcidrlistids"`
	FirewallFQDNListIDs   []string `bson:"firewallfqdnlistids"`
	Negate                bool     `bson:"negate"`
}
