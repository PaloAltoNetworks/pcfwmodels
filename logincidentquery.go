// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// LogIncidentQueryIdentity represents the Identity of the object.
var LogIncidentQueryIdentity = elemental.Identity{
	Name:     "logincidentquery",
	Category: "logincidentqueries",
	Package:  "logging",
	Private:  false,
}

// LogIncidentQueriesList represents a list of LogIncidentQueries
type LogIncidentQueriesList []*LogIncidentQuery

// Identity returns the identity of the objects in the list.
func (o LogIncidentQueriesList) Identity() elemental.Identity {

	return LogIncidentQueryIdentity
}

// Copy returns a pointer to a copy the LogIncidentQueriesList.
func (o LogIncidentQueriesList) Copy() elemental.Identifiables {

	out := append(LogIncidentQueriesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the LogIncidentQueriesList.
func (o LogIncidentQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(LogIncidentQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*LogIncidentQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o LogIncidentQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o LogIncidentQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the LogIncidentQueriesList converted to SparseLogIncidentQueriesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o LogIncidentQueriesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseLogIncidentQueriesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseLogIncidentQuery)
	}

	return out
}

// Version returns the version of the content.
func (o LogIncidentQueriesList) Version() int {

	return 1
}

// LogIncidentQuery represents the model of a logincidentquery
type LogIncidentQuery struct {
	// The NGFW name.
	FirewallName string `json:"firewallName" msgpack:"firewallName" bson:"-" mapstructure:"firewallName,omitempty"`

	// The result of the query.
	LogResult []*LogIncident `json:"logResult" msgpack:"logResult" bson:"-" mapstructure:"logResult,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewLogIncidentQuery returns a new *LogIncidentQuery
func NewLogIncidentQuery() *LogIncidentQuery {

	return &LogIncidentQuery{
		ModelVersion: 1,
		LogResult:    []*LogIncident{},
	}
}

// Identity returns the Identity of the object.
func (o *LogIncidentQuery) Identity() elemental.Identity {

	return LogIncidentQueryIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *LogIncidentQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *LogIncidentQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogIncidentQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesLogIncidentQuery{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogIncidentQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesLogIncidentQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *LogIncidentQuery) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *LogIncidentQuery) BleveType() string {

	return "logincidentquery"
}

// DefaultOrder returns the list of default ordering fields.
func (o *LogIncidentQuery) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *LogIncidentQuery) Doc() string {

	return `Represents a query for security incidents.`
}

func (o *LogIncidentQuery) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *LogIncidentQuery) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseLogIncidentQuery{
			FirewallName: &o.FirewallName,
			LogResult:    &o.LogResult,
		}
	}

	sp := &SparseLogIncidentQuery{}
	for _, f := range fields {
		switch f {
		case "firewallName":
			sp.FirewallName = &(o.FirewallName)
		case "logResult":
			sp.LogResult = &(o.LogResult)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseLogIncidentQuery to the object.
func (o *LogIncidentQuery) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseLogIncidentQuery)
	if so.FirewallName != nil {
		o.FirewallName = *so.FirewallName
	}
	if so.LogResult != nil {
		o.LogResult = *so.LogResult
	}
}

// DeepCopy returns a deep copy if the LogIncidentQuery.
func (o *LogIncidentQuery) DeepCopy() *LogIncidentQuery {

	if o == nil {
		return nil
	}

	out := &LogIncidentQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *LogIncidentQuery.
func (o *LogIncidentQuery) DeepCopyInto(out *LogIncidentQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy LogIncidentQuery: %s", err))
	}

	*out = *target.(*LogIncidentQuery)
}

// Validate valides the current information stored into the structure.
func (o *LogIncidentQuery) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.LogResult {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*LogIncidentQuery) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := LogIncidentQueryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return LogIncidentQueryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*LogIncidentQuery) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return LogIncidentQueryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *LogIncidentQuery) ValueForAttribute(name string) any {

	switch name {
	case "firewallName":
		return o.FirewallName
	case "logResult":
		return o.LogResult
	}

	return nil
}

// LogIncidentQueryAttributesMap represents the map of attribute for LogIncidentQuery.
var LogIncidentQueryAttributesMap = map[string]elemental.AttributeSpecification{
	"FirewallName": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Type:           "string",
	},
	"LogResult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "LogResult",
		Description:    `The result of the query.`,
		Exposed:        true,
		Name:           "logResult",
		ReadOnly:       true,
		SubType:        "logincident",
		Type:           "refList",
	},
}

// LogIncidentQueryLowerCaseAttributesMap represents the map of attribute for LogIncidentQuery.
var LogIncidentQueryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"firewallname": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Type:           "string",
	},
	"logresult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "LogResult",
		Description:    `The result of the query.`,
		Exposed:        true,
		Name:           "logResult",
		ReadOnly:       true,
		SubType:        "logincident",
		Type:           "refList",
	},
}

// SparseLogIncidentQueriesList represents a list of SparseLogIncidentQueries
type SparseLogIncidentQueriesList []*SparseLogIncidentQuery

// Identity returns the identity of the objects in the list.
func (o SparseLogIncidentQueriesList) Identity() elemental.Identity {

	return LogIncidentQueryIdentity
}

// Copy returns a pointer to a copy the SparseLogIncidentQueriesList.
func (o SparseLogIncidentQueriesList) Copy() elemental.Identifiables {

	copy := append(SparseLogIncidentQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseLogIncidentQueriesList.
func (o SparseLogIncidentQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseLogIncidentQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseLogIncidentQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseLogIncidentQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseLogIncidentQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseLogIncidentQueriesList converted to LogIncidentQueriesList.
func (o SparseLogIncidentQueriesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseLogIncidentQueriesList) Version() int {

	return 1
}

// SparseLogIncidentQuery represents the sparse version of a logincidentquery.
type SparseLogIncidentQuery struct {
	// The NGFW name.
	FirewallName *string `json:"firewallName,omitempty" msgpack:"firewallName,omitempty" bson:"-" mapstructure:"firewallName,omitempty"`

	// The result of the query.
	LogResult *[]*LogIncident `json:"logResult,omitempty" msgpack:"logResult,omitempty" bson:"-" mapstructure:"logResult,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseLogIncidentQuery returns a new  SparseLogIncidentQuery.
func NewSparseLogIncidentQuery() *SparseLogIncidentQuery {
	return &SparseLogIncidentQuery{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseLogIncidentQuery) Identity() elemental.Identity {

	return LogIncidentQueryIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseLogIncidentQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseLogIncidentQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogIncidentQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseLogIncidentQuery{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogIncidentQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseLogIncidentQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseLogIncidentQuery) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseLogIncidentQuery) ToPlain() elemental.PlainIdentifiable {

	out := NewLogIncidentQuery()
	if o.FirewallName != nil {
		out.FirewallName = *o.FirewallName
	}
	if o.LogResult != nil {
		out.LogResult = *o.LogResult
	}

	return out
}

// DeepCopy returns a deep copy if the SparseLogIncidentQuery.
func (o *SparseLogIncidentQuery) DeepCopy() *SparseLogIncidentQuery {

	if o == nil {
		return nil
	}

	out := &SparseLogIncidentQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseLogIncidentQuery.
func (o *SparseLogIncidentQuery) DeepCopyInto(out *SparseLogIncidentQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseLogIncidentQuery: %s", err))
	}

	*out = *target.(*SparseLogIncidentQuery)
}

type mongoAttributesLogIncidentQuery struct {
}
type mongoAttributesSparseLogIncidentQuery struct {
}
