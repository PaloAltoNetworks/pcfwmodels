// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// VPCAvailableSubnet represents the model of a vpcavailablesubnet
type VPCAvailableSubnet struct {
	// An AWS VPC ID.
	VPCID string `json:"VPCID" msgpack:"VPCID" bson:"-" mapstructure:"VPCID,omitempty"`

	// The list of all availability zones and associated subnets for every VPC
	// specified.
	AvailabilityZoneSubnets []*AvailabilityZoneSubnet `json:"availabilityZoneSubnets" msgpack:"availabilityZoneSubnets" bson:"-" mapstructure:"availabilityZoneSubnets,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewVPCAvailableSubnet returns a new *VPCAvailableSubnet
func NewVPCAvailableSubnet() *VPCAvailableSubnet {

	return &VPCAvailableSubnet{
		ModelVersion:            1,
		AvailabilityZoneSubnets: []*AvailabilityZoneSubnet{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *VPCAvailableSubnet) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesVPCAvailableSubnet{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *VPCAvailableSubnet) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesVPCAvailableSubnet{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *VPCAvailableSubnet) BleveType() string {

	return "vpcavailablesubnet"
}

// DeepCopy returns a deep copy if the VPCAvailableSubnet.
func (o *VPCAvailableSubnet) DeepCopy() *VPCAvailableSubnet {

	if o == nil {
		return nil
	}

	out := &VPCAvailableSubnet{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *VPCAvailableSubnet.
func (o *VPCAvailableSubnet) DeepCopyInto(out *VPCAvailableSubnet) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy VPCAvailableSubnet: %s", err))
	}

	*out = *target.(*VPCAvailableSubnet)
}

// Validate valides the current information stored into the structure.
func (o *VPCAvailableSubnet) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateVPCID("VPCID", o.VPCID); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.AvailabilityZoneSubnets {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*VPCAvailableSubnet) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := VPCAvailableSubnetAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return VPCAvailableSubnetLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*VPCAvailableSubnet) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return VPCAvailableSubnetAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *VPCAvailableSubnet) ValueForAttribute(name string) any {

	switch name {
	case "VPCID":
		return o.VPCID
	case "availabilityZoneSubnets":
		return o.AvailabilityZoneSubnets
	}

	return nil
}

// VPCAvailableSubnetAttributesMap represents the map of attribute for VPCAvailableSubnet.
var VPCAvailableSubnetAttributesMap = map[string]elemental.AttributeSpecification{
	"VPCID": {
		AllowedChoices: []string{},
		ConvertedName:  "VPCID",
		Description:    `An AWS VPC ID.`,
		Exposed:        true,
		Name:           "VPCID",
		Type:           "string",
	},
	"AvailabilityZoneSubnets": {
		AllowedChoices: []string{},
		ConvertedName:  "AvailabilityZoneSubnets",
		Description: `The list of all availability zones and associated subnets for every VPC
specified.`,
		Exposed: true,
		Name:    "availabilityZoneSubnets",
		SubType: "availabilityzonesubnet",
		Type:    "refList",
	},
}

// VPCAvailableSubnetLowerCaseAttributesMap represents the map of attribute for VPCAvailableSubnet.
var VPCAvailableSubnetLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"vpcid": {
		AllowedChoices: []string{},
		ConvertedName:  "VPCID",
		Description:    `An AWS VPC ID.`,
		Exposed:        true,
		Name:           "VPCID",
		Type:           "string",
	},
	"availabilityzonesubnets": {
		AllowedChoices: []string{},
		ConvertedName:  "AvailabilityZoneSubnets",
		Description: `The list of all availability zones and associated subnets for every VPC
specified.`,
		Exposed: true,
		Name:    "availabilityZoneSubnets",
		SubType: "availabilityzonesubnet",
		Type:    "refList",
	},
}

type mongoAttributesVPCAvailableSubnet struct {
}
