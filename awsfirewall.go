// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// AWSFirewallLicenseTypeValue represents the possible values for attribute "licenseType".
type AWSFirewallLicenseTypeValue string

const (
	// AWSFirewallLicenseTypeAdvanced represents the value Advanced.
	AWSFirewallLicenseTypeAdvanced AWSFirewallLicenseTypeValue = "Advanced"

	// AWSFirewallLicenseTypeBasic represents the value Basic.
	AWSFirewallLicenseTypeBasic AWSFirewallLicenseTypeValue = "Basic"

	// AWSFirewallLicenseTypeTAP represents the value TAP.
	AWSFirewallLicenseTypeTAP AWSFirewallLicenseTypeValue = "TAP"
)

// AWSFirewallModeValue represents the possible values for attribute "mode".
type AWSFirewallModeValue string

const (
	// AWSFirewallModeNGFW represents the value NGFW.
	AWSFirewallModeNGFW AWSFirewallModeValue = "NGFW"

	// AWSFirewallModeTAP represents the value TAP.
	AWSFirewallModeTAP AWSFirewallModeValue = "TAP"
)

// AWSFirewallStatusValue represents the possible values for attribute "status".
type AWSFirewallStatusValue string

const (
	// AWSFirewallStatusCreating represents the value Creating.
	AWSFirewallStatusCreating AWSFirewallStatusValue = "Creating"

	// AWSFirewallStatusDeleting represents the value Deleting.
	AWSFirewallStatusDeleting AWSFirewallStatusValue = "Deleting"

	// AWSFirewallStatusFailed represents the value Failed.
	AWSFirewallStatusFailed AWSFirewallStatusValue = "Failed"

	// AWSFirewallStatusLogConfigFailed represents the value LogConfigFailed.
	AWSFirewallStatusLogConfigFailed AWSFirewallStatusValue = "LogConfigFailed"

	// AWSFirewallStatusReady represents the value Ready.
	AWSFirewallStatusReady AWSFirewallStatusValue = "Ready"

	// AWSFirewallStatusUpdating represents the value Updating.
	AWSFirewallStatusUpdating AWSFirewallStatusValue = "Updating"
)

// AWSFirewallIdentity represents the Identity of the object.
var AWSFirewallIdentity = elemental.Identity{
	Name:     "awsfirewall",
	Category: "awsfirewalls",
	Package:  "ngfw",
	Private:  false,
}

// AWSFirewallsList represents a list of AWSFirewalls
type AWSFirewallsList []*AWSFirewall

// Identity returns the identity of the objects in the list.
func (o AWSFirewallsList) Identity() elemental.Identity {

	return AWSFirewallIdentity
}

// Copy returns a pointer to a copy the AWSFirewallsList.
func (o AWSFirewallsList) Copy() elemental.Identifiables {

	out := append(AWSFirewallsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AWSFirewallsList.
func (o AWSFirewallsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AWSFirewallsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AWSFirewall))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AWSFirewallsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AWSFirewallsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the AWSFirewallsList converted to SparseAWSFirewallsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AWSFirewallsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAWSFirewallsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAWSFirewall)
	}

	return out
}

// Version returns the version of the content.
func (o AWSFirewallsList) Version() int {

	return 1
}

// AWSFirewall represents the model of a awsfirewall
type AWSFirewall struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The internal NGFW externalID for making API calls.
	NGFWExternalID string `json:"-" msgpack:"-" bson:"ngfwexternalid" mapstructure:"-,omitempty"`

	// The internal name of the NGFW firewall.
	NGFWFirewall string `json:"NGFWFirewall" msgpack:"NGFWFirewall" bson:"ngfwfirewall" mapstructure:"NGFWFirewall,omitempty"`

	// The internal name of the NGFW rulestack associated with the firewall.
	NGFWRuleStack string `json:"-" msgpack:"-" bson:"ngfwrulestack" mapstructure:"-,omitempty"`

	// The list of VPC IDs.
	VPCIDs []string `json:"VPCIDs" msgpack:"VPCIDs" bson:"vpcids" mapstructure:"VPCIDs,omitempty"`

	// Stores additional information about an entity.
	Annotations map[string][]string `json:"annotations" msgpack:"annotations" bson:"annotations" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags []string `json:"associatedTags" msgpack:"associatedTags" bson:"associatedtags" mapstructure:"associatedTags,omitempty"`

	// A list of availability zones.
	AvailabilityZones []string `json:"availabilityZones" msgpack:"availabilityZones" bson:"availabilityzones" mapstructure:"availabilityZones,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey string `json:"-" msgpack:"-" bson:"createidempotencykey" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// The endpoint service name needed to create an AWS endpoint.
	EndpointServiceName string `json:"endpointServiceName" msgpack:"endpointServiceName" bson:"endpointservicename" mapstructure:"endpointServiceName,omitempty"`

	// The firewall endpoints.
	Endpoints []*AWSEndpoint `json:"endpoints" msgpack:"endpoints" bson:"endpoints" mapstructure:"endpoints,omitempty"`

	// The date when the fireall was last committed.
	LastCommitTime time.Time `json:"lastCommitTime" msgpack:"lastCommitTime" bson:"lastcommittime" mapstructure:"lastCommitTime,omitempty"`

	// The license type of the firewall.
	LicenseType AWSFirewallLicenseTypeValue `json:"licenseType" msgpack:"licenseType" bson:"licensetype" mapstructure:"licenseType,omitempty"`

	// The mode of the of firewall.
	Mode AWSFirewallModeValue `json:"mode" msgpack:"mode" bson:"mode" mapstructure:"mode,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags []string `json:"normalizedTags" msgpack:"normalizedTags" bson:"normalizedtags" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected bool `json:"protected" msgpack:"protected" bson:"protected" mapstructure:"protected,omitempty"`

	// The AWS region of this Firewall.
	Region string `json:"region" msgpack:"region" bson:"region" mapstructure:"region,omitempty"`

	// The number of times a Create/Update/Delete has been retried.
	RetryCount int `json:"-" msgpack:"-" bson:"retrycount" mapstructure:"-,omitempty"`

	// The status of the of firewall.
	Status AWSFirewallStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// The status description of the firewall.
	StatusReason string `json:"statusReason" msgpack:"statusReason" bson:"statusreason" mapstructure:"statusReason,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey string `json:"-" msgpack:"-" bson:"updateidempotencykey" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAWSFirewall returns a new *AWSFirewall
func NewAWSFirewall() *AWSFirewall {

	return &AWSFirewall{
		ModelVersion:      1,
		VPCIDs:            []string{},
		Annotations:       map[string][]string{},
		AssociatedTags:    []string{},
		AvailabilityZones: []string{},
		Endpoints:         []*AWSEndpoint{},
		LicenseType:       AWSFirewallLicenseTypeTAP,
		Mode:              AWSFirewallModeTAP,
		NormalizedTags:    []string{},
		Status:            AWSFirewallStatusCreating,
	}
}

// Identity returns the Identity of the object.
func (o *AWSFirewall) Identity() elemental.Identity {

	return AWSFirewallIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AWSFirewall) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AWSFirewall) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AWSFirewall) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAWSFirewall{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.NGFWExternalID = o.NGFWExternalID
	s.NGFWFirewall = o.NGFWFirewall
	s.NGFWRuleStack = o.NGFWRuleStack
	s.VPCIDs = o.VPCIDs
	s.Annotations = o.Annotations
	s.AssociatedTags = o.AssociatedTags
	s.AvailabilityZones = o.AvailabilityZones
	s.CreateIdempotencyKey = o.CreateIdempotencyKey
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.EndpointServiceName = o.EndpointServiceName
	s.Endpoints = o.Endpoints
	s.LastCommitTime = o.LastCommitTime
	s.LicenseType = o.LicenseType
	s.Mode = o.Mode
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.NormalizedTags = o.NormalizedTags
	s.Protected = o.Protected
	s.Region = o.Region
	s.RetryCount = o.RetryCount
	s.Status = o.Status
	s.StatusReason = o.StatusReason
	s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AWSFirewall) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAWSFirewall{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.NGFWExternalID = s.NGFWExternalID
	o.NGFWFirewall = s.NGFWFirewall
	o.NGFWRuleStack = s.NGFWRuleStack
	o.VPCIDs = s.VPCIDs
	o.Annotations = s.Annotations
	o.AssociatedTags = s.AssociatedTags
	o.AvailabilityZones = s.AvailabilityZones
	o.CreateIdempotencyKey = s.CreateIdempotencyKey
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.EndpointServiceName = s.EndpointServiceName
	o.Endpoints = s.Endpoints
	o.LastCommitTime = s.LastCommitTime
	o.LicenseType = s.LicenseType
	o.Mode = s.Mode
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.NormalizedTags = s.NormalizedTags
	o.Protected = s.Protected
	o.Region = s.Region
	o.RetryCount = s.RetryCount
	o.Status = s.Status
	o.StatusReason = s.StatusReason
	o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AWSFirewall) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AWSFirewall) BleveType() string {

	return "awsfirewall"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AWSFirewall) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *AWSFirewall) Doc() string {

	return `Represents an AWS firewall instance.`
}

func (o *AWSFirewall) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetAnnotations returns the Annotations of the receiver.
func (o *AWSFirewall) GetAnnotations() map[string][]string {

	return o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the given value.
func (o *AWSFirewall) SetAnnotations(annotations map[string][]string) {

	o.Annotations = annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *AWSFirewall) GetAssociatedTags() []string {

	return o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the given value.
func (o *AWSFirewall) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AWSFirewall) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AWSFirewall) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetDescription returns the Description of the receiver.
func (o *AWSFirewall) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *AWSFirewall) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *AWSFirewall) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *AWSFirewall) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *AWSFirewall) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AWSFirewall) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *AWSFirewall) GetNormalizedTags() []string {

	return o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the given value.
func (o *AWSFirewall) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *AWSFirewall) GetProtected() bool {

	return o.Protected
}

// SetProtected sets the property Protected of the receiver using the given value.
func (o *AWSFirewall) SetProtected(protected bool) {

	o.Protected = protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AWSFirewall) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AWSFirewall) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AWSFirewall) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAWSFirewall{
			ID:                   &o.ID,
			NGFWExternalID:       &o.NGFWExternalID,
			NGFWFirewall:         &o.NGFWFirewall,
			NGFWRuleStack:        &o.NGFWRuleStack,
			VPCIDs:               &o.VPCIDs,
			Annotations:          &o.Annotations,
			AssociatedTags:       &o.AssociatedTags,
			AvailabilityZones:    &o.AvailabilityZones,
			CreateIdempotencyKey: &o.CreateIdempotencyKey,
			CreateTime:           &o.CreateTime,
			Description:          &o.Description,
			EndpointServiceName:  &o.EndpointServiceName,
			Endpoints:            &o.Endpoints,
			LastCommitTime:       &o.LastCommitTime,
			LicenseType:          &o.LicenseType,
			Mode:                 &o.Mode,
			Name:                 &o.Name,
			Namespace:            &o.Namespace,
			NormalizedTags:       &o.NormalizedTags,
			Protected:            &o.Protected,
			Region:               &o.Region,
			RetryCount:           &o.RetryCount,
			Status:               &o.Status,
			StatusReason:         &o.StatusReason,
			UpdateIdempotencyKey: &o.UpdateIdempotencyKey,
			UpdateTime:           &o.UpdateTime,
			ZHash:                &o.ZHash,
			Zone:                 &o.Zone,
		}
	}

	sp := &SparseAWSFirewall{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "NGFWExternalID":
			sp.NGFWExternalID = &(o.NGFWExternalID)
		case "NGFWFirewall":
			sp.NGFWFirewall = &(o.NGFWFirewall)
		case "NGFWRuleStack":
			sp.NGFWRuleStack = &(o.NGFWRuleStack)
		case "VPCIDs":
			sp.VPCIDs = &(o.VPCIDs)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "associatedTags":
			sp.AssociatedTags = &(o.AssociatedTags)
		case "availabilityZones":
			sp.AvailabilityZones = &(o.AvailabilityZones)
		case "createIdempotencyKey":
			sp.CreateIdempotencyKey = &(o.CreateIdempotencyKey)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "endpointServiceName":
			sp.EndpointServiceName = &(o.EndpointServiceName)
		case "endpoints":
			sp.Endpoints = &(o.Endpoints)
		case "lastCommitTime":
			sp.LastCommitTime = &(o.LastCommitTime)
		case "licenseType":
			sp.LicenseType = &(o.LicenseType)
		case "mode":
			sp.Mode = &(o.Mode)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "normalizedTags":
			sp.NormalizedTags = &(o.NormalizedTags)
		case "protected":
			sp.Protected = &(o.Protected)
		case "region":
			sp.Region = &(o.Region)
		case "retryCount":
			sp.RetryCount = &(o.RetryCount)
		case "status":
			sp.Status = &(o.Status)
		case "statusReason":
			sp.StatusReason = &(o.StatusReason)
		case "updateIdempotencyKey":
			sp.UpdateIdempotencyKey = &(o.UpdateIdempotencyKey)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAWSFirewall to the object.
func (o *AWSFirewall) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAWSFirewall)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.NGFWExternalID != nil {
		o.NGFWExternalID = *so.NGFWExternalID
	}
	if so.NGFWFirewall != nil {
		o.NGFWFirewall = *so.NGFWFirewall
	}
	if so.NGFWRuleStack != nil {
		o.NGFWRuleStack = *so.NGFWRuleStack
	}
	if so.VPCIDs != nil {
		o.VPCIDs = *so.VPCIDs
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.AssociatedTags != nil {
		o.AssociatedTags = *so.AssociatedTags
	}
	if so.AvailabilityZones != nil {
		o.AvailabilityZones = *so.AvailabilityZones
	}
	if so.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = *so.CreateIdempotencyKey
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.EndpointServiceName != nil {
		o.EndpointServiceName = *so.EndpointServiceName
	}
	if so.Endpoints != nil {
		o.Endpoints = *so.Endpoints
	}
	if so.LastCommitTime != nil {
		o.LastCommitTime = *so.LastCommitTime
	}
	if so.LicenseType != nil {
		o.LicenseType = *so.LicenseType
	}
	if so.Mode != nil {
		o.Mode = *so.Mode
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NormalizedTags != nil {
		o.NormalizedTags = *so.NormalizedTags
	}
	if so.Protected != nil {
		o.Protected = *so.Protected
	}
	if so.Region != nil {
		o.Region = *so.Region
	}
	if so.RetryCount != nil {
		o.RetryCount = *so.RetryCount
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.StatusReason != nil {
		o.StatusReason = *so.StatusReason
	}
	if so.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = *so.UpdateIdempotencyKey
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AWSFirewall.
func (o *AWSFirewall) DeepCopy() *AWSFirewall {

	if o == nil {
		return nil
	}

	out := &AWSFirewall{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AWSFirewall.
func (o *AWSFirewall) DeepCopyInto(out *AWSFirewall) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AWSFirewall: %s", err))
	}

	*out = *target.(*AWSFirewall)
}

// Validate valides the current information stored into the structure.
func (o *AWSFirewall) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredExternal("VPCIDs", o.VPCIDs); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := ValidateVPCIDs("VPCIDs", o.VPCIDs); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateTagsWithoutReservedPrefixes("associatedTags", o.AssociatedTags); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredExternal("availabilityZones", o.AvailabilityZones); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.Endpoints {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("licenseType", string(o.LicenseType), []string{"TAP", "Basic", "Advanced"}, true); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("mode", string(o.Mode), []string{"TAP", "NGFW"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("region", o.Region); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Creating", "Updating", "Deleting", "Ready", "Failed", "LogConfigFailed"}, true); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AWSFirewall) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AWSFirewallAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AWSFirewallLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AWSFirewall) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AWSFirewallAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AWSFirewall) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "NGFWExternalID":
		return o.NGFWExternalID
	case "NGFWFirewall":
		return o.NGFWFirewall
	case "NGFWRuleStack":
		return o.NGFWRuleStack
	case "VPCIDs":
		return o.VPCIDs
	case "annotations":
		return o.Annotations
	case "associatedTags":
		return o.AssociatedTags
	case "availabilityZones":
		return o.AvailabilityZones
	case "createIdempotencyKey":
		return o.CreateIdempotencyKey
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "endpointServiceName":
		return o.EndpointServiceName
	case "endpoints":
		return o.Endpoints
	case "lastCommitTime":
		return o.LastCommitTime
	case "licenseType":
		return o.LicenseType
	case "mode":
		return o.Mode
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "normalizedTags":
		return o.NormalizedTags
	case "protected":
		return o.Protected
	case "region":
		return o.Region
	case "retryCount":
		return o.RetryCount
	case "status":
		return o.Status
	case "statusReason":
		return o.StatusReason
	case "updateIdempotencyKey":
		return o.UpdateIdempotencyKey
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AWSFirewallAttributesMap represents the map of attribute for AWSFirewall.
var AWSFirewallAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"NGFWFirewall": {
		AllowedChoices: []string{},
		BSONFieldName:  "ngfwfirewall",
		ConvertedName:  "NGFWFirewall",
		Description:    `The internal name of the NGFW firewall.`,
		Exposed:        true,
		Name:           "NGFWFirewall",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"VPCIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcids",
		ConvertedName:  "VPCIDs",
		Description:    `The list of VPC IDs.`,
		Exposed:        true,
		Name:           "VPCIDs",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"AssociatedTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"AvailabilityZones": {
		AllowedChoices: []string{},
		BSONFieldName:  "availabilityzones",
		ConvertedName:  "AvailabilityZones",
		Description:    `A list of availability zones.`,
		Exposed:        true,
		Name:           "availabilityZones",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"EndpointServiceName": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointservicename",
		ConvertedName:  "EndpointServiceName",
		Description:    `The endpoint service name needed to create an AWS endpoint.`,
		Exposed:        true,
		Name:           "endpointServiceName",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Endpoints": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpoints",
		ConvertedName:  "Endpoints",
		Description:    `The firewall endpoints.`,
		Exposed:        true,
		Name:           "endpoints",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "awsendpoint",
		Type:           "refList",
	},
	"LastCommitTime": {
		AllowedChoices: []string{},
		BSONFieldName:  "lastcommittime",
		ConvertedName:  "LastCommitTime",
		Description:    `The date when the fireall was last committed.`,
		Exposed:        true,
		Name:           "lastCommitTime",
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"LicenseType": {
		AllowedChoices: []string{"TAP", "Basic", "Advanced"},
		Autogenerated:  true,
		BSONFieldName:  "licensetype",
		ConvertedName:  "LicenseType",
		DefaultValue:   AWSFirewallLicenseTypeTAP,
		Description:    `The license type of the firewall.`,
		Exposed:        true,
		Name:           "licenseType",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Mode": {
		AllowedChoices: []string{"TAP", "NGFW"},
		BSONFieldName:  "mode",
		ConvertedName:  "Mode",
		DefaultValue:   AWSFirewallModeTAP,
		Description:    `The mode of the of firewall.`,
		Exposed:        true,
		Name:           "mode",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NormalizedTags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"Protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"Region": {
		AllowedChoices: []string{},
		BSONFieldName:  "region",
		ConvertedName:  "Region",
		CreationOnly:   true,
		Description:    `The AWS region of this Firewall.`,
		Exposed:        true,
		Name:           "region",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},

	"Status": {
		AllowedChoices: []string{"Creating", "Updating", "Deleting", "Ready", "Failed", "LogConfigFailed"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		DefaultValue:   AWSFirewallStatusCreating,
		Description:    `The status of the of firewall.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"StatusReason": {
		AllowedChoices: []string{},
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `The status description of the firewall.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// AWSFirewallLowerCaseAttributesMap represents the map of attribute for AWSFirewall.
var AWSFirewallLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"ngfwfirewall": {
		AllowedChoices: []string{},
		BSONFieldName:  "ngfwfirewall",
		ConvertedName:  "NGFWFirewall",
		Description:    `The internal name of the NGFW firewall.`,
		Exposed:        true,
		Name:           "NGFWFirewall",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"vpcids": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcids",
		ConvertedName:  "VPCIDs",
		Description:    `The list of VPC IDs.`,
		Exposed:        true,
		Name:           "VPCIDs",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"associatedtags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"availabilityzones": {
		AllowedChoices: []string{},
		BSONFieldName:  "availabilityzones",
		ConvertedName:  "AvailabilityZones",
		Description:    `A list of availability zones.`,
		Exposed:        true,
		Name:           "availabilityZones",
		Required:       true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"endpointservicename": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointservicename",
		ConvertedName:  "EndpointServiceName",
		Description:    `The endpoint service name needed to create an AWS endpoint.`,
		Exposed:        true,
		Name:           "endpointServiceName",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"endpoints": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpoints",
		ConvertedName:  "Endpoints",
		Description:    `The firewall endpoints.`,
		Exposed:        true,
		Name:           "endpoints",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "awsendpoint",
		Type:           "refList",
	},
	"lastcommittime": {
		AllowedChoices: []string{},
		BSONFieldName:  "lastcommittime",
		ConvertedName:  "LastCommitTime",
		Description:    `The date when the fireall was last committed.`,
		Exposed:        true,
		Name:           "lastCommitTime",
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"licensetype": {
		AllowedChoices: []string{"TAP", "Basic", "Advanced"},
		Autogenerated:  true,
		BSONFieldName:  "licensetype",
		ConvertedName:  "LicenseType",
		DefaultValue:   AWSFirewallLicenseTypeTAP,
		Description:    `The license type of the firewall.`,
		Exposed:        true,
		Name:           "licenseType",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"mode": {
		AllowedChoices: []string{"TAP", "NGFW"},
		BSONFieldName:  "mode",
		ConvertedName:  "Mode",
		DefaultValue:   AWSFirewallModeTAP,
		Description:    `The mode of the of firewall.`,
		Exposed:        true,
		Name:           "mode",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"normalizedtags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"region": {
		AllowedChoices: []string{},
		BSONFieldName:  "region",
		ConvertedName:  "Region",
		CreationOnly:   true,
		Description:    `The AWS region of this Firewall.`,
		Exposed:        true,
		Name:           "region",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},

	"status": {
		AllowedChoices: []string{"Creating", "Updating", "Deleting", "Ready", "Failed", "LogConfigFailed"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		DefaultValue:   AWSFirewallStatusCreating,
		Description:    `The status of the of firewall.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"statusreason": {
		AllowedChoices: []string{},
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `The status description of the firewall.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseAWSFirewallsList represents a list of SparseAWSFirewalls
type SparseAWSFirewallsList []*SparseAWSFirewall

// Identity returns the identity of the objects in the list.
func (o SparseAWSFirewallsList) Identity() elemental.Identity {

	return AWSFirewallIdentity
}

// Copy returns a pointer to a copy the SparseAWSFirewallsList.
func (o SparseAWSFirewallsList) Copy() elemental.Identifiables {

	copy := append(SparseAWSFirewallsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAWSFirewallsList.
func (o SparseAWSFirewallsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAWSFirewallsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAWSFirewall))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAWSFirewallsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAWSFirewallsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparseAWSFirewallsList converted to AWSFirewallsList.
func (o SparseAWSFirewallsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAWSFirewallsList) Version() int {

	return 1
}

// SparseAWSFirewall represents the sparse version of a awsfirewall.
type SparseAWSFirewall struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The internal NGFW externalID for making API calls.
	NGFWExternalID *string `json:"-" msgpack:"-" bson:"ngfwexternalid,omitempty" mapstructure:"-,omitempty"`

	// The internal name of the NGFW firewall.
	NGFWFirewall *string `json:"NGFWFirewall,omitempty" msgpack:"NGFWFirewall,omitempty" bson:"ngfwfirewall,omitempty" mapstructure:"NGFWFirewall,omitempty"`

	// The internal name of the NGFW rulestack associated with the firewall.
	NGFWRuleStack *string `json:"-" msgpack:"-" bson:"ngfwrulestack,omitempty" mapstructure:"-,omitempty"`

	// The list of VPC IDs.
	VPCIDs *[]string `json:"VPCIDs,omitempty" msgpack:"VPCIDs,omitempty" bson:"vpcids,omitempty" mapstructure:"VPCIDs,omitempty"`

	// Stores additional information about an entity.
	Annotations *map[string][]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags *[]string `json:"associatedTags,omitempty" msgpack:"associatedTags,omitempty" bson:"associatedtags,omitempty" mapstructure:"associatedTags,omitempty"`

	// A list of availability zones.
	AvailabilityZones *[]string `json:"availabilityZones,omitempty" msgpack:"availabilityZones,omitempty" bson:"availabilityzones,omitempty" mapstructure:"availabilityZones,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey *string `json:"-" msgpack:"-" bson:"createidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The endpoint service name needed to create an AWS endpoint.
	EndpointServiceName *string `json:"endpointServiceName,omitempty" msgpack:"endpointServiceName,omitempty" bson:"endpointservicename,omitempty" mapstructure:"endpointServiceName,omitempty"`

	// The firewall endpoints.
	Endpoints *[]*AWSEndpoint `json:"endpoints,omitempty" msgpack:"endpoints,omitempty" bson:"endpoints,omitempty" mapstructure:"endpoints,omitempty"`

	// The date when the fireall was last committed.
	LastCommitTime *time.Time `json:"lastCommitTime,omitempty" msgpack:"lastCommitTime,omitempty" bson:"lastcommittime,omitempty" mapstructure:"lastCommitTime,omitempty"`

	// The license type of the firewall.
	LicenseType *AWSFirewallLicenseTypeValue `json:"licenseType,omitempty" msgpack:"licenseType,omitempty" bson:"licensetype,omitempty" mapstructure:"licenseType,omitempty"`

	// The mode of the of firewall.
	Mode *AWSFirewallModeValue `json:"mode,omitempty" msgpack:"mode,omitempty" bson:"mode,omitempty" mapstructure:"mode,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags *[]string `json:"normalizedTags,omitempty" msgpack:"normalizedTags,omitempty" bson:"normalizedtags,omitempty" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected *bool `json:"protected,omitempty" msgpack:"protected,omitempty" bson:"protected,omitempty" mapstructure:"protected,omitempty"`

	// The AWS region of this Firewall.
	Region *string `json:"region,omitempty" msgpack:"region,omitempty" bson:"region,omitempty" mapstructure:"region,omitempty"`

	// The number of times a Create/Update/Delete has been retried.
	RetryCount *int `json:"-" msgpack:"-" bson:"retrycount,omitempty" mapstructure:"-,omitempty"`

	// The status of the of firewall.
	Status *AWSFirewallStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// The status description of the firewall.
	StatusReason *string `json:"statusReason,omitempty" msgpack:"statusReason,omitempty" bson:"statusreason,omitempty" mapstructure:"statusReason,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey *string `json:"-" msgpack:"-" bson:"updateidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAWSFirewall returns a new  SparseAWSFirewall.
func NewSparseAWSFirewall() *SparseAWSFirewall {
	return &SparseAWSFirewall{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAWSFirewall) Identity() elemental.Identity {

	return AWSFirewallIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAWSFirewall) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAWSFirewall) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAWSFirewall) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAWSFirewall{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.NGFWExternalID != nil {
		s.NGFWExternalID = o.NGFWExternalID
	}
	if o.NGFWFirewall != nil {
		s.NGFWFirewall = o.NGFWFirewall
	}
	if o.NGFWRuleStack != nil {
		s.NGFWRuleStack = o.NGFWRuleStack
	}
	if o.VPCIDs != nil {
		s.VPCIDs = o.VPCIDs
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.AssociatedTags != nil {
		s.AssociatedTags = o.AssociatedTags
	}
	if o.AvailabilityZones != nil {
		s.AvailabilityZones = o.AvailabilityZones
	}
	if o.CreateIdempotencyKey != nil {
		s.CreateIdempotencyKey = o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.EndpointServiceName != nil {
		s.EndpointServiceName = o.EndpointServiceName
	}
	if o.Endpoints != nil {
		s.Endpoints = o.Endpoints
	}
	if o.LastCommitTime != nil {
		s.LastCommitTime = o.LastCommitTime
	}
	if o.LicenseType != nil {
		s.LicenseType = o.LicenseType
	}
	if o.Mode != nil {
		s.Mode = o.Mode
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NormalizedTags != nil {
		s.NormalizedTags = o.NormalizedTags
	}
	if o.Protected != nil {
		s.Protected = o.Protected
	}
	if o.Region != nil {
		s.Region = o.Region
	}
	if o.RetryCount != nil {
		s.RetryCount = o.RetryCount
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.StatusReason != nil {
		s.StatusReason = o.StatusReason
	}
	if o.UpdateIdempotencyKey != nil {
		s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAWSFirewall) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAWSFirewall{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.NGFWExternalID != nil {
		o.NGFWExternalID = s.NGFWExternalID
	}
	if s.NGFWFirewall != nil {
		o.NGFWFirewall = s.NGFWFirewall
	}
	if s.NGFWRuleStack != nil {
		o.NGFWRuleStack = s.NGFWRuleStack
	}
	if s.VPCIDs != nil {
		o.VPCIDs = s.VPCIDs
	}
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.AssociatedTags != nil {
		o.AssociatedTags = s.AssociatedTags
	}
	if s.AvailabilityZones != nil {
		o.AvailabilityZones = s.AvailabilityZones
	}
	if s.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = s.CreateIdempotencyKey
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.EndpointServiceName != nil {
		o.EndpointServiceName = s.EndpointServiceName
	}
	if s.Endpoints != nil {
		o.Endpoints = s.Endpoints
	}
	if s.LastCommitTime != nil {
		o.LastCommitTime = s.LastCommitTime
	}
	if s.LicenseType != nil {
		o.LicenseType = s.LicenseType
	}
	if s.Mode != nil {
		o.Mode = s.Mode
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NormalizedTags != nil {
		o.NormalizedTags = s.NormalizedTags
	}
	if s.Protected != nil {
		o.Protected = s.Protected
	}
	if s.Region != nil {
		o.Region = s.Region
	}
	if s.RetryCount != nil {
		o.RetryCount = s.RetryCount
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.StatusReason != nil {
		o.StatusReason = s.StatusReason
	}
	if s.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAWSFirewall) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAWSFirewall) ToPlain() elemental.PlainIdentifiable {

	out := NewAWSFirewall()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.NGFWExternalID != nil {
		out.NGFWExternalID = *o.NGFWExternalID
	}
	if o.NGFWFirewall != nil {
		out.NGFWFirewall = *o.NGFWFirewall
	}
	if o.NGFWRuleStack != nil {
		out.NGFWRuleStack = *o.NGFWRuleStack
	}
	if o.VPCIDs != nil {
		out.VPCIDs = *o.VPCIDs
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.AssociatedTags != nil {
		out.AssociatedTags = *o.AssociatedTags
	}
	if o.AvailabilityZones != nil {
		out.AvailabilityZones = *o.AvailabilityZones
	}
	if o.CreateIdempotencyKey != nil {
		out.CreateIdempotencyKey = *o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.EndpointServiceName != nil {
		out.EndpointServiceName = *o.EndpointServiceName
	}
	if o.Endpoints != nil {
		out.Endpoints = *o.Endpoints
	}
	if o.LastCommitTime != nil {
		out.LastCommitTime = *o.LastCommitTime
	}
	if o.LicenseType != nil {
		out.LicenseType = *o.LicenseType
	}
	if o.Mode != nil {
		out.Mode = *o.Mode
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NormalizedTags != nil {
		out.NormalizedTags = *o.NormalizedTags
	}
	if o.Protected != nil {
		out.Protected = *o.Protected
	}
	if o.Region != nil {
		out.Region = *o.Region
	}
	if o.RetryCount != nil {
		out.RetryCount = *o.RetryCount
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.StatusReason != nil {
		out.StatusReason = *o.StatusReason
	}
	if o.UpdateIdempotencyKey != nil {
		out.UpdateIdempotencyKey = *o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetAnnotations returns the Annotations of the receiver.
func (o *SparseAWSFirewall) GetAnnotations() (out map[string][]string) {

	if o.Annotations == nil {
		return
	}

	return *o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetAnnotations(annotations map[string][]string) {

	o.Annotations = &annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *SparseAWSFirewall) GetAssociatedTags() (out []string) {

	if o.AssociatedTags == nil {
		return
	}

	return *o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = &associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAWSFirewall) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetDescription returns the Description of the receiver.
func (o *SparseAWSFirewall) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparseAWSFirewall) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAWSFirewall) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *SparseAWSFirewall) GetNormalizedTags() (out []string) {

	if o.NormalizedTags == nil {
		return
	}

	return *o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = &normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *SparseAWSFirewall) GetProtected() (out bool) {

	if o.Protected == nil {
		return
	}

	return *o.Protected
}

// SetProtected sets the property Protected of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetProtected(protected bool) {

	o.Protected = &protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAWSFirewall) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAWSFirewall) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAWSFirewall.
func (o *SparseAWSFirewall) DeepCopy() *SparseAWSFirewall {

	if o == nil {
		return nil
	}

	out := &SparseAWSFirewall{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAWSFirewall.
func (o *SparseAWSFirewall) DeepCopyInto(out *SparseAWSFirewall) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAWSFirewall: %s", err))
	}

	*out = *target.(*SparseAWSFirewall)
}

type mongoAttributesAWSFirewall struct {
	ID                   bson.ObjectId               `bson:"_id,omitempty"`
	NGFWExternalID       string                      `bson:"ngfwexternalid"`
	NGFWFirewall         string                      `bson:"ngfwfirewall"`
	NGFWRuleStack        string                      `bson:"ngfwrulestack"`
	VPCIDs               []string                    `bson:"vpcids"`
	Annotations          map[string][]string         `bson:"annotations"`
	AssociatedTags       []string                    `bson:"associatedtags"`
	AvailabilityZones    []string                    `bson:"availabilityzones"`
	CreateIdempotencyKey string                      `bson:"createidempotencykey"`
	CreateTime           time.Time                   `bson:"createtime"`
	Description          string                      `bson:"description"`
	EndpointServiceName  string                      `bson:"endpointservicename"`
	Endpoints            []*AWSEndpoint              `bson:"endpoints"`
	LastCommitTime       time.Time                   `bson:"lastcommittime"`
	LicenseType          AWSFirewallLicenseTypeValue `bson:"licensetype"`
	Mode                 AWSFirewallModeValue        `bson:"mode"`
	Name                 string                      `bson:"name"`
	Namespace            string                      `bson:"namespace"`
	NormalizedTags       []string                    `bson:"normalizedtags"`
	Protected            bool                        `bson:"protected"`
	Region               string                      `bson:"region"`
	RetryCount           int                         `bson:"retrycount"`
	Status               AWSFirewallStatusValue      `bson:"status"`
	StatusReason         string                      `bson:"statusreason"`
	UpdateIdempotencyKey string                      `bson:"updateidempotencykey"`
	UpdateTime           time.Time                   `bson:"updatetime"`
	ZHash                int                         `bson:"zhash"`
	Zone                 int                         `bson:"zone"`
}
type mongoAttributesSparseAWSFirewall struct {
	ID                   bson.ObjectId                `bson:"_id,omitempty"`
	NGFWExternalID       *string                      `bson:"ngfwexternalid,omitempty"`
	NGFWFirewall         *string                      `bson:"ngfwfirewall,omitempty"`
	NGFWRuleStack        *string                      `bson:"ngfwrulestack,omitempty"`
	VPCIDs               *[]string                    `bson:"vpcids,omitempty"`
	Annotations          *map[string][]string         `bson:"annotations,omitempty"`
	AssociatedTags       *[]string                    `bson:"associatedtags,omitempty"`
	AvailabilityZones    *[]string                    `bson:"availabilityzones,omitempty"`
	CreateIdempotencyKey *string                      `bson:"createidempotencykey,omitempty"`
	CreateTime           *time.Time                   `bson:"createtime,omitempty"`
	Description          *string                      `bson:"description,omitempty"`
	EndpointServiceName  *string                      `bson:"endpointservicename,omitempty"`
	Endpoints            *[]*AWSEndpoint              `bson:"endpoints,omitempty"`
	LastCommitTime       *time.Time                   `bson:"lastcommittime,omitempty"`
	LicenseType          *AWSFirewallLicenseTypeValue `bson:"licensetype,omitempty"`
	Mode                 *AWSFirewallModeValue        `bson:"mode,omitempty"`
	Name                 *string                      `bson:"name,omitempty"`
	Namespace            *string                      `bson:"namespace,omitempty"`
	NormalizedTags       *[]string                    `bson:"normalizedtags,omitempty"`
	Protected            *bool                        `bson:"protected,omitempty"`
	Region               *string                      `bson:"region,omitempty"`
	RetryCount           *int                         `bson:"retrycount,omitempty"`
	Status               *AWSFirewallStatusValue      `bson:"status,omitempty"`
	StatusReason         *string                      `bson:"statusreason,omitempty"`
	UpdateIdempotencyKey *string                      `bson:"updateidempotencykey,omitempty"`
	UpdateTime           *time.Time                   `bson:"updatetime,omitempty"`
	ZHash                *int                         `bson:"zhash,omitempty"`
	Zone                 *int                         `bson:"zone,omitempty"`
}
