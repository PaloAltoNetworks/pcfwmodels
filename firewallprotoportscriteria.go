// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallProtoPortsCriteria represents the model of a firewallprotoportscriteria
type FirewallProtoPortsCriteria struct {
	// Use NGFW defined application protocols and ports.
	ApplicationDefaults bool `json:"applicationDefaults" msgpack:"applicationDefaults" bson:"applicationdefaults" mapstructure:"applicationDefaults,omitempty"`

	// A protocol:port list.
	ProtoportList []string `json:"protoportList" msgpack:"protoportList" bson:"protoportlist" mapstructure:"protoportList,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallProtoPortsCriteria returns a new *FirewallProtoPortsCriteria
func NewFirewallProtoPortsCriteria() *FirewallProtoPortsCriteria {

	return &FirewallProtoPortsCriteria{
		ModelVersion:  1,
		ProtoportList: []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallProtoPortsCriteria) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallProtoPortsCriteria{}

	s.ApplicationDefaults = o.ApplicationDefaults
	s.ProtoportList = o.ProtoportList

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallProtoPortsCriteria) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallProtoPortsCriteria{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ApplicationDefaults = s.ApplicationDefaults
	o.ProtoportList = s.ProtoportList

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallProtoPortsCriteria) BleveType() string {

	return "firewallprotoportscriteria"
}

// DeepCopy returns a deep copy if the FirewallProtoPortsCriteria.
func (o *FirewallProtoPortsCriteria) DeepCopy() *FirewallProtoPortsCriteria {

	if o == nil {
		return nil
	}

	out := &FirewallProtoPortsCriteria{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallProtoPortsCriteria.
func (o *FirewallProtoPortsCriteria) DeepCopyInto(out *FirewallProtoPortsCriteria) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallProtoPortsCriteria: %s", err))
	}

	*out = *target.(*FirewallProtoPortsCriteria)
}

// Validate valides the current information stored into the structure.
func (o *FirewallProtoPortsCriteria) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateOptionalProtoPorts("protoportList", o.ProtoportList); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallProtoPortsCriteria) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallProtoPortsCriteriaAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallProtoPortsCriteriaLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallProtoPortsCriteria) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallProtoPortsCriteriaAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallProtoPortsCriteria) ValueForAttribute(name string) any {

	switch name {
	case "applicationDefaults":
		return o.ApplicationDefaults
	case "protoportList":
		return o.ProtoportList
	}

	return nil
}

// FirewallProtoPortsCriteriaAttributesMap represents the map of attribute for FirewallProtoPortsCriteria.
var FirewallProtoPortsCriteriaAttributesMap = map[string]elemental.AttributeSpecification{
	"ApplicationDefaults": {
		AllowedChoices: []string{},
		BSONFieldName:  "applicationdefaults",
		ConvertedName:  "ApplicationDefaults",
		Description:    `Use NGFW defined application protocols and ports.`,
		Exposed:        true,
		Name:           "applicationDefaults",
		Stored:         true,
		Type:           "boolean",
	},
	"ProtoportList": {
		AllowedChoices: []string{},
		BSONFieldName:  "protoportlist",
		ConvertedName:  "ProtoportList",
		Description:    `A protocol:port list.`,
		Exposed:        true,
		Name:           "protoportList",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

// FirewallProtoPortsCriteriaLowerCaseAttributesMap represents the map of attribute for FirewallProtoPortsCriteria.
var FirewallProtoPortsCriteriaLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"applicationdefaults": {
		AllowedChoices: []string{},
		BSONFieldName:  "applicationdefaults",
		ConvertedName:  "ApplicationDefaults",
		Description:    `Use NGFW defined application protocols and ports.`,
		Exposed:        true,
		Name:           "applicationDefaults",
		Stored:         true,
		Type:           "boolean",
	},
	"protoportlist": {
		AllowedChoices: []string{},
		BSONFieldName:  "protoportlist",
		ConvertedName:  "ProtoportList",
		Description:    `A protocol:port list.`,
		Exposed:        true,
		Name:           "protoportList",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

type mongoAttributesFirewallProtoPortsCriteria struct {
	ApplicationDefaults bool     `bson:"applicationdefaults"`
	ProtoportList       []string `bson:"protoportlist"`
}
