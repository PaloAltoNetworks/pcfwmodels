// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallSecurityProfileIdentity represents the Identity of the object.
var FirewallSecurityProfileIdentity = elemental.Identity{
	Name:     "firewallsecurityprofile",
	Category: "firewallsecurityprofiles",
	Package:  "ngfw",
	Private:  false,
}

// FirewallSecurityProfilesList represents a list of FirewallSecurityProfiles
type FirewallSecurityProfilesList []*FirewallSecurityProfile

// Identity returns the identity of the objects in the list.
func (o FirewallSecurityProfilesList) Identity() elemental.Identity {

	return FirewallSecurityProfileIdentity
}

// Copy returns a pointer to a copy the FirewallSecurityProfilesList.
func (o FirewallSecurityProfilesList) Copy() elemental.Identifiables {

	out := append(FirewallSecurityProfilesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the FirewallSecurityProfilesList.
func (o FirewallSecurityProfilesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallSecurityProfilesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallSecurityProfile))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallSecurityProfilesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallSecurityProfilesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the FirewallSecurityProfilesList converted to SparseFirewallSecurityProfilesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallSecurityProfilesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallSecurityProfilesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallSecurityProfile)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallSecurityProfilesList) Version() int {

	return 1
}

// FirewallSecurityProfile represents the model of a firewallsecurityprofile
type FirewallSecurityProfile struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Enables IPS.
	IPSEnabled bool `json:"IPSEnabled" msgpack:"IPSEnabled" bson:"ipsenabled" mapstructure:"IPSEnabled,omitempty"`

	// Enables best practice URL Categories.
	URLCategoriesEnabled bool `json:"URLCategoriesEnabled" msgpack:"URLCategoriesEnabled" bson:"urlcategoriesenabled" mapstructure:"URLCategoriesEnabled,omitempty"`

	// Stores additional information about an entity.
	Annotations map[string][]string `json:"annotations" msgpack:"annotations" bson:"annotations" mapstructure:"annotations,omitempty"`

	// Enables AntiSpyware.
	AntiSpywareEnabled bool `json:"antiSpywareEnabled" msgpack:"antiSpywareEnabled" bson:"antispywareenabled" mapstructure:"antiSpywareEnabled,omitempty"`

	// Enables AntiVirus.
	AntiVirusEnabled bool `json:"antiVirusEnabled" msgpack:"antiVirusEnabled" bson:"antivirusenabled" mapstructure:"antiVirusEnabled,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags []string `json:"associatedTags" msgpack:"associatedTags" bson:"associatedtags" mapstructure:"associatedTags,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey string `json:"-" msgpack:"-" bson:"createidempotencykey" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Enables file blocking.
	FileBlockingEnabled bool `json:"fileBlockingEnabled" msgpack:"fileBlockingEnabled" bson:"fileblockingenabled" mapstructure:"fileBlockingEnabled,omitempty"`

	// The date when the security profile was last committed.
	LastCommittedTime time.Time `json:"lastCommittedTime" msgpack:"lastCommittedTime" bson:"lastcommittedtime" mapstructure:"lastCommittedTime,omitempty"`

	// The date when the security profile was last updated.
	LastUpdatedTime time.Time `json:"lastUpdatedTime" msgpack:"lastUpdatedTime" bson:"lastupdatedtime" mapstructure:"lastUpdatedTime,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags []string `json:"normalizedTags" msgpack:"normalizedTags" bson:"normalizedtags" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected bool `json:"protected" msgpack:"protected" bson:"protected" mapstructure:"protected,omitempty"`

	// The trusted Certificate ID for Outbound Decryption.
	TrustedCertificateID string `json:"trustedCertificateID" msgpack:"trustedCertificateID" bson:"trustedcertificateid" mapstructure:"trustedCertificateID,omitempty"`

	// The untrusted Certificate ID for Outbound Decryption.
	UntrustedCertificateID string `json:"untrustedCertificateID" msgpack:"untrustedCertificateID" bson:"untrustedcertificateid" mapstructure:"untrustedCertificateID,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey string `json:"-" msgpack:"-" bson:"updateidempotencykey" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallSecurityProfile returns a new *FirewallSecurityProfile
func NewFirewallSecurityProfile() *FirewallSecurityProfile {

	return &FirewallSecurityProfile{
		ModelVersion:   1,
		Annotations:    map[string][]string{},
		AssociatedTags: []string{},
		NormalizedTags: []string{},
	}
}

// Identity returns the Identity of the object.
func (o *FirewallSecurityProfile) Identity() elemental.Identity {

	return FirewallSecurityProfileIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallSecurityProfile) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallSecurityProfile) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallSecurityProfile) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallSecurityProfile{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.IPSEnabled = o.IPSEnabled
	s.URLCategoriesEnabled = o.URLCategoriesEnabled
	s.Annotations = o.Annotations
	s.AntiSpywareEnabled = o.AntiSpywareEnabled
	s.AntiVirusEnabled = o.AntiVirusEnabled
	s.AssociatedTags = o.AssociatedTags
	s.CreateIdempotencyKey = o.CreateIdempotencyKey
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.FileBlockingEnabled = o.FileBlockingEnabled
	s.LastCommittedTime = o.LastCommittedTime
	s.LastUpdatedTime = o.LastUpdatedTime
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.NormalizedTags = o.NormalizedTags
	s.Protected = o.Protected
	s.TrustedCertificateID = o.TrustedCertificateID
	s.UntrustedCertificateID = o.UntrustedCertificateID
	s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallSecurityProfile) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallSecurityProfile{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.IPSEnabled = s.IPSEnabled
	o.URLCategoriesEnabled = s.URLCategoriesEnabled
	o.Annotations = s.Annotations
	o.AntiSpywareEnabled = s.AntiSpywareEnabled
	o.AntiVirusEnabled = s.AntiVirusEnabled
	o.AssociatedTags = s.AssociatedTags
	o.CreateIdempotencyKey = s.CreateIdempotencyKey
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.FileBlockingEnabled = s.FileBlockingEnabled
	o.LastCommittedTime = s.LastCommittedTime
	o.LastUpdatedTime = s.LastUpdatedTime
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.NormalizedTags = s.NormalizedTags
	o.Protected = s.Protected
	o.TrustedCertificateID = s.TrustedCertificateID
	o.UntrustedCertificateID = s.UntrustedCertificateID
	o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallSecurityProfile) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallSecurityProfile) BleveType() string {

	return "firewallsecurityprofile"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallSecurityProfile) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *FirewallSecurityProfile) Doc() string {

	return `Represents firewall security setting.  
This object can be created by the user and referenced by a Group object.`
}

func (o *FirewallSecurityProfile) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetAnnotations returns the Annotations of the receiver.
func (o *FirewallSecurityProfile) GetAnnotations() map[string][]string {

	return o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the given value.
func (o *FirewallSecurityProfile) SetAnnotations(annotations map[string][]string) {

	o.Annotations = annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *FirewallSecurityProfile) GetAssociatedTags() []string {

	return o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the given value.
func (o *FirewallSecurityProfile) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *FirewallSecurityProfile) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *FirewallSecurityProfile) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetDescription returns the Description of the receiver.
func (o *FirewallSecurityProfile) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *FirewallSecurityProfile) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *FirewallSecurityProfile) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *FirewallSecurityProfile) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallSecurityProfile) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallSecurityProfile) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *FirewallSecurityProfile) GetNormalizedTags() []string {

	return o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the given value.
func (o *FirewallSecurityProfile) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *FirewallSecurityProfile) GetProtected() bool {

	return o.Protected
}

// SetProtected sets the property Protected of the receiver using the given value.
func (o *FirewallSecurityProfile) SetProtected(protected bool) {

	o.Protected = protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *FirewallSecurityProfile) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *FirewallSecurityProfile) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallSecurityProfile) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallSecurityProfile{
			ID:                     &o.ID,
			IPSEnabled:             &o.IPSEnabled,
			URLCategoriesEnabled:   &o.URLCategoriesEnabled,
			Annotations:            &o.Annotations,
			AntiSpywareEnabled:     &o.AntiSpywareEnabled,
			AntiVirusEnabled:       &o.AntiVirusEnabled,
			AssociatedTags:         &o.AssociatedTags,
			CreateIdempotencyKey:   &o.CreateIdempotencyKey,
			CreateTime:             &o.CreateTime,
			Description:            &o.Description,
			FileBlockingEnabled:    &o.FileBlockingEnabled,
			LastCommittedTime:      &o.LastCommittedTime,
			LastUpdatedTime:        &o.LastUpdatedTime,
			Name:                   &o.Name,
			Namespace:              &o.Namespace,
			NormalizedTags:         &o.NormalizedTags,
			Protected:              &o.Protected,
			TrustedCertificateID:   &o.TrustedCertificateID,
			UntrustedCertificateID: &o.UntrustedCertificateID,
			UpdateIdempotencyKey:   &o.UpdateIdempotencyKey,
			UpdateTime:             &o.UpdateTime,
			ZHash:                  &o.ZHash,
			Zone:                   &o.Zone,
		}
	}

	sp := &SparseFirewallSecurityProfile{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "IPSEnabled":
			sp.IPSEnabled = &(o.IPSEnabled)
		case "URLCategoriesEnabled":
			sp.URLCategoriesEnabled = &(o.URLCategoriesEnabled)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "antiSpywareEnabled":
			sp.AntiSpywareEnabled = &(o.AntiSpywareEnabled)
		case "antiVirusEnabled":
			sp.AntiVirusEnabled = &(o.AntiVirusEnabled)
		case "associatedTags":
			sp.AssociatedTags = &(o.AssociatedTags)
		case "createIdempotencyKey":
			sp.CreateIdempotencyKey = &(o.CreateIdempotencyKey)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "fileBlockingEnabled":
			sp.FileBlockingEnabled = &(o.FileBlockingEnabled)
		case "lastCommittedTime":
			sp.LastCommittedTime = &(o.LastCommittedTime)
		case "lastUpdatedTime":
			sp.LastUpdatedTime = &(o.LastUpdatedTime)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "normalizedTags":
			sp.NormalizedTags = &(o.NormalizedTags)
		case "protected":
			sp.Protected = &(o.Protected)
		case "trustedCertificateID":
			sp.TrustedCertificateID = &(o.TrustedCertificateID)
		case "untrustedCertificateID":
			sp.UntrustedCertificateID = &(o.UntrustedCertificateID)
		case "updateIdempotencyKey":
			sp.UpdateIdempotencyKey = &(o.UpdateIdempotencyKey)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallSecurityProfile to the object.
func (o *FirewallSecurityProfile) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallSecurityProfile)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.IPSEnabled != nil {
		o.IPSEnabled = *so.IPSEnabled
	}
	if so.URLCategoriesEnabled != nil {
		o.URLCategoriesEnabled = *so.URLCategoriesEnabled
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.AntiSpywareEnabled != nil {
		o.AntiSpywareEnabled = *so.AntiSpywareEnabled
	}
	if so.AntiVirusEnabled != nil {
		o.AntiVirusEnabled = *so.AntiVirusEnabled
	}
	if so.AssociatedTags != nil {
		o.AssociatedTags = *so.AssociatedTags
	}
	if so.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = *so.CreateIdempotencyKey
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.FileBlockingEnabled != nil {
		o.FileBlockingEnabled = *so.FileBlockingEnabled
	}
	if so.LastCommittedTime != nil {
		o.LastCommittedTime = *so.LastCommittedTime
	}
	if so.LastUpdatedTime != nil {
		o.LastUpdatedTime = *so.LastUpdatedTime
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NormalizedTags != nil {
		o.NormalizedTags = *so.NormalizedTags
	}
	if so.Protected != nil {
		o.Protected = *so.Protected
	}
	if so.TrustedCertificateID != nil {
		o.TrustedCertificateID = *so.TrustedCertificateID
	}
	if so.UntrustedCertificateID != nil {
		o.UntrustedCertificateID = *so.UntrustedCertificateID
	}
	if so.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = *so.UpdateIdempotencyKey
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the FirewallSecurityProfile.
func (o *FirewallSecurityProfile) DeepCopy() *FirewallSecurityProfile {

	if o == nil {
		return nil
	}

	out := &FirewallSecurityProfile{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallSecurityProfile.
func (o *FirewallSecurityProfile) DeepCopyInto(out *FirewallSecurityProfile) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallSecurityProfile: %s", err))
	}

	*out = *target.(*FirewallSecurityProfile)
}

// Validate valides the current information stored into the structure.
func (o *FirewallSecurityProfile) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateTagsWithoutReservedPrefixes("associatedTags", o.AssociatedTags); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallSecurityProfile) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallSecurityProfileAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallSecurityProfileLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallSecurityProfile) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallSecurityProfileAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallSecurityProfile) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "IPSEnabled":
		return o.IPSEnabled
	case "URLCategoriesEnabled":
		return o.URLCategoriesEnabled
	case "annotations":
		return o.Annotations
	case "antiSpywareEnabled":
		return o.AntiSpywareEnabled
	case "antiVirusEnabled":
		return o.AntiVirusEnabled
	case "associatedTags":
		return o.AssociatedTags
	case "createIdempotencyKey":
		return o.CreateIdempotencyKey
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "fileBlockingEnabled":
		return o.FileBlockingEnabled
	case "lastCommittedTime":
		return o.LastCommittedTime
	case "lastUpdatedTime":
		return o.LastUpdatedTime
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "normalizedTags":
		return o.NormalizedTags
	case "protected":
		return o.Protected
	case "trustedCertificateID":
		return o.TrustedCertificateID
	case "untrustedCertificateID":
		return o.UntrustedCertificateID
	case "updateIdempotencyKey":
		return o.UpdateIdempotencyKey
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// FirewallSecurityProfileAttributesMap represents the map of attribute for FirewallSecurityProfile.
var FirewallSecurityProfileAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"IPSEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "ipsenabled",
		ConvertedName:  "IPSEnabled",
		Description:    `Enables IPS.`,
		Exposed:        true,
		Name:           "IPSEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"URLCategoriesEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "urlcategoriesenabled",
		ConvertedName:  "URLCategoriesEnabled",
		Description:    `Enables best practice URL Categories.`,
		Exposed:        true,
		Name:           "URLCategoriesEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"AntiSpywareEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "antispywareenabled",
		ConvertedName:  "AntiSpywareEnabled",
		Description:    `Enables AntiSpyware.`,
		Exposed:        true,
		Name:           "antiSpywareEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"AntiVirusEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "antivirusenabled",
		ConvertedName:  "AntiVirusEnabled",
		Description:    `Enables AntiVirus.`,
		Exposed:        true,
		Name:           "antiVirusEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"AssociatedTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"FileBlockingEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "fileblockingenabled",
		ConvertedName:  "FileBlockingEnabled",
		Description:    `Enables file blocking.`,
		Exposed:        true,
		Name:           "fileBlockingEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"LastCommittedTime": {
		AllowedChoices: []string{},
		BSONFieldName:  "lastcommittedtime",
		ConvertedName:  "LastCommittedTime",
		Description:    `The date when the security profile was last committed.`,
		Exposed:        true,
		Name:           "lastCommittedTime",
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"LastUpdatedTime": {
		AllowedChoices: []string{},
		BSONFieldName:  "lastupdatedtime",
		ConvertedName:  "LastUpdatedTime",
		Description:    `The date when the security profile was last updated.`,
		Exposed:        true,
		Name:           "lastUpdatedTime",
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NormalizedTags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"Protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"TrustedCertificateID": {
		AllowedChoices: []string{},
		BSONFieldName:  "trustedcertificateid",
		ConvertedName:  "TrustedCertificateID",
		Description:    `The trusted Certificate ID for Outbound Decryption.`,
		Exposed:        true,
		Name:           "trustedCertificateID",
		Stored:         true,
		Type:           "string",
	},
	"UntrustedCertificateID": {
		AllowedChoices: []string{},
		BSONFieldName:  "untrustedcertificateid",
		ConvertedName:  "UntrustedCertificateID",
		Description:    `The untrusted Certificate ID for Outbound Decryption.`,
		Exposed:        true,
		Name:           "untrustedCertificateID",
		Stored:         true,
		Type:           "string",
	},

	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// FirewallSecurityProfileLowerCaseAttributesMap represents the map of attribute for FirewallSecurityProfile.
var FirewallSecurityProfileLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ipsenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "ipsenabled",
		ConvertedName:  "IPSEnabled",
		Description:    `Enables IPS.`,
		Exposed:        true,
		Name:           "IPSEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"urlcategoriesenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "urlcategoriesenabled",
		ConvertedName:  "URLCategoriesEnabled",
		Description:    `Enables best practice URL Categories.`,
		Exposed:        true,
		Name:           "URLCategoriesEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"antispywareenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "antispywareenabled",
		ConvertedName:  "AntiSpywareEnabled",
		Description:    `Enables AntiSpyware.`,
		Exposed:        true,
		Name:           "antiSpywareEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"antivirusenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "antivirusenabled",
		ConvertedName:  "AntiVirusEnabled",
		Description:    `Enables AntiVirus.`,
		Exposed:        true,
		Name:           "antiVirusEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"associatedtags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"fileblockingenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "fileblockingenabled",
		ConvertedName:  "FileBlockingEnabled",
		Description:    `Enables file blocking.`,
		Exposed:        true,
		Name:           "fileBlockingEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"lastcommittedtime": {
		AllowedChoices: []string{},
		BSONFieldName:  "lastcommittedtime",
		ConvertedName:  "LastCommittedTime",
		Description:    `The date when the security profile was last committed.`,
		Exposed:        true,
		Name:           "lastCommittedTime",
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"lastupdatedtime": {
		AllowedChoices: []string{},
		BSONFieldName:  "lastupdatedtime",
		ConvertedName:  "LastUpdatedTime",
		Description:    `The date when the security profile was last updated.`,
		Exposed:        true,
		Name:           "lastUpdatedTime",
		ReadOnly:       true,
		Stored:         true,
		Type:           "time",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"normalizedtags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"trustedcertificateid": {
		AllowedChoices: []string{},
		BSONFieldName:  "trustedcertificateid",
		ConvertedName:  "TrustedCertificateID",
		Description:    `The trusted Certificate ID for Outbound Decryption.`,
		Exposed:        true,
		Name:           "trustedCertificateID",
		Stored:         true,
		Type:           "string",
	},
	"untrustedcertificateid": {
		AllowedChoices: []string{},
		BSONFieldName:  "untrustedcertificateid",
		ConvertedName:  "UntrustedCertificateID",
		Description:    `The untrusted Certificate ID for Outbound Decryption.`,
		Exposed:        true,
		Name:           "untrustedCertificateID",
		Stored:         true,
		Type:           "string",
	},

	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseFirewallSecurityProfilesList represents a list of SparseFirewallSecurityProfiles
type SparseFirewallSecurityProfilesList []*SparseFirewallSecurityProfile

// Identity returns the identity of the objects in the list.
func (o SparseFirewallSecurityProfilesList) Identity() elemental.Identity {

	return FirewallSecurityProfileIdentity
}

// Copy returns a pointer to a copy the SparseFirewallSecurityProfilesList.
func (o SparseFirewallSecurityProfilesList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallSecurityProfilesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallSecurityProfilesList.
func (o SparseFirewallSecurityProfilesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallSecurityProfilesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallSecurityProfile))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallSecurityProfilesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallSecurityProfilesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparseFirewallSecurityProfilesList converted to FirewallSecurityProfilesList.
func (o SparseFirewallSecurityProfilesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallSecurityProfilesList) Version() int {

	return 1
}

// SparseFirewallSecurityProfile represents the sparse version of a firewallsecurityprofile.
type SparseFirewallSecurityProfile struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Enables IPS.
	IPSEnabled *bool `json:"IPSEnabled,omitempty" msgpack:"IPSEnabled,omitempty" bson:"ipsenabled,omitempty" mapstructure:"IPSEnabled,omitempty"`

	// Enables best practice URL Categories.
	URLCategoriesEnabled *bool `json:"URLCategoriesEnabled,omitempty" msgpack:"URLCategoriesEnabled,omitempty" bson:"urlcategoriesenabled,omitempty" mapstructure:"URLCategoriesEnabled,omitempty"`

	// Stores additional information about an entity.
	Annotations *map[string][]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Enables AntiSpyware.
	AntiSpywareEnabled *bool `json:"antiSpywareEnabled,omitempty" msgpack:"antiSpywareEnabled,omitempty" bson:"antispywareenabled,omitempty" mapstructure:"antiSpywareEnabled,omitempty"`

	// Enables AntiVirus.
	AntiVirusEnabled *bool `json:"antiVirusEnabled,omitempty" msgpack:"antiVirusEnabled,omitempty" bson:"antivirusenabled,omitempty" mapstructure:"antiVirusEnabled,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags *[]string `json:"associatedTags,omitempty" msgpack:"associatedTags,omitempty" bson:"associatedtags,omitempty" mapstructure:"associatedTags,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey *string `json:"-" msgpack:"-" bson:"createidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Enables file blocking.
	FileBlockingEnabled *bool `json:"fileBlockingEnabled,omitempty" msgpack:"fileBlockingEnabled,omitempty" bson:"fileblockingenabled,omitempty" mapstructure:"fileBlockingEnabled,omitempty"`

	// The date when the security profile was last committed.
	LastCommittedTime *time.Time `json:"lastCommittedTime,omitempty" msgpack:"lastCommittedTime,omitempty" bson:"lastcommittedtime,omitempty" mapstructure:"lastCommittedTime,omitempty"`

	// The date when the security profile was last updated.
	LastUpdatedTime *time.Time `json:"lastUpdatedTime,omitempty" msgpack:"lastUpdatedTime,omitempty" bson:"lastupdatedtime,omitempty" mapstructure:"lastUpdatedTime,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags *[]string `json:"normalizedTags,omitempty" msgpack:"normalizedTags,omitempty" bson:"normalizedtags,omitempty" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected *bool `json:"protected,omitempty" msgpack:"protected,omitempty" bson:"protected,omitempty" mapstructure:"protected,omitempty"`

	// The trusted Certificate ID for Outbound Decryption.
	TrustedCertificateID *string `json:"trustedCertificateID,omitempty" msgpack:"trustedCertificateID,omitempty" bson:"trustedcertificateid,omitempty" mapstructure:"trustedCertificateID,omitempty"`

	// The untrusted Certificate ID for Outbound Decryption.
	UntrustedCertificateID *string `json:"untrustedCertificateID,omitempty" msgpack:"untrustedCertificateID,omitempty" bson:"untrustedcertificateid,omitempty" mapstructure:"untrustedCertificateID,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey *string `json:"-" msgpack:"-" bson:"updateidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallSecurityProfile returns a new  SparseFirewallSecurityProfile.
func NewSparseFirewallSecurityProfile() *SparseFirewallSecurityProfile {
	return &SparseFirewallSecurityProfile{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallSecurityProfile) Identity() elemental.Identity {

	return FirewallSecurityProfileIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallSecurityProfile) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallSecurityProfile) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallSecurityProfile) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallSecurityProfile{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.IPSEnabled != nil {
		s.IPSEnabled = o.IPSEnabled
	}
	if o.URLCategoriesEnabled != nil {
		s.URLCategoriesEnabled = o.URLCategoriesEnabled
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.AntiSpywareEnabled != nil {
		s.AntiSpywareEnabled = o.AntiSpywareEnabled
	}
	if o.AntiVirusEnabled != nil {
		s.AntiVirusEnabled = o.AntiVirusEnabled
	}
	if o.AssociatedTags != nil {
		s.AssociatedTags = o.AssociatedTags
	}
	if o.CreateIdempotencyKey != nil {
		s.CreateIdempotencyKey = o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.FileBlockingEnabled != nil {
		s.FileBlockingEnabled = o.FileBlockingEnabled
	}
	if o.LastCommittedTime != nil {
		s.LastCommittedTime = o.LastCommittedTime
	}
	if o.LastUpdatedTime != nil {
		s.LastUpdatedTime = o.LastUpdatedTime
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NormalizedTags != nil {
		s.NormalizedTags = o.NormalizedTags
	}
	if o.Protected != nil {
		s.Protected = o.Protected
	}
	if o.TrustedCertificateID != nil {
		s.TrustedCertificateID = o.TrustedCertificateID
	}
	if o.UntrustedCertificateID != nil {
		s.UntrustedCertificateID = o.UntrustedCertificateID
	}
	if o.UpdateIdempotencyKey != nil {
		s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallSecurityProfile) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallSecurityProfile{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.IPSEnabled != nil {
		o.IPSEnabled = s.IPSEnabled
	}
	if s.URLCategoriesEnabled != nil {
		o.URLCategoriesEnabled = s.URLCategoriesEnabled
	}
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.AntiSpywareEnabled != nil {
		o.AntiSpywareEnabled = s.AntiSpywareEnabled
	}
	if s.AntiVirusEnabled != nil {
		o.AntiVirusEnabled = s.AntiVirusEnabled
	}
	if s.AssociatedTags != nil {
		o.AssociatedTags = s.AssociatedTags
	}
	if s.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = s.CreateIdempotencyKey
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.FileBlockingEnabled != nil {
		o.FileBlockingEnabled = s.FileBlockingEnabled
	}
	if s.LastCommittedTime != nil {
		o.LastCommittedTime = s.LastCommittedTime
	}
	if s.LastUpdatedTime != nil {
		o.LastUpdatedTime = s.LastUpdatedTime
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NormalizedTags != nil {
		o.NormalizedTags = s.NormalizedTags
	}
	if s.Protected != nil {
		o.Protected = s.Protected
	}
	if s.TrustedCertificateID != nil {
		o.TrustedCertificateID = s.TrustedCertificateID
	}
	if s.UntrustedCertificateID != nil {
		o.UntrustedCertificateID = s.UntrustedCertificateID
	}
	if s.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallSecurityProfile) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallSecurityProfile) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallSecurityProfile()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.IPSEnabled != nil {
		out.IPSEnabled = *o.IPSEnabled
	}
	if o.URLCategoriesEnabled != nil {
		out.URLCategoriesEnabled = *o.URLCategoriesEnabled
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.AntiSpywareEnabled != nil {
		out.AntiSpywareEnabled = *o.AntiSpywareEnabled
	}
	if o.AntiVirusEnabled != nil {
		out.AntiVirusEnabled = *o.AntiVirusEnabled
	}
	if o.AssociatedTags != nil {
		out.AssociatedTags = *o.AssociatedTags
	}
	if o.CreateIdempotencyKey != nil {
		out.CreateIdempotencyKey = *o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.FileBlockingEnabled != nil {
		out.FileBlockingEnabled = *o.FileBlockingEnabled
	}
	if o.LastCommittedTime != nil {
		out.LastCommittedTime = *o.LastCommittedTime
	}
	if o.LastUpdatedTime != nil {
		out.LastUpdatedTime = *o.LastUpdatedTime
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NormalizedTags != nil {
		out.NormalizedTags = *o.NormalizedTags
	}
	if o.Protected != nil {
		out.Protected = *o.Protected
	}
	if o.TrustedCertificateID != nil {
		out.TrustedCertificateID = *o.TrustedCertificateID
	}
	if o.UntrustedCertificateID != nil {
		out.UntrustedCertificateID = *o.UntrustedCertificateID
	}
	if o.UpdateIdempotencyKey != nil {
		out.UpdateIdempotencyKey = *o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetAnnotations returns the Annotations of the receiver.
func (o *SparseFirewallSecurityProfile) GetAnnotations() (out map[string][]string) {

	if o.Annotations == nil {
		return
	}

	return *o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetAnnotations(annotations map[string][]string) {

	o.Annotations = &annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *SparseFirewallSecurityProfile) GetAssociatedTags() (out []string) {

	if o.AssociatedTags == nil {
		return
	}

	return *o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = &associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseFirewallSecurityProfile) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetDescription returns the Description of the receiver.
func (o *SparseFirewallSecurityProfile) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparseFirewallSecurityProfile) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallSecurityProfile) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *SparseFirewallSecurityProfile) GetNormalizedTags() (out []string) {

	if o.NormalizedTags == nil {
		return
	}

	return *o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = &normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *SparseFirewallSecurityProfile) GetProtected() (out bool) {

	if o.Protected == nil {
		return
	}

	return *o.Protected
}

// SetProtected sets the property Protected of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetProtected(protected bool) {

	o.Protected = &protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseFirewallSecurityProfile) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseFirewallSecurityProfile) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseFirewallSecurityProfile.
func (o *SparseFirewallSecurityProfile) DeepCopy() *SparseFirewallSecurityProfile {

	if o == nil {
		return nil
	}

	out := &SparseFirewallSecurityProfile{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallSecurityProfile.
func (o *SparseFirewallSecurityProfile) DeepCopyInto(out *SparseFirewallSecurityProfile) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallSecurityProfile: %s", err))
	}

	*out = *target.(*SparseFirewallSecurityProfile)
}

type mongoAttributesFirewallSecurityProfile struct {
	ID                     bson.ObjectId       `bson:"_id,omitempty"`
	IPSEnabled             bool                `bson:"ipsenabled"`
	URLCategoriesEnabled   bool                `bson:"urlcategoriesenabled"`
	Annotations            map[string][]string `bson:"annotations"`
	AntiSpywareEnabled     bool                `bson:"antispywareenabled"`
	AntiVirusEnabled       bool                `bson:"antivirusenabled"`
	AssociatedTags         []string            `bson:"associatedtags"`
	CreateIdempotencyKey   string              `bson:"createidempotencykey"`
	CreateTime             time.Time           `bson:"createtime"`
	Description            string              `bson:"description"`
	FileBlockingEnabled    bool                `bson:"fileblockingenabled"`
	LastCommittedTime      time.Time           `bson:"lastcommittedtime"`
	LastUpdatedTime        time.Time           `bson:"lastupdatedtime"`
	Name                   string              `bson:"name"`
	Namespace              string              `bson:"namespace"`
	NormalizedTags         []string            `bson:"normalizedtags"`
	Protected              bool                `bson:"protected"`
	TrustedCertificateID   string              `bson:"trustedcertificateid"`
	UntrustedCertificateID string              `bson:"untrustedcertificateid"`
	UpdateIdempotencyKey   string              `bson:"updateidempotencykey"`
	UpdateTime             time.Time           `bson:"updatetime"`
	ZHash                  int                 `bson:"zhash"`
	Zone                   int                 `bson:"zone"`
}
type mongoAttributesSparseFirewallSecurityProfile struct {
	ID                     bson.ObjectId        `bson:"_id,omitempty"`
	IPSEnabled             *bool                `bson:"ipsenabled,omitempty"`
	URLCategoriesEnabled   *bool                `bson:"urlcategoriesenabled,omitempty"`
	Annotations            *map[string][]string `bson:"annotations,omitempty"`
	AntiSpywareEnabled     *bool                `bson:"antispywareenabled,omitempty"`
	AntiVirusEnabled       *bool                `bson:"antivirusenabled,omitempty"`
	AssociatedTags         *[]string            `bson:"associatedtags,omitempty"`
	CreateIdempotencyKey   *string              `bson:"createidempotencykey,omitempty"`
	CreateTime             *time.Time           `bson:"createtime,omitempty"`
	Description            *string              `bson:"description,omitempty"`
	FileBlockingEnabled    *bool                `bson:"fileblockingenabled,omitempty"`
	LastCommittedTime      *time.Time           `bson:"lastcommittedtime,omitempty"`
	LastUpdatedTime        *time.Time           `bson:"lastupdatedtime,omitempty"`
	Name                   *string              `bson:"name,omitempty"`
	Namespace              *string              `bson:"namespace,omitempty"`
	NormalizedTags         *[]string            `bson:"normalizedtags,omitempty"`
	Protected              *bool                `bson:"protected,omitempty"`
	TrustedCertificateID   *string              `bson:"trustedcertificateid,omitempty"`
	UntrustedCertificateID *string              `bson:"untrustedcertificateid,omitempty"`
	UpdateIdempotencyKey   *string              `bson:"updateidempotencykey,omitempty"`
	UpdateTime             *time.Time           `bson:"updatetime,omitempty"`
	ZHash                  *int                 `bson:"zhash,omitempty"`
	Zone                   *int                 `bson:"zone,omitempty"`
}
