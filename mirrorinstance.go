// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// MirrorInstance represents the model of a mirrorinstance
type MirrorInstance struct {
	// The instance ID.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMirrorInstance returns a new *MirrorInstance
func NewMirrorInstance() *MirrorInstance {

	return &MirrorInstance{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MirrorInstance) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMirrorInstance{}

	s.Name = o.Name

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MirrorInstance) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesMirrorInstance{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Name = s.Name

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *MirrorInstance) BleveType() string {

	return "mirrorinstance"
}

// GetName returns the Name of the receiver.
func (o *MirrorInstance) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *MirrorInstance) SetName(name string) {

	o.Name = name
}

// DeepCopy returns a deep copy if the MirrorInstance.
func (o *MirrorInstance) DeepCopy() *MirrorInstance {

	if o == nil {
		return nil
	}

	out := &MirrorInstance{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MirrorInstance.
func (o *MirrorInstance) DeepCopyInto(out *MirrorInstance) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MirrorInstance: %s", err))
	}

	*out = *target.(*MirrorInstance)
}

// Validate valides the current information stored into the structure.
func (o *MirrorInstance) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MirrorInstance) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MirrorInstanceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MirrorInstanceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MirrorInstance) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MirrorInstanceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MirrorInstance) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "name":
		return o.Name
	}

	return nil
}

// MirrorInstanceAttributesMap represents the map of attribute for MirrorInstance.
var MirrorInstanceAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "ID",
		Description:    `The instance ID.`,
		Exposed:        true,
		Name:           "ID",
		ReadOnly:       true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// MirrorInstanceLowerCaseAttributesMap represents the map of attribute for MirrorInstance.
var MirrorInstanceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "ID",
		Description:    `The instance ID.`,
		Exposed:        true,
		Name:           "ID",
		ReadOnly:       true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesMirrorInstance struct {
	Name string `bson:"name"`
}
