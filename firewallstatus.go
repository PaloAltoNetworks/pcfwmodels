// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallStatusFirewallTypeValue represents the possible values for attribute "firewallType".
type FirewallStatusFirewallTypeValue string

const (
	// FirewallStatusFirewallTypeAWS represents the value AWS.
	FirewallStatusFirewallTypeAWS FirewallStatusFirewallTypeValue = "AWS"
)

// FirewallStatusStatusValue represents the possible values for attribute "status".
type FirewallStatusStatusValue string

const (
	// FirewallStatusStatusCreating represents the value Creating.
	FirewallStatusStatusCreating FirewallStatusStatusValue = "Creating"

	// FirewallStatusStatusFailed represents the value Failed.
	FirewallStatusStatusFailed FirewallStatusStatusValue = "Failed"

	// FirewallStatusStatusReady represents the value Ready.
	FirewallStatusStatusReady FirewallStatusStatusValue = "Ready"

	// FirewallStatusStatusUpdating represents the value Updating.
	FirewallStatusStatusUpdating FirewallStatusStatusValue = "Updating"
)

// FirewallStatus represents the model of a firewallstatus
type FirewallStatus struct {
	// The firewall ID.
	FirewallID string `json:"firewallID" msgpack:"firewallID" bson:"-" mapstructure:"firewallID,omitempty"`

	// The type of firewall.
	FirewallType FirewallStatusFirewallTypeValue `json:"firewallType" msgpack:"firewallType" bson:"-" mapstructure:"firewallType,omitempty"`

	// The status of the of firewall.
	Status FirewallStatusStatusValue `json:"status" msgpack:"status" bson:"-" mapstructure:"status,omitempty"`

	// The status description of the firewall.
	StatusReason string `json:"statusReason" msgpack:"statusReason" bson:"-" mapstructure:"statusReason,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallStatus returns a new *FirewallStatus
func NewFirewallStatus() *FirewallStatus {

	return &FirewallStatus{
		ModelVersion: 1,
		FirewallType: FirewallStatusFirewallTypeAWS,
		Status:       FirewallStatusStatusCreating,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallStatus) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallStatus{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallStatus) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallStatus{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallStatus) BleveType() string {

	return "firewallstatus"
}

// DeepCopy returns a deep copy if the FirewallStatus.
func (o *FirewallStatus) DeepCopy() *FirewallStatus {

	if o == nil {
		return nil
	}

	out := &FirewallStatus{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallStatus.
func (o *FirewallStatus) DeepCopyInto(out *FirewallStatus) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallStatus: %s", err))
	}

	*out = *target.(*FirewallStatus)
}

// Validate valides the current information stored into the structure.
func (o *FirewallStatus) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("firewallType", string(o.FirewallType), []string{"AWS"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Creating", "Updating", "Ready", "Failed"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallStatus) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallStatusAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallStatusLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallStatus) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallStatusAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallStatus) ValueForAttribute(name string) any {

	switch name {
	case "firewallID":
		return o.FirewallID
	case "firewallType":
		return o.FirewallType
	case "status":
		return o.Status
	case "statusReason":
		return o.StatusReason
	}

	return nil
}

// FirewallStatusAttributesMap represents the map of attribute for FirewallStatus.
var FirewallStatusAttributesMap = map[string]elemental.AttributeSpecification{
	"FirewallID": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallID",
		Description:    `The firewall ID.`,
		Exposed:        true,
		Name:           "firewallID",
		Type:           "string",
	},
	"FirewallType": {
		AllowedChoices: []string{"AWS"},
		ConvertedName:  "FirewallType",
		DefaultValue:   FirewallStatusFirewallTypeAWS,
		Description:    `The type of firewall.`,
		Exposed:        true,
		Name:           "firewallType",
		Type:           "enum",
	},
	"Status": {
		AllowedChoices: []string{"Creating", "Updating", "Ready", "Failed"},
		ConvertedName:  "Status",
		DefaultValue:   FirewallStatusStatusCreating,
		Description:    `The status of the of firewall.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Type:           "enum",
	},
	"StatusReason": {
		AllowedChoices: []string{},
		ConvertedName:  "StatusReason",
		Description:    `The status description of the firewall.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Type:           "string",
	},
}

// FirewallStatusLowerCaseAttributesMap represents the map of attribute for FirewallStatus.
var FirewallStatusLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"firewallid": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallID",
		Description:    `The firewall ID.`,
		Exposed:        true,
		Name:           "firewallID",
		Type:           "string",
	},
	"firewalltype": {
		AllowedChoices: []string{"AWS"},
		ConvertedName:  "FirewallType",
		DefaultValue:   FirewallStatusFirewallTypeAWS,
		Description:    `The type of firewall.`,
		Exposed:        true,
		Name:           "firewallType",
		Type:           "enum",
	},
	"status": {
		AllowedChoices: []string{"Creating", "Updating", "Ready", "Failed"},
		ConvertedName:  "Status",
		DefaultValue:   FirewallStatusStatusCreating,
		Description:    `The status of the of firewall.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Type:           "enum",
	},
	"statusreason": {
		AllowedChoices: []string{},
		ConvertedName:  "StatusReason",
		Description:    `The status description of the firewall.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Type:           "string",
	},
}

type mongoAttributesFirewallStatus struct {
}
