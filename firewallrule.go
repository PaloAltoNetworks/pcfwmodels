// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallRuleTLSDecryptionValue represents the possible values for attribute "TLSDecryption".
type FirewallRuleTLSDecryptionValue string

const (
	// FirewallRuleTLSDecryptionInbound represents the value Inbound.
	FirewallRuleTLSDecryptionInbound FirewallRuleTLSDecryptionValue = "Inbound"

	// FirewallRuleTLSDecryptionNone represents the value None.
	FirewallRuleTLSDecryptionNone FirewallRuleTLSDecryptionValue = "None"

	// FirewallRuleTLSDecryptionOutbound represents the value Outbound.
	FirewallRuleTLSDecryptionOutbound FirewallRuleTLSDecryptionValue = "Outbound"
)

// FirewallRuleActionValue represents the possible values for attribute "action".
type FirewallRuleActionValue string

const (
	// FirewallRuleActionAllow represents the value Allow.
	FirewallRuleActionAllow FirewallRuleActionValue = "Allow"

	// FirewallRuleActionDeny represents the value Deny.
	FirewallRuleActionDeny FirewallRuleActionValue = "Deny"

	// FirewallRuleActionResetBoth represents the value ResetBoth.
	FirewallRuleActionResetBoth FirewallRuleActionValue = "ResetBoth"

	// FirewallRuleActionResetServer represents the value ResetServer.
	FirewallRuleActionResetServer FirewallRuleActionValue = "ResetServer"
)

// FirewallRuleIdentity represents the Identity of the object.
var FirewallRuleIdentity = elemental.Identity{
	Name:     "firewallrule",
	Category: "firewallrules",
	Package:  "ngfw",
	Private:  false,
}

// FirewallRulesList represents a list of FirewallRules
type FirewallRulesList []*FirewallRule

// Identity returns the identity of the objects in the list.
func (o FirewallRulesList) Identity() elemental.Identity {

	return FirewallRuleIdentity
}

// Copy returns a pointer to a copy the FirewallRulesList.
func (o FirewallRulesList) Copy() elemental.Identifiables {

	out := append(FirewallRulesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the FirewallRulesList.
func (o FirewallRulesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallRulesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallRule))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallRulesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallRulesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the FirewallRulesList converted to SparseFirewallRulesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallRulesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallRulesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallRule)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallRulesList) Version() int {

	return 1
}

// FirewallRule represents the model of a firewallrule
type FirewallRule struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// TLS Decryption.
	TLSDecryption FirewallRuleTLSDecryptionValue `json:"TLSDecryption" msgpack:"TLSDecryption" bson:"tlsdecryption" mapstructure:"TLSDecryption,omitempty"`

	// The Certificate ID used for TLS Decryption.
	TLSDecryptionCertificateID string `json:"TLSDecryptionCertificateID" msgpack:"TLSDecryptionCertificateID" bson:"tlsdecryptioncertificateid" mapstructure:"TLSDecryptionCertificateID,omitempty"`

	// URL Categories. Any if nil.
	URLCategories *FirewallURLCategoryCriteria `json:"URLCategories" msgpack:"URLCategories" bson:"urlcategories" mapstructure:"URLCategories,omitempty"`

	// The action the firewall should take.
	Action FirewallRuleActionValue `json:"action" msgpack:"action" bson:"action" mapstructure:"action,omitempty"`

	// Stores additional information about an entity.
	Annotations map[string][]string `json:"annotations" msgpack:"annotations" bson:"annotations" mapstructure:"annotations,omitempty"`

	// Application matching criteria. Any if nil.
	Applications *FirewallApplicationCriteria `json:"applications" msgpack:"applications" bson:"applications" mapstructure:"applications,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags []string `json:"associatedTags" msgpack:"associatedTags" bson:"associatedtags" mapstructure:"associatedTags,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey string `json:"-" msgpack:"-" bson:"createidempotencykey" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Destination matching criteria. Any if nil.
	Destination *FirewallTargetCriteria `json:"destination" msgpack:"destination" bson:"destination" mapstructure:"destination,omitempty"`

	// Log this rule when hit.
	Logging bool `json:"logging" msgpack:"logging" bson:"logging" mapstructure:"logging,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags []string `json:"normalizedTags" msgpack:"normalizedTags" bson:"normalizedtags" mapstructure:"normalizedTags,omitempty"`

	// The FirewallTemplate ID, FirewallRuleset ID, or FirewallCommittedRuleset ID
	// to which the rule belongs.
	ParentID string `json:"parentID" msgpack:"parentID" bson:"parentid" mapstructure:"parentID,omitempty"`

	// The type of parent ID to which the rule belongs.
	ParentType string `json:"parentType" msgpack:"parentType" bson:"parenttype" mapstructure:"parentType,omitempty"`

	// Values 1-100 for a Templates and 101+ for a Ruleset.
	Priority int `json:"priority" msgpack:"priority" bson:"priority" mapstructure:"priority,omitempty"`

	// Defines if the object is protected.
	Protected bool `json:"protected" msgpack:"protected" bson:"protected" mapstructure:"protected,omitempty"`

	// Protocols and Ports. Any if nil.
	Protoports *FirewallProtoPortsCriteria `json:"protoports" msgpack:"protoports" bson:"protoports" mapstructure:"protoports,omitempty"`

	// Source matching criteria. Any if nil.
	Source *FirewallTargetCriteria `json:"source" msgpack:"source" bson:"source" mapstructure:"source,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey string `json:"-" msgpack:"-" bson:"updateidempotencykey" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallRule returns a new *FirewallRule
func NewFirewallRule() *FirewallRule {

	return &FirewallRule{
		ModelVersion:   1,
		TLSDecryption:  FirewallRuleTLSDecryptionNone,
		URLCategories:  NewFirewallURLCategoryCriteria(),
		Action:         FirewallRuleActionDeny,
		Annotations:    map[string][]string{},
		Applications:   NewFirewallApplicationCriteria(),
		AssociatedTags: []string{},
		Destination:    NewFirewallTargetCriteria(),
		NormalizedTags: []string{},
		Protoports:     NewFirewallProtoPortsCriteria(),
		Source:         NewFirewallTargetCriteria(),
	}
}

// Identity returns the Identity of the object.
func (o *FirewallRule) Identity() elemental.Identity {

	return FirewallRuleIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallRule) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallRule) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallRule) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallRule{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.TLSDecryption = o.TLSDecryption
	s.TLSDecryptionCertificateID = o.TLSDecryptionCertificateID
	s.URLCategories = o.URLCategories
	s.Action = o.Action
	s.Annotations = o.Annotations
	s.Applications = o.Applications
	s.AssociatedTags = o.AssociatedTags
	s.CreateIdempotencyKey = o.CreateIdempotencyKey
	s.CreateTime = o.CreateTime
	s.Destination = o.Destination
	s.Logging = o.Logging
	s.Namespace = o.Namespace
	s.NormalizedTags = o.NormalizedTags
	s.ParentID = o.ParentID
	s.ParentType = o.ParentType
	s.Priority = o.Priority
	s.Protected = o.Protected
	s.Protoports = o.Protoports
	s.Source = o.Source
	s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallRule) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallRule{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.TLSDecryption = s.TLSDecryption
	o.TLSDecryptionCertificateID = s.TLSDecryptionCertificateID
	o.URLCategories = s.URLCategories
	o.Action = s.Action
	o.Annotations = s.Annotations
	o.Applications = s.Applications
	o.AssociatedTags = s.AssociatedTags
	o.CreateIdempotencyKey = s.CreateIdempotencyKey
	o.CreateTime = s.CreateTime
	o.Destination = s.Destination
	o.Logging = s.Logging
	o.Namespace = s.Namespace
	o.NormalizedTags = s.NormalizedTags
	o.ParentID = s.ParentID
	o.ParentType = s.ParentType
	o.Priority = s.Priority
	o.Protected = s.Protected
	o.Protoports = s.Protoports
	o.Source = s.Source
	o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallRule) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallRule) BleveType() string {

	return "firewallrule"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallRule) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *FirewallRule) Doc() string {

	return `Represents a firewall rule.`
}

func (o *FirewallRule) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetAnnotations returns the Annotations of the receiver.
func (o *FirewallRule) GetAnnotations() map[string][]string {

	return o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the given value.
func (o *FirewallRule) SetAnnotations(annotations map[string][]string) {

	o.Annotations = annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *FirewallRule) GetAssociatedTags() []string {

	return o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the given value.
func (o *FirewallRule) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *FirewallRule) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *FirewallRule) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallRule) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallRule) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *FirewallRule) GetNormalizedTags() []string {

	return o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the given value.
func (o *FirewallRule) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *FirewallRule) GetProtected() bool {

	return o.Protected
}

// SetProtected sets the property Protected of the receiver using the given value.
func (o *FirewallRule) SetProtected(protected bool) {

	o.Protected = protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *FirewallRule) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *FirewallRule) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallRule) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallRule{
			ID:                         &o.ID,
			TLSDecryption:              &o.TLSDecryption,
			TLSDecryptionCertificateID: &o.TLSDecryptionCertificateID,
			URLCategories:              o.URLCategories,
			Action:                     &o.Action,
			Annotations:                &o.Annotations,
			Applications:               o.Applications,
			AssociatedTags:             &o.AssociatedTags,
			CreateIdempotencyKey:       &o.CreateIdempotencyKey,
			CreateTime:                 &o.CreateTime,
			Destination:                o.Destination,
			Logging:                    &o.Logging,
			Namespace:                  &o.Namespace,
			NormalizedTags:             &o.NormalizedTags,
			ParentID:                   &o.ParentID,
			ParentType:                 &o.ParentType,
			Priority:                   &o.Priority,
			Protected:                  &o.Protected,
			Protoports:                 o.Protoports,
			Source:                     o.Source,
			UpdateIdempotencyKey:       &o.UpdateIdempotencyKey,
			UpdateTime:                 &o.UpdateTime,
			ZHash:                      &o.ZHash,
			Zone:                       &o.Zone,
		}
	}

	sp := &SparseFirewallRule{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "TLSDecryption":
			sp.TLSDecryption = &(o.TLSDecryption)
		case "TLSDecryptionCertificateID":
			sp.TLSDecryptionCertificateID = &(o.TLSDecryptionCertificateID)
		case "URLCategories":
			sp.URLCategories = o.URLCategories
		case "action":
			sp.Action = &(o.Action)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "applications":
			sp.Applications = o.Applications
		case "associatedTags":
			sp.AssociatedTags = &(o.AssociatedTags)
		case "createIdempotencyKey":
			sp.CreateIdempotencyKey = &(o.CreateIdempotencyKey)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "destination":
			sp.Destination = o.Destination
		case "logging":
			sp.Logging = &(o.Logging)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "normalizedTags":
			sp.NormalizedTags = &(o.NormalizedTags)
		case "parentID":
			sp.ParentID = &(o.ParentID)
		case "parentType":
			sp.ParentType = &(o.ParentType)
		case "priority":
			sp.Priority = &(o.Priority)
		case "protected":
			sp.Protected = &(o.Protected)
		case "protoports":
			sp.Protoports = o.Protoports
		case "source":
			sp.Source = o.Source
		case "updateIdempotencyKey":
			sp.UpdateIdempotencyKey = &(o.UpdateIdempotencyKey)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallRule to the object.
func (o *FirewallRule) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallRule)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.TLSDecryption != nil {
		o.TLSDecryption = *so.TLSDecryption
	}
	if so.TLSDecryptionCertificateID != nil {
		o.TLSDecryptionCertificateID = *so.TLSDecryptionCertificateID
	}
	if so.URLCategories != nil {
		o.URLCategories = so.URLCategories
	}
	if so.Action != nil {
		o.Action = *so.Action
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.Applications != nil {
		o.Applications = so.Applications
	}
	if so.AssociatedTags != nil {
		o.AssociatedTags = *so.AssociatedTags
	}
	if so.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = *so.CreateIdempotencyKey
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Destination != nil {
		o.Destination = so.Destination
	}
	if so.Logging != nil {
		o.Logging = *so.Logging
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NormalizedTags != nil {
		o.NormalizedTags = *so.NormalizedTags
	}
	if so.ParentID != nil {
		o.ParentID = *so.ParentID
	}
	if so.ParentType != nil {
		o.ParentType = *so.ParentType
	}
	if so.Priority != nil {
		o.Priority = *so.Priority
	}
	if so.Protected != nil {
		o.Protected = *so.Protected
	}
	if so.Protoports != nil {
		o.Protoports = so.Protoports
	}
	if so.Source != nil {
		o.Source = so.Source
	}
	if so.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = *so.UpdateIdempotencyKey
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the FirewallRule.
func (o *FirewallRule) DeepCopy() *FirewallRule {

	if o == nil {
		return nil
	}

	out := &FirewallRule{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallRule.
func (o *FirewallRule) DeepCopyInto(out *FirewallRule) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallRule: %s", err))
	}

	*out = *target.(*FirewallRule)
}

// Validate valides the current information stored into the structure.
func (o *FirewallRule) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("TLSDecryption", string(o.TLSDecryption), []string{"None", "Outbound", "Inbound"}, false); err != nil {
		errors = errors.Append(err)
	}

	if o.URLCategories != nil {
		elemental.ResetDefaultForZeroValues(o.URLCategories)
		if err := o.URLCategories.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateStringInList("action", string(o.Action), []string{"Deny", "Allow", "ResetServer", "ResetBoth"}, false); err != nil {
		errors = errors.Append(err)
	}

	if o.Applications != nil {
		elemental.ResetDefaultForZeroValues(o.Applications)
		if err := o.Applications.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := ValidateTagsWithoutReservedPrefixes("associatedTags", o.AssociatedTags); err != nil {
		errors = errors.Append(err)
	}

	if o.Destination != nil {
		elemental.ResetDefaultForZeroValues(o.Destination)
		if err := o.Destination.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredInt("priority", o.Priority); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMinimumInt("priority", o.Priority, int(1), false); err != nil {
		errors = errors.Append(err)
	}

	if o.Protoports != nil {
		elemental.ResetDefaultForZeroValues(o.Protoports)
		if err := o.Protoports.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if o.Source != nil {
		elemental.ResetDefaultForZeroValues(o.Source)
		if err := o.Source.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallRule) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallRuleAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallRuleLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallRule) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallRuleAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallRule) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "TLSDecryption":
		return o.TLSDecryption
	case "TLSDecryptionCertificateID":
		return o.TLSDecryptionCertificateID
	case "URLCategories":
		return o.URLCategories
	case "action":
		return o.Action
	case "annotations":
		return o.Annotations
	case "applications":
		return o.Applications
	case "associatedTags":
		return o.AssociatedTags
	case "createIdempotencyKey":
		return o.CreateIdempotencyKey
	case "createTime":
		return o.CreateTime
	case "destination":
		return o.Destination
	case "logging":
		return o.Logging
	case "namespace":
		return o.Namespace
	case "normalizedTags":
		return o.NormalizedTags
	case "parentID":
		return o.ParentID
	case "parentType":
		return o.ParentType
	case "priority":
		return o.Priority
	case "protected":
		return o.Protected
	case "protoports":
		return o.Protoports
	case "source":
		return o.Source
	case "updateIdempotencyKey":
		return o.UpdateIdempotencyKey
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// FirewallRuleAttributesMap represents the map of attribute for FirewallRule.
var FirewallRuleAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"TLSDecryption": {
		AllowedChoices: []string{"None", "Outbound", "Inbound"},
		BSONFieldName:  "tlsdecryption",
		ConvertedName:  "TLSDecryption",
		DefaultValue:   FirewallRuleTLSDecryptionNone,
		Description:    `TLS Decryption.`,
		Exposed:        true,
		Name:           "TLSDecryption",
		Stored:         true,
		Type:           "enum",
	},
	"TLSDecryptionCertificateID": {
		AllowedChoices: []string{},
		BSONFieldName:  "tlsdecryptioncertificateid",
		ConvertedName:  "TLSDecryptionCertificateID",
		Description:    `The Certificate ID used for TLS Decryption.`,
		Exposed:        true,
		Name:           "TLSDecryptionCertificateID",
		Stored:         true,
		Type:           "string",
	},
	"URLCategories": {
		AllowedChoices: []string{},
		BSONFieldName:  "urlcategories",
		ConvertedName:  "URLCategories",
		Description:    `URL Categories. Any if nil.`,
		Exposed:        true,
		Name:           "URLCategories",
		Stored:         true,
		SubType:        "firewallurlcategorycriteria",
		Type:           "ref",
	},
	"Action": {
		AllowedChoices: []string{"Deny", "Allow", "ResetServer", "ResetBoth"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		DefaultValue:   FirewallRuleActionDeny,
		Description:    `The action the firewall should take.`,
		Exposed:        true,
		Name:           "action",
		Stored:         true,
		Type:           "enum",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"Applications": {
		AllowedChoices: []string{},
		BSONFieldName:  "applications",
		ConvertedName:  "Applications",
		Description:    `Application matching criteria. Any if nil.`,
		Exposed:        true,
		Name:           "applications",
		Stored:         true,
		SubType:        "firewallapplicationcriteria",
		Type:           "ref",
	},
	"AssociatedTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Destination": {
		AllowedChoices: []string{},
		BSONFieldName:  "destination",
		ConvertedName:  "Destination",
		Description:    `Destination matching criteria. Any if nil.`,
		Exposed:        true,
		Name:           "destination",
		Stored:         true,
		SubType:        "firewalltargetcriteria",
		Type:           "ref",
	},
	"Logging": {
		AllowedChoices: []string{},
		BSONFieldName:  "logging",
		ConvertedName:  "Logging",
		Description:    `Log this rule when hit.`,
		Exposed:        true,
		Name:           "logging",
		Stored:         true,
		Type:           "boolean",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NormalizedTags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"ParentID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "parentid",
		ConvertedName:  "ParentID",
		Description: `The FirewallTemplate ID, FirewallRuleset ID, or FirewallCommittedRuleset ID
to which the rule belongs.`,
		Exposed:  true,
		Name:     "parentID",
		ReadOnly: true,
		Stored:   true,
		Type:     "string",
	},
	"ParentType": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "parenttype",
		ConvertedName:  "ParentType",
		Description:    `The type of parent ID to which the rule belongs.`,
		Exposed:        true,
		Name:           "parentType",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Priority": {
		AllowedChoices: []string{},
		BSONFieldName:  "priority",
		ConvertedName:  "Priority",
		Description:    `Values 1-100 for a Templates and 101+ for a Ruleset.`,
		Exposed:        true,
		MinValue:       1,
		Name:           "priority",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
	"Protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"Protoports": {
		AllowedChoices: []string{},
		BSONFieldName:  "protoports",
		ConvertedName:  "Protoports",
		Description:    `Protocols and Ports. Any if nil.`,
		Exposed:        true,
		Name:           "protoports",
		Stored:         true,
		SubType:        "firewallprotoportscriteria",
		Type:           "ref",
	},
	"Source": {
		AllowedChoices: []string{},
		BSONFieldName:  "source",
		ConvertedName:  "Source",
		Description:    `Source matching criteria. Any if nil.`,
		Exposed:        true,
		Name:           "source",
		Stored:         true,
		SubType:        "firewalltargetcriteria",
		Type:           "ref",
	},

	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// FirewallRuleLowerCaseAttributesMap represents the map of attribute for FirewallRule.
var FirewallRuleLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"tlsdecryption": {
		AllowedChoices: []string{"None", "Outbound", "Inbound"},
		BSONFieldName:  "tlsdecryption",
		ConvertedName:  "TLSDecryption",
		DefaultValue:   FirewallRuleTLSDecryptionNone,
		Description:    `TLS Decryption.`,
		Exposed:        true,
		Name:           "TLSDecryption",
		Stored:         true,
		Type:           "enum",
	},
	"tlsdecryptioncertificateid": {
		AllowedChoices: []string{},
		BSONFieldName:  "tlsdecryptioncertificateid",
		ConvertedName:  "TLSDecryptionCertificateID",
		Description:    `The Certificate ID used for TLS Decryption.`,
		Exposed:        true,
		Name:           "TLSDecryptionCertificateID",
		Stored:         true,
		Type:           "string",
	},
	"urlcategories": {
		AllowedChoices: []string{},
		BSONFieldName:  "urlcategories",
		ConvertedName:  "URLCategories",
		Description:    `URL Categories. Any if nil.`,
		Exposed:        true,
		Name:           "URLCategories",
		Stored:         true,
		SubType:        "firewallurlcategorycriteria",
		Type:           "ref",
	},
	"action": {
		AllowedChoices: []string{"Deny", "Allow", "ResetServer", "ResetBoth"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		DefaultValue:   FirewallRuleActionDeny,
		Description:    `The action the firewall should take.`,
		Exposed:        true,
		Name:           "action",
		Stored:         true,
		Type:           "enum",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"applications": {
		AllowedChoices: []string{},
		BSONFieldName:  "applications",
		ConvertedName:  "Applications",
		Description:    `Application matching criteria. Any if nil.`,
		Exposed:        true,
		Name:           "applications",
		Stored:         true,
		SubType:        "firewallapplicationcriteria",
		Type:           "ref",
	},
	"associatedtags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"destination": {
		AllowedChoices: []string{},
		BSONFieldName:  "destination",
		ConvertedName:  "Destination",
		Description:    `Destination matching criteria. Any if nil.`,
		Exposed:        true,
		Name:           "destination",
		Stored:         true,
		SubType:        "firewalltargetcriteria",
		Type:           "ref",
	},
	"logging": {
		AllowedChoices: []string{},
		BSONFieldName:  "logging",
		ConvertedName:  "Logging",
		Description:    `Log this rule when hit.`,
		Exposed:        true,
		Name:           "logging",
		Stored:         true,
		Type:           "boolean",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"normalizedtags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"parentid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "parentid",
		ConvertedName:  "ParentID",
		Description: `The FirewallTemplate ID, FirewallRuleset ID, or FirewallCommittedRuleset ID
to which the rule belongs.`,
		Exposed:  true,
		Name:     "parentID",
		ReadOnly: true,
		Stored:   true,
		Type:     "string",
	},
	"parenttype": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "parenttype",
		ConvertedName:  "ParentType",
		Description:    `The type of parent ID to which the rule belongs.`,
		Exposed:        true,
		Name:           "parentType",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"priority": {
		AllowedChoices: []string{},
		BSONFieldName:  "priority",
		ConvertedName:  "Priority",
		Description:    `Values 1-100 for a Templates and 101+ for a Ruleset.`,
		Exposed:        true,
		MinValue:       1,
		Name:           "priority",
		Required:       true,
		Stored:         true,
		Type:           "integer",
	},
	"protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"protoports": {
		AllowedChoices: []string{},
		BSONFieldName:  "protoports",
		ConvertedName:  "Protoports",
		Description:    `Protocols and Ports. Any if nil.`,
		Exposed:        true,
		Name:           "protoports",
		Stored:         true,
		SubType:        "firewallprotoportscriteria",
		Type:           "ref",
	},
	"source": {
		AllowedChoices: []string{},
		BSONFieldName:  "source",
		ConvertedName:  "Source",
		Description:    `Source matching criteria. Any if nil.`,
		Exposed:        true,
		Name:           "source",
		Stored:         true,
		SubType:        "firewalltargetcriteria",
		Type:           "ref",
	},

	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseFirewallRulesList represents a list of SparseFirewallRules
type SparseFirewallRulesList []*SparseFirewallRule

// Identity returns the identity of the objects in the list.
func (o SparseFirewallRulesList) Identity() elemental.Identity {

	return FirewallRuleIdentity
}

// Copy returns a pointer to a copy the SparseFirewallRulesList.
func (o SparseFirewallRulesList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallRulesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallRulesList.
func (o SparseFirewallRulesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallRulesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallRule))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallRulesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallRulesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseFirewallRulesList converted to FirewallRulesList.
func (o SparseFirewallRulesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallRulesList) Version() int {

	return 1
}

// SparseFirewallRule represents the sparse version of a firewallrule.
type SparseFirewallRule struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// TLS Decryption.
	TLSDecryption *FirewallRuleTLSDecryptionValue `json:"TLSDecryption,omitempty" msgpack:"TLSDecryption,omitempty" bson:"tlsdecryption,omitempty" mapstructure:"TLSDecryption,omitempty"`

	// The Certificate ID used for TLS Decryption.
	TLSDecryptionCertificateID *string `json:"TLSDecryptionCertificateID,omitempty" msgpack:"TLSDecryptionCertificateID,omitempty" bson:"tlsdecryptioncertificateid,omitempty" mapstructure:"TLSDecryptionCertificateID,omitempty"`

	// URL Categories. Any if nil.
	URLCategories *FirewallURLCategoryCriteria `json:"URLCategories,omitempty" msgpack:"URLCategories,omitempty" bson:"urlcategories,omitempty" mapstructure:"URLCategories,omitempty"`

	// The action the firewall should take.
	Action *FirewallRuleActionValue `json:"action,omitempty" msgpack:"action,omitempty" bson:"action,omitempty" mapstructure:"action,omitempty"`

	// Stores additional information about an entity.
	Annotations *map[string][]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// Application matching criteria. Any if nil.
	Applications *FirewallApplicationCriteria `json:"applications,omitempty" msgpack:"applications,omitempty" bson:"applications,omitempty" mapstructure:"applications,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags *[]string `json:"associatedTags,omitempty" msgpack:"associatedTags,omitempty" bson:"associatedtags,omitempty" mapstructure:"associatedTags,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey *string `json:"-" msgpack:"-" bson:"createidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Destination matching criteria. Any if nil.
	Destination *FirewallTargetCriteria `json:"destination,omitempty" msgpack:"destination,omitempty" bson:"destination,omitempty" mapstructure:"destination,omitempty"`

	// Log this rule when hit.
	Logging *bool `json:"logging,omitempty" msgpack:"logging,omitempty" bson:"logging,omitempty" mapstructure:"logging,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags *[]string `json:"normalizedTags,omitempty" msgpack:"normalizedTags,omitempty" bson:"normalizedtags,omitempty" mapstructure:"normalizedTags,omitempty"`

	// The FirewallTemplate ID, FirewallRuleset ID, or FirewallCommittedRuleset ID
	// to which the rule belongs.
	ParentID *string `json:"parentID,omitempty" msgpack:"parentID,omitempty" bson:"parentid,omitempty" mapstructure:"parentID,omitempty"`

	// The type of parent ID to which the rule belongs.
	ParentType *string `json:"parentType,omitempty" msgpack:"parentType,omitempty" bson:"parenttype,omitempty" mapstructure:"parentType,omitempty"`

	// Values 1-100 for a Templates and 101+ for a Ruleset.
	Priority *int `json:"priority,omitempty" msgpack:"priority,omitempty" bson:"priority,omitempty" mapstructure:"priority,omitempty"`

	// Defines if the object is protected.
	Protected *bool `json:"protected,omitempty" msgpack:"protected,omitempty" bson:"protected,omitempty" mapstructure:"protected,omitempty"`

	// Protocols and Ports. Any if nil.
	Protoports *FirewallProtoPortsCriteria `json:"protoports,omitempty" msgpack:"protoports,omitempty" bson:"protoports,omitempty" mapstructure:"protoports,omitempty"`

	// Source matching criteria. Any if nil.
	Source *FirewallTargetCriteria `json:"source,omitempty" msgpack:"source,omitempty" bson:"source,omitempty" mapstructure:"source,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey *string `json:"-" msgpack:"-" bson:"updateidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallRule returns a new  SparseFirewallRule.
func NewSparseFirewallRule() *SparseFirewallRule {
	return &SparseFirewallRule{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallRule) Identity() elemental.Identity {

	return FirewallRuleIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallRule) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallRule) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallRule) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallRule{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.TLSDecryption != nil {
		s.TLSDecryption = o.TLSDecryption
	}
	if o.TLSDecryptionCertificateID != nil {
		s.TLSDecryptionCertificateID = o.TLSDecryptionCertificateID
	}
	if o.URLCategories != nil {
		s.URLCategories = o.URLCategories
	}
	if o.Action != nil {
		s.Action = o.Action
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.Applications != nil {
		s.Applications = o.Applications
	}
	if o.AssociatedTags != nil {
		s.AssociatedTags = o.AssociatedTags
	}
	if o.CreateIdempotencyKey != nil {
		s.CreateIdempotencyKey = o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Destination != nil {
		s.Destination = o.Destination
	}
	if o.Logging != nil {
		s.Logging = o.Logging
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NormalizedTags != nil {
		s.NormalizedTags = o.NormalizedTags
	}
	if o.ParentID != nil {
		s.ParentID = o.ParentID
	}
	if o.ParentType != nil {
		s.ParentType = o.ParentType
	}
	if o.Priority != nil {
		s.Priority = o.Priority
	}
	if o.Protected != nil {
		s.Protected = o.Protected
	}
	if o.Protoports != nil {
		s.Protoports = o.Protoports
	}
	if o.Source != nil {
		s.Source = o.Source
	}
	if o.UpdateIdempotencyKey != nil {
		s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallRule) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallRule{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.TLSDecryption != nil {
		o.TLSDecryption = s.TLSDecryption
	}
	if s.TLSDecryptionCertificateID != nil {
		o.TLSDecryptionCertificateID = s.TLSDecryptionCertificateID
	}
	if s.URLCategories != nil {
		o.URLCategories = s.URLCategories
	}
	if s.Action != nil {
		o.Action = s.Action
	}
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.Applications != nil {
		o.Applications = s.Applications
	}
	if s.AssociatedTags != nil {
		o.AssociatedTags = s.AssociatedTags
	}
	if s.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = s.CreateIdempotencyKey
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Destination != nil {
		o.Destination = s.Destination
	}
	if s.Logging != nil {
		o.Logging = s.Logging
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NormalizedTags != nil {
		o.NormalizedTags = s.NormalizedTags
	}
	if s.ParentID != nil {
		o.ParentID = s.ParentID
	}
	if s.ParentType != nil {
		o.ParentType = s.ParentType
	}
	if s.Priority != nil {
		o.Priority = s.Priority
	}
	if s.Protected != nil {
		o.Protected = s.Protected
	}
	if s.Protoports != nil {
		o.Protoports = s.Protoports
	}
	if s.Source != nil {
		o.Source = s.Source
	}
	if s.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallRule) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallRule) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallRule()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.TLSDecryption != nil {
		out.TLSDecryption = *o.TLSDecryption
	}
	if o.TLSDecryptionCertificateID != nil {
		out.TLSDecryptionCertificateID = *o.TLSDecryptionCertificateID
	}
	if o.URLCategories != nil {
		out.URLCategories = o.URLCategories
	}
	if o.Action != nil {
		out.Action = *o.Action
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.Applications != nil {
		out.Applications = o.Applications
	}
	if o.AssociatedTags != nil {
		out.AssociatedTags = *o.AssociatedTags
	}
	if o.CreateIdempotencyKey != nil {
		out.CreateIdempotencyKey = *o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Destination != nil {
		out.Destination = o.Destination
	}
	if o.Logging != nil {
		out.Logging = *o.Logging
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NormalizedTags != nil {
		out.NormalizedTags = *o.NormalizedTags
	}
	if o.ParentID != nil {
		out.ParentID = *o.ParentID
	}
	if o.ParentType != nil {
		out.ParentType = *o.ParentType
	}
	if o.Priority != nil {
		out.Priority = *o.Priority
	}
	if o.Protected != nil {
		out.Protected = *o.Protected
	}
	if o.Protoports != nil {
		out.Protoports = o.Protoports
	}
	if o.Source != nil {
		out.Source = o.Source
	}
	if o.UpdateIdempotencyKey != nil {
		out.UpdateIdempotencyKey = *o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetAnnotations returns the Annotations of the receiver.
func (o *SparseFirewallRule) GetAnnotations() (out map[string][]string) {

	if o.Annotations == nil {
		return
	}

	return *o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetAnnotations(annotations map[string][]string) {

	o.Annotations = &annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *SparseFirewallRule) GetAssociatedTags() (out []string) {

	if o.AssociatedTags == nil {
		return
	}

	return *o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = &associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseFirewallRule) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallRule) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *SparseFirewallRule) GetNormalizedTags() (out []string) {

	if o.NormalizedTags == nil {
		return
	}

	return *o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = &normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *SparseFirewallRule) GetProtected() (out bool) {

	if o.Protected == nil {
		return
	}

	return *o.Protected
}

// SetProtected sets the property Protected of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetProtected(protected bool) {

	o.Protected = &protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseFirewallRule) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseFirewallRule) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseFirewallRule.
func (o *SparseFirewallRule) DeepCopy() *SparseFirewallRule {

	if o == nil {
		return nil
	}

	out := &SparseFirewallRule{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallRule.
func (o *SparseFirewallRule) DeepCopyInto(out *SparseFirewallRule) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallRule: %s", err))
	}

	*out = *target.(*SparseFirewallRule)
}

type mongoAttributesFirewallRule struct {
	ID                         bson.ObjectId                  `bson:"_id,omitempty"`
	TLSDecryption              FirewallRuleTLSDecryptionValue `bson:"tlsdecryption"`
	TLSDecryptionCertificateID string                         `bson:"tlsdecryptioncertificateid"`
	URLCategories              *FirewallURLCategoryCriteria   `bson:"urlcategories"`
	Action                     FirewallRuleActionValue        `bson:"action"`
	Annotations                map[string][]string            `bson:"annotations"`
	Applications               *FirewallApplicationCriteria   `bson:"applications"`
	AssociatedTags             []string                       `bson:"associatedtags"`
	CreateIdempotencyKey       string                         `bson:"createidempotencykey"`
	CreateTime                 time.Time                      `bson:"createtime"`
	Destination                *FirewallTargetCriteria        `bson:"destination"`
	Logging                    bool                           `bson:"logging"`
	Namespace                  string                         `bson:"namespace"`
	NormalizedTags             []string                       `bson:"normalizedtags"`
	ParentID                   string                         `bson:"parentid"`
	ParentType                 string                         `bson:"parenttype"`
	Priority                   int                            `bson:"priority"`
	Protected                  bool                           `bson:"protected"`
	Protoports                 *FirewallProtoPortsCriteria    `bson:"protoports"`
	Source                     *FirewallTargetCriteria        `bson:"source"`
	UpdateIdempotencyKey       string                         `bson:"updateidempotencykey"`
	UpdateTime                 time.Time                      `bson:"updatetime"`
	ZHash                      int                            `bson:"zhash"`
	Zone                       int                            `bson:"zone"`
}
type mongoAttributesSparseFirewallRule struct {
	ID                         bson.ObjectId                   `bson:"_id,omitempty"`
	TLSDecryption              *FirewallRuleTLSDecryptionValue `bson:"tlsdecryption,omitempty"`
	TLSDecryptionCertificateID *string                         `bson:"tlsdecryptioncertificateid,omitempty"`
	URLCategories              *FirewallURLCategoryCriteria    `bson:"urlcategories,omitempty"`
	Action                     *FirewallRuleActionValue        `bson:"action,omitempty"`
	Annotations                *map[string][]string            `bson:"annotations,omitempty"`
	Applications               *FirewallApplicationCriteria    `bson:"applications,omitempty"`
	AssociatedTags             *[]string                       `bson:"associatedtags,omitempty"`
	CreateIdempotencyKey       *string                         `bson:"createidempotencykey,omitempty"`
	CreateTime                 *time.Time                      `bson:"createtime,omitempty"`
	Destination                *FirewallTargetCriteria         `bson:"destination,omitempty"`
	Logging                    *bool                           `bson:"logging,omitempty"`
	Namespace                  *string                         `bson:"namespace,omitempty"`
	NormalizedTags             *[]string                       `bson:"normalizedtags,omitempty"`
	ParentID                   *string                         `bson:"parentid,omitempty"`
	ParentType                 *string                         `bson:"parenttype,omitempty"`
	Priority                   *int                            `bson:"priority,omitempty"`
	Protected                  *bool                           `bson:"protected,omitempty"`
	Protoports                 *FirewallProtoPortsCriteria     `bson:"protoports,omitempty"`
	Source                     *FirewallTargetCriteria         `bson:"source,omitempty"`
	UpdateIdempotencyKey       *string                         `bson:"updateidempotencykey,omitempty"`
	UpdateTime                 *time.Time                      `bson:"updatetime,omitempty"`
	ZHash                      *int                            `bson:"zhash,omitempty"`
	Zone                       *int                            `bson:"zone,omitempty"`
}
