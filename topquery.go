// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// TopQueryTopTypeValue represents the possible values for attribute "topType".
type TopQueryTopTypeValue string

const (
	// TopQueryTopTypeApplication represents the value Application.
	TopQueryTopTypeApplication TopQueryTopTypeValue = "Application"

	// TopQueryTopTypeAttack represents the value Attack.
	TopQueryTopTypeAttack TopQueryTopTypeValue = "Attack"

	// TopQueryTopTypeAttackType represents the value AttackType.
	TopQueryTopTypeAttackType TopQueryTopTypeValue = "AttackType"

	// TopQueryTopTypeAttackVictim represents the value AttackVictim.
	TopQueryTopTypeAttackVictim TopQueryTopTypeValue = "AttackVictim"

	// TopQueryTopTypeAttackedApplication represents the value AttackedApplication.
	TopQueryTopTypeAttackedApplication TopQueryTopTypeValue = "AttackedApplication"

	// TopQueryTopTypeAttacker represents the value Attacker.
	TopQueryTopTypeAttacker TopQueryTopTypeValue = "Attacker"

	// TopQueryTopTypeDestinationCountry represents the value DestinationCountry.
	TopQueryTopTypeDestinationCountry TopQueryTopTypeValue = "DestinationCountry"

	// TopQueryTopTypeDestinationIP represents the value DestinationIP.
	TopQueryTopTypeDestinationIP TopQueryTopTypeValue = "DestinationIP"

	// TopQueryTopTypeSourceCountry represents the value SourceCountry.
	TopQueryTopTypeSourceCountry TopQueryTopTypeValue = "SourceCountry"

	// TopQueryTopTypeSourceIP represents the value SourceIP.
	TopQueryTopTypeSourceIP TopQueryTopTypeValue = "SourceIP"

	// TopQueryTopTypeURLCategory represents the value URLCategory.
	TopQueryTopTypeURLCategory TopQueryTopTypeValue = "URLCategory"
)

// TopQueryIdentity represents the Identity of the object.
var TopQueryIdentity = elemental.Identity{
	Name:     "topquery",
	Category: "topqueries",
	Package:  "logging",
	Private:  false,
}

// TopQueriesList represents a list of TopQueries
type TopQueriesList []*TopQuery

// Identity returns the identity of the objects in the list.
func (o TopQueriesList) Identity() elemental.Identity {

	return TopQueryIdentity
}

// Copy returns a pointer to a copy the TopQueriesList.
func (o TopQueriesList) Copy() elemental.Identifiables {

	out := append(TopQueriesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the TopQueriesList.
func (o TopQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(TopQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*TopQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o TopQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o TopQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the TopQueriesList converted to SparseTopQueriesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o TopQueriesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseTopQueriesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseTopQuery)
	}

	return out
}

// Version returns the version of the content.
func (o TopQueriesList) Version() int {

	return 1
}

// TopQuery represents the model of a topquery
type TopQuery struct {
	// The NGFW name.
	FirewallName string `json:"firewallName" msgpack:"firewallName" bson:"firewallname" mapstructure:"firewallName,omitempty"`

	// The result of the top query. The top items in the category.
	TopResult []*TopQueryItem `json:"topResult" msgpack:"topResult" bson:"-" mapstructure:"topResult,omitempty"`

	// The type of field to get top results for.
	TopType TopQueryTopTypeValue `json:"topType" msgpack:"topType" bson:"-" mapstructure:"topType,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTopQuery returns a new *TopQuery
func NewTopQuery() *TopQuery {

	return &TopQuery{
		ModelVersion: 1,
		TopResult:    []*TopQueryItem{},
	}
}

// Identity returns the Identity of the object.
func (o *TopQuery) Identity() elemental.Identity {

	return TopQueryIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *TopQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *TopQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TopQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTopQuery{}

	s.FirewallName = o.FirewallName

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TopQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesTopQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.FirewallName = s.FirewallName

	return nil
}

// Version returns the hardcoded version of the model.
func (o *TopQuery) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *TopQuery) BleveType() string {

	return "topquery"
}

// DefaultOrder returns the list of default ordering fields.
func (o *TopQuery) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *TopQuery) Doc() string {

	return `Answer general queries on firewall logs.`
}

func (o *TopQuery) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *TopQuery) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseTopQuery{
			FirewallName: &o.FirewallName,
			TopResult:    &o.TopResult,
			TopType:      &o.TopType,
		}
	}

	sp := &SparseTopQuery{}
	for _, f := range fields {
		switch f {
		case "firewallName":
			sp.FirewallName = &(o.FirewallName)
		case "topResult":
			sp.TopResult = &(o.TopResult)
		case "topType":
			sp.TopType = &(o.TopType)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseTopQuery to the object.
func (o *TopQuery) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseTopQuery)
	if so.FirewallName != nil {
		o.FirewallName = *so.FirewallName
	}
	if so.TopResult != nil {
		o.TopResult = *so.TopResult
	}
	if so.TopType != nil {
		o.TopType = *so.TopType
	}
}

// DeepCopy returns a deep copy if the TopQuery.
func (o *TopQuery) DeepCopy() *TopQuery {

	if o == nil {
		return nil
	}

	out := &TopQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TopQuery.
func (o *TopQuery) DeepCopyInto(out *TopQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TopQuery: %s", err))
	}

	*out = *target.(*TopQuery)
}

// Validate valides the current information stored into the structure.
func (o *TopQuery) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("firewallName", o.FirewallName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.TopResult {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("topType", string(o.TopType)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("topType", string(o.TopType), []string{"SourceIP", "DestinationIP", "SourceCountry", "DestinationCountry", "Application", "Attacker", "AttackVictim", "Attack", "AttackType", "AttackedApplication", "URLCategory"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TopQuery) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TopQueryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TopQueryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TopQuery) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TopQueryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TopQuery) ValueForAttribute(name string) any {

	switch name {
	case "firewallName":
		return o.FirewallName
	case "topResult":
		return o.TopResult
	case "topType":
		return o.TopType
	}

	return nil
}

// TopQueryAttributesMap represents the map of attribute for TopQuery.
var TopQueryAttributesMap = map[string]elemental.AttributeSpecification{
	"FirewallName": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallname",
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"TopResult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "TopResult",
		Description:    `The result of the top query. The top items in the category.`,
		Exposed:        true,
		Name:           "topResult",
		ReadOnly:       true,
		SubType:        "topqueryitem",
		Type:           "refList",
	},
	"TopType": {
		AllowedChoices: []string{"SourceIP", "DestinationIP", "SourceCountry", "DestinationCountry", "Application", "Attacker", "AttackVictim", "Attack", "AttackType", "AttackedApplication", "URLCategory"},
		ConvertedName:  "TopType",
		Description:    `The type of field to get top results for.`,
		Exposed:        true,
		Name:           "topType",
		Required:       true,
		Type:           "enum",
	},
}

// TopQueryLowerCaseAttributesMap represents the map of attribute for TopQuery.
var TopQueryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"firewallname": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallname",
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"topresult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "TopResult",
		Description:    `The result of the top query. The top items in the category.`,
		Exposed:        true,
		Name:           "topResult",
		ReadOnly:       true,
		SubType:        "topqueryitem",
		Type:           "refList",
	},
	"toptype": {
		AllowedChoices: []string{"SourceIP", "DestinationIP", "SourceCountry", "DestinationCountry", "Application", "Attacker", "AttackVictim", "Attack", "AttackType", "AttackedApplication", "URLCategory"},
		ConvertedName:  "TopType",
		Description:    `The type of field to get top results for.`,
		Exposed:        true,
		Name:           "topType",
		Required:       true,
		Type:           "enum",
	},
}

// SparseTopQueriesList represents a list of SparseTopQueries
type SparseTopQueriesList []*SparseTopQuery

// Identity returns the identity of the objects in the list.
func (o SparseTopQueriesList) Identity() elemental.Identity {

	return TopQueryIdentity
}

// Copy returns a pointer to a copy the SparseTopQueriesList.
func (o SparseTopQueriesList) Copy() elemental.Identifiables {

	copy := append(SparseTopQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseTopQueriesList.
func (o SparseTopQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseTopQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseTopQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseTopQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseTopQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseTopQueriesList converted to TopQueriesList.
func (o SparseTopQueriesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseTopQueriesList) Version() int {

	return 1
}

// SparseTopQuery represents the sparse version of a topquery.
type SparseTopQuery struct {
	// The NGFW name.
	FirewallName *string `json:"firewallName,omitempty" msgpack:"firewallName,omitempty" bson:"firewallname,omitempty" mapstructure:"firewallName,omitempty"`

	// The result of the top query. The top items in the category.
	TopResult *[]*TopQueryItem `json:"topResult,omitempty" msgpack:"topResult,omitempty" bson:"-" mapstructure:"topResult,omitempty"`

	// The type of field to get top results for.
	TopType *TopQueryTopTypeValue `json:"topType,omitempty" msgpack:"topType,omitempty" bson:"-" mapstructure:"topType,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseTopQuery returns a new  SparseTopQuery.
func NewSparseTopQuery() *SparseTopQuery {
	return &SparseTopQuery{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseTopQuery) Identity() elemental.Identity {

	return TopQueryIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseTopQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseTopQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTopQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseTopQuery{}

	if o.FirewallName != nil {
		s.FirewallName = o.FirewallName
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTopQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseTopQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.FirewallName != nil {
		o.FirewallName = s.FirewallName
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseTopQuery) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseTopQuery) ToPlain() elemental.PlainIdentifiable {

	out := NewTopQuery()
	if o.FirewallName != nil {
		out.FirewallName = *o.FirewallName
	}
	if o.TopResult != nil {
		out.TopResult = *o.TopResult
	}
	if o.TopType != nil {
		out.TopType = *o.TopType
	}

	return out
}

// DeepCopy returns a deep copy if the SparseTopQuery.
func (o *SparseTopQuery) DeepCopy() *SparseTopQuery {

	if o == nil {
		return nil
	}

	out := &SparseTopQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseTopQuery.
func (o *SparseTopQuery) DeepCopyInto(out *SparseTopQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseTopQuery: %s", err))
	}

	*out = *target.(*SparseTopQuery)
}

type mongoAttributesTopQuery struct {
	FirewallName string `bson:"firewallname"`
}
type mongoAttributesSparseTopQuery struct {
	FirewallName *string `bson:"firewallname,omitempty"`
}
