// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// DeploymentAdvisorSubnetHelperIdentity represents the Identity of the object.
var DeploymentAdvisorSubnetHelperIdentity = elemental.Identity{
	Name:     "deploymentadvisorsubnethelper",
	Category: "deploymentadvisorsubnethelpers",
	Package:  "deploymentadvisor",
	Private:  false,
}

// DeploymentAdvisorSubnetHelpersList represents a list of DeploymentAdvisorSubnetHelpers
type DeploymentAdvisorSubnetHelpersList []*DeploymentAdvisorSubnetHelper

// Identity returns the identity of the objects in the list.
func (o DeploymentAdvisorSubnetHelpersList) Identity() elemental.Identity {

	return DeploymentAdvisorSubnetHelperIdentity
}

// Copy returns a pointer to a copy the DeploymentAdvisorSubnetHelpersList.
func (o DeploymentAdvisorSubnetHelpersList) Copy() elemental.Identifiables {

	copy := append(DeploymentAdvisorSubnetHelpersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the DeploymentAdvisorSubnetHelpersList.
func (o DeploymentAdvisorSubnetHelpersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(DeploymentAdvisorSubnetHelpersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*DeploymentAdvisorSubnetHelper))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o DeploymentAdvisorSubnetHelpersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o DeploymentAdvisorSubnetHelpersList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the DeploymentAdvisorSubnetHelpersList converted to SparseDeploymentAdvisorSubnetHelpersList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o DeploymentAdvisorSubnetHelpersList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseDeploymentAdvisorSubnetHelpersList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseDeploymentAdvisorSubnetHelper)
	}

	return out
}

// Version returns the version of the content.
func (o DeploymentAdvisorSubnetHelpersList) Version() int {

	return 1
}

// DeploymentAdvisorSubnetHelper represents the model of a deploymentadvisorsubnethelper
type DeploymentAdvisorSubnetHelper struct {
	// Returns the list of AWS VPC IDs and information about available subnets for
	// every availability zones in a VPC.
	VPCAvailableSubnets []*VpcAvailableSubnet `json:"VPCAvailableSubnets" msgpack:"VPCAvailableSubnets" bson:"-" mapstructure:"VPCAvailableSubnets,omitempty"`

	// List of AWS VPC IDs with information about associated availability zones and
	// used subnets to check for available subnets.
	VPCUsedSubnets []*VpcUsedSubnet `json:"VPCUsedSubnets" msgpack:"VPCUsedSubnets" bson:"vpcusedsubnets" mapstructure:"VPCUsedSubnets,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDeploymentAdvisorSubnetHelper returns a new *DeploymentAdvisorSubnetHelper
func NewDeploymentAdvisorSubnetHelper() *DeploymentAdvisorSubnetHelper {

	return &DeploymentAdvisorSubnetHelper{
		ModelVersion:        1,
		VPCAvailableSubnets: []*VpcAvailableSubnet{},
		VPCUsedSubnets:      []*VpcUsedSubnet{},
	}
}

// Identity returns the Identity of the object.
func (o *DeploymentAdvisorSubnetHelper) Identity() elemental.Identity {

	return DeploymentAdvisorSubnetHelperIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *DeploymentAdvisorSubnetHelper) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *DeploymentAdvisorSubnetHelper) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DeploymentAdvisorSubnetHelper) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDeploymentAdvisorSubnetHelper{}

	s.VPCUsedSubnets = o.VPCUsedSubnets

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DeploymentAdvisorSubnetHelper) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesDeploymentAdvisorSubnetHelper{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.VPCUsedSubnets = s.VPCUsedSubnets

	return nil
}

// Version returns the hardcoded version of the model.
func (o *DeploymentAdvisorSubnetHelper) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *DeploymentAdvisorSubnetHelper) BleveType() string {

	return "deploymentadvisorsubnethelper"
}

// DefaultOrder returns the list of default ordering fields.
func (o *DeploymentAdvisorSubnetHelper) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *DeploymentAdvisorSubnetHelper) Doc() string {

	return `Represents a Cloud NGFW Deployment Advisor service that returns available subnet
for every specified availability zones in every specified VPC.`
}

func (o *DeploymentAdvisorSubnetHelper) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *DeploymentAdvisorSubnetHelper) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseDeploymentAdvisorSubnetHelper{
			VPCAvailableSubnets: &o.VPCAvailableSubnets,
			VPCUsedSubnets:      &o.VPCUsedSubnets,
		}
	}

	sp := &SparseDeploymentAdvisorSubnetHelper{}
	for _, f := range fields {
		switch f {
		case "VPCAvailableSubnets":
			sp.VPCAvailableSubnets = &(o.VPCAvailableSubnets)
		case "VPCUsedSubnets":
			sp.VPCUsedSubnets = &(o.VPCUsedSubnets)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseDeploymentAdvisorSubnetHelper to the object.
func (o *DeploymentAdvisorSubnetHelper) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseDeploymentAdvisorSubnetHelper)
	if so.VPCAvailableSubnets != nil {
		o.VPCAvailableSubnets = *so.VPCAvailableSubnets
	}
	if so.VPCUsedSubnets != nil {
		o.VPCUsedSubnets = *so.VPCUsedSubnets
	}
}

// DeepCopy returns a deep copy if the DeploymentAdvisorSubnetHelper.
func (o *DeploymentAdvisorSubnetHelper) DeepCopy() *DeploymentAdvisorSubnetHelper {

	if o == nil {
		return nil
	}

	out := &DeploymentAdvisorSubnetHelper{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *DeploymentAdvisorSubnetHelper.
func (o *DeploymentAdvisorSubnetHelper) DeepCopyInto(out *DeploymentAdvisorSubnetHelper) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy DeploymentAdvisorSubnetHelper: %s", err))
	}

	*out = *target.(*DeploymentAdvisorSubnetHelper)
}

// Validate valides the current information stored into the structure.
func (o *DeploymentAdvisorSubnetHelper) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.VPCAvailableSubnets {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	for _, sub := range o.VPCUsedSubnets {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*DeploymentAdvisorSubnetHelper) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DeploymentAdvisorSubnetHelperAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DeploymentAdvisorSubnetHelperLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*DeploymentAdvisorSubnetHelper) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DeploymentAdvisorSubnetHelperAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *DeploymentAdvisorSubnetHelper) ValueForAttribute(name string) interface{} {

	switch name {
	case "VPCAvailableSubnets":
		return o.VPCAvailableSubnets
	case "VPCUsedSubnets":
		return o.VPCUsedSubnets
	}

	return nil
}

// DeploymentAdvisorSubnetHelperAttributesMap represents the map of attribute for DeploymentAdvisorSubnetHelper.
var DeploymentAdvisorSubnetHelperAttributesMap = map[string]elemental.AttributeSpecification{
	"VPCAvailableSubnets": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "VPCAvailableSubnets",
		Description: `Returns the list of AWS VPC IDs and information about available subnets for
every availability zones in a VPC.`,
		Exposed:  true,
		Name:     "VPCAvailableSubnets",
		ReadOnly: true,
		SubType:  "vpcavailablesubnet",
		Type:     "refList",
	},
	"VPCUsedSubnets": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcusedsubnets",
		ConvertedName:  "VPCUsedSubnets",
		Description: `List of AWS VPC IDs with information about associated availability zones and
used subnets to check for available subnets.`,
		Exposed: true,
		Name:    "VPCUsedSubnets",
		Stored:  true,
		SubType: "vpcusedsubnet",
		Type:    "refList",
	},
}

// DeploymentAdvisorSubnetHelperLowerCaseAttributesMap represents the map of attribute for DeploymentAdvisorSubnetHelper.
var DeploymentAdvisorSubnetHelperLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"vpcavailablesubnets": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "VPCAvailableSubnets",
		Description: `Returns the list of AWS VPC IDs and information about available subnets for
every availability zones in a VPC.`,
		Exposed:  true,
		Name:     "VPCAvailableSubnets",
		ReadOnly: true,
		SubType:  "vpcavailablesubnet",
		Type:     "refList",
	},
	"vpcusedsubnets": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcusedsubnets",
		ConvertedName:  "VPCUsedSubnets",
		Description: `List of AWS VPC IDs with information about associated availability zones and
used subnets to check for available subnets.`,
		Exposed: true,
		Name:    "VPCUsedSubnets",
		Stored:  true,
		SubType: "vpcusedsubnet",
		Type:    "refList",
	},
}

// SparseDeploymentAdvisorSubnetHelpersList represents a list of SparseDeploymentAdvisorSubnetHelpers
type SparseDeploymentAdvisorSubnetHelpersList []*SparseDeploymentAdvisorSubnetHelper

// Identity returns the identity of the objects in the list.
func (o SparseDeploymentAdvisorSubnetHelpersList) Identity() elemental.Identity {

	return DeploymentAdvisorSubnetHelperIdentity
}

// Copy returns a pointer to a copy the SparseDeploymentAdvisorSubnetHelpersList.
func (o SparseDeploymentAdvisorSubnetHelpersList) Copy() elemental.Identifiables {

	copy := append(SparseDeploymentAdvisorSubnetHelpersList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseDeploymentAdvisorSubnetHelpersList.
func (o SparseDeploymentAdvisorSubnetHelpersList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseDeploymentAdvisorSubnetHelpersList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseDeploymentAdvisorSubnetHelper))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseDeploymentAdvisorSubnetHelpersList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseDeploymentAdvisorSubnetHelpersList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseDeploymentAdvisorSubnetHelpersList converted to DeploymentAdvisorSubnetHelpersList.
func (o SparseDeploymentAdvisorSubnetHelpersList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseDeploymentAdvisorSubnetHelpersList) Version() int {

	return 1
}

// SparseDeploymentAdvisorSubnetHelper represents the sparse version of a deploymentadvisorsubnethelper.
type SparseDeploymentAdvisorSubnetHelper struct {
	// Returns the list of AWS VPC IDs and information about available subnets for
	// every availability zones in a VPC.
	VPCAvailableSubnets *[]*VpcAvailableSubnet `json:"VPCAvailableSubnets,omitempty" msgpack:"VPCAvailableSubnets,omitempty" bson:"-" mapstructure:"VPCAvailableSubnets,omitempty"`

	// List of AWS VPC IDs with information about associated availability zones and
	// used subnets to check for available subnets.
	VPCUsedSubnets *[]*VpcUsedSubnet `json:"VPCUsedSubnets,omitempty" msgpack:"VPCUsedSubnets,omitempty" bson:"vpcusedsubnets,omitempty" mapstructure:"VPCUsedSubnets,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseDeploymentAdvisorSubnetHelper returns a new  SparseDeploymentAdvisorSubnetHelper.
func NewSparseDeploymentAdvisorSubnetHelper() *SparseDeploymentAdvisorSubnetHelper {
	return &SparseDeploymentAdvisorSubnetHelper{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseDeploymentAdvisorSubnetHelper) Identity() elemental.Identity {

	return DeploymentAdvisorSubnetHelperIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseDeploymentAdvisorSubnetHelper) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseDeploymentAdvisorSubnetHelper) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseDeploymentAdvisorSubnetHelper) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseDeploymentAdvisorSubnetHelper{}

	if o.VPCUsedSubnets != nil {
		s.VPCUsedSubnets = o.VPCUsedSubnets
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseDeploymentAdvisorSubnetHelper) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseDeploymentAdvisorSubnetHelper{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.VPCUsedSubnets != nil {
		o.VPCUsedSubnets = s.VPCUsedSubnets
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseDeploymentAdvisorSubnetHelper) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseDeploymentAdvisorSubnetHelper) ToPlain() elemental.PlainIdentifiable {

	out := NewDeploymentAdvisorSubnetHelper()
	if o.VPCAvailableSubnets != nil {
		out.VPCAvailableSubnets = *o.VPCAvailableSubnets
	}
	if o.VPCUsedSubnets != nil {
		out.VPCUsedSubnets = *o.VPCUsedSubnets
	}

	return out
}

// DeepCopy returns a deep copy if the SparseDeploymentAdvisorSubnetHelper.
func (o *SparseDeploymentAdvisorSubnetHelper) DeepCopy() *SparseDeploymentAdvisorSubnetHelper {

	if o == nil {
		return nil
	}

	out := &SparseDeploymentAdvisorSubnetHelper{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseDeploymentAdvisorSubnetHelper.
func (o *SparseDeploymentAdvisorSubnetHelper) DeepCopyInto(out *SparseDeploymentAdvisorSubnetHelper) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseDeploymentAdvisorSubnetHelper: %s", err))
	}

	*out = *target.(*SparseDeploymentAdvisorSubnetHelper)
}

type mongoAttributesDeploymentAdvisorSubnetHelper struct {
	VPCUsedSubnets []*VpcUsedSubnet `bson:"vpcusedsubnets"`
}
type mongoAttributesSparseDeploymentAdvisorSubnetHelper struct {
	VPCUsedSubnets *[]*VpcUsedSubnet `bson:"vpcusedsubnets,omitempty"`
}
