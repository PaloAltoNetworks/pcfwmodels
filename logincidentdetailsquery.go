// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// LogIncidentDetailsQueryIdentity represents the Identity of the object.
var LogIncidentDetailsQueryIdentity = elemental.Identity{
	Name:     "logincidentdetailsquery",
	Category: "logincidentdetailsqueries",
	Package:  "logging",
	Private:  false,
}

// LogIncidentDetailsQueriesList represents a list of LogIncidentDetailsQueries
type LogIncidentDetailsQueriesList []*LogIncidentDetailsQuery

// Identity returns the identity of the objects in the list.
func (o LogIncidentDetailsQueriesList) Identity() elemental.Identity {

	return LogIncidentDetailsQueryIdentity
}

// Copy returns a pointer to a copy the LogIncidentDetailsQueriesList.
func (o LogIncidentDetailsQueriesList) Copy() elemental.Identifiables {

	out := append(LogIncidentDetailsQueriesList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the LogIncidentDetailsQueriesList.
func (o LogIncidentDetailsQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(LogIncidentDetailsQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*LogIncidentDetailsQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o LogIncidentDetailsQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o LogIncidentDetailsQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the LogIncidentDetailsQueriesList converted to SparseLogIncidentDetailsQueriesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o LogIncidentDetailsQueriesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseLogIncidentDetailsQueriesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseLogIncidentDetailsQuery)
	}

	return out
}

// Version returns the version of the content.
func (o LogIncidentDetailsQueriesList) Version() int {

	return 1
}

// LogIncidentDetailsQuery represents the model of a logincidentdetailsquery
type LogIncidentDetailsQuery struct {
	// IP addresses for the attacker.
	AttackerIPs []string `json:"attackerIPs" msgpack:"attackerIPs" bson:"-" mapstructure:"attackerIPs,omitempty"`

	// The NGFW name.
	FirewallName string `json:"firewallName" msgpack:"firewallName" bson:"-" mapstructure:"firewallName,omitempty"`

	// The result of the query.
	LogResult []*FirewallLog `json:"logResult" msgpack:"logResult" bson:"-" mapstructure:"logResult,omitempty"`

	// IP addresses for the victim.
	VictimIPs []string `json:"victimIPs" msgpack:"victimIPs" bson:"-" mapstructure:"victimIPs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewLogIncidentDetailsQuery returns a new *LogIncidentDetailsQuery
func NewLogIncidentDetailsQuery() *LogIncidentDetailsQuery {

	return &LogIncidentDetailsQuery{
		ModelVersion: 1,
		AttackerIPs:  []string{},
		LogResult:    []*FirewallLog{},
		VictimIPs:    []string{},
	}
}

// Identity returns the Identity of the object.
func (o *LogIncidentDetailsQuery) Identity() elemental.Identity {

	return LogIncidentDetailsQueryIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *LogIncidentDetailsQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *LogIncidentDetailsQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogIncidentDetailsQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesLogIncidentDetailsQuery{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogIncidentDetailsQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesLogIncidentDetailsQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *LogIncidentDetailsQuery) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *LogIncidentDetailsQuery) BleveType() string {

	return "logincidentdetailsquery"
}

// DefaultOrder returns the list of default ordering fields.
func (o *LogIncidentDetailsQuery) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *LogIncidentDetailsQuery) Doc() string {

	return `Provide details on a Log Incident, including traffic and threat log information.`
}

func (o *LogIncidentDetailsQuery) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *LogIncidentDetailsQuery) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseLogIncidentDetailsQuery{
			AttackerIPs:  &o.AttackerIPs,
			FirewallName: &o.FirewallName,
			LogResult:    &o.LogResult,
			VictimIPs:    &o.VictimIPs,
		}
	}

	sp := &SparseLogIncidentDetailsQuery{}
	for _, f := range fields {
		switch f {
		case "attackerIPs":
			sp.AttackerIPs = &(o.AttackerIPs)
		case "firewallName":
			sp.FirewallName = &(o.FirewallName)
		case "logResult":
			sp.LogResult = &(o.LogResult)
		case "victimIPs":
			sp.VictimIPs = &(o.VictimIPs)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseLogIncidentDetailsQuery to the object.
func (o *LogIncidentDetailsQuery) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseLogIncidentDetailsQuery)
	if so.AttackerIPs != nil {
		o.AttackerIPs = *so.AttackerIPs
	}
	if so.FirewallName != nil {
		o.FirewallName = *so.FirewallName
	}
	if so.LogResult != nil {
		o.LogResult = *so.LogResult
	}
	if so.VictimIPs != nil {
		o.VictimIPs = *so.VictimIPs
	}
}

// DeepCopy returns a deep copy if the LogIncidentDetailsQuery.
func (o *LogIncidentDetailsQuery) DeepCopy() *LogIncidentDetailsQuery {

	if o == nil {
		return nil
	}

	out := &LogIncidentDetailsQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *LogIncidentDetailsQuery.
func (o *LogIncidentDetailsQuery) DeepCopyInto(out *LogIncidentDetailsQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy LogIncidentDetailsQuery: %s", err))
	}

	*out = *target.(*LogIncidentDetailsQuery)
}

// Validate valides the current information stored into the structure.
func (o *LogIncidentDetailsQuery) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredExternal("attackerIPs", o.AttackerIPs); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("firewallName", o.FirewallName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	for _, sub := range o.LogResult {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredExternal("victimIPs", o.VictimIPs); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*LogIncidentDetailsQuery) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := LogIncidentDetailsQueryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return LogIncidentDetailsQueryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*LogIncidentDetailsQuery) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return LogIncidentDetailsQueryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *LogIncidentDetailsQuery) ValueForAttribute(name string) any {

	switch name {
	case "attackerIPs":
		return o.AttackerIPs
	case "firewallName":
		return o.FirewallName
	case "logResult":
		return o.LogResult
	case "victimIPs":
		return o.VictimIPs
	}

	return nil
}

// LogIncidentDetailsQueryAttributesMap represents the map of attribute for LogIncidentDetailsQuery.
var LogIncidentDetailsQueryAttributesMap = map[string]elemental.AttributeSpecification{
	"AttackerIPs": {
		AllowedChoices: []string{},
		ConvertedName:  "AttackerIPs",
		Description:    `IP addresses for the attacker.`,
		Exposed:        true,
		Name:           "attackerIPs",
		Required:       true,
		SubType:        "string",
		Type:           "list",
	},
	"FirewallName": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Type:           "string",
	},
	"LogResult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "LogResult",
		Description:    `The result of the query.`,
		Exposed:        true,
		Name:           "logResult",
		ReadOnly:       true,
		SubType:        "firewalllog",
		Type:           "refList",
	},
	"VictimIPs": {
		AllowedChoices: []string{},
		ConvertedName:  "VictimIPs",
		Description:    `IP addresses for the victim.`,
		Exposed:        true,
		Name:           "victimIPs",
		Required:       true,
		SubType:        "string",
		Type:           "list",
	},
}

// LogIncidentDetailsQueryLowerCaseAttributesMap represents the map of attribute for LogIncidentDetailsQuery.
var LogIncidentDetailsQueryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"attackerips": {
		AllowedChoices: []string{},
		ConvertedName:  "AttackerIPs",
		Description:    `IP addresses for the attacker.`,
		Exposed:        true,
		Name:           "attackerIPs",
		Required:       true,
		SubType:        "string",
		Type:           "list",
	},
	"firewallname": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Type:           "string",
	},
	"logresult": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "LogResult",
		Description:    `The result of the query.`,
		Exposed:        true,
		Name:           "logResult",
		ReadOnly:       true,
		SubType:        "firewalllog",
		Type:           "refList",
	},
	"victimips": {
		AllowedChoices: []string{},
		ConvertedName:  "VictimIPs",
		Description:    `IP addresses for the victim.`,
		Exposed:        true,
		Name:           "victimIPs",
		Required:       true,
		SubType:        "string",
		Type:           "list",
	},
}

// SparseLogIncidentDetailsQueriesList represents a list of SparseLogIncidentDetailsQueries
type SparseLogIncidentDetailsQueriesList []*SparseLogIncidentDetailsQuery

// Identity returns the identity of the objects in the list.
func (o SparseLogIncidentDetailsQueriesList) Identity() elemental.Identity {

	return LogIncidentDetailsQueryIdentity
}

// Copy returns a pointer to a copy the SparseLogIncidentDetailsQueriesList.
func (o SparseLogIncidentDetailsQueriesList) Copy() elemental.Identifiables {

	copy := append(SparseLogIncidentDetailsQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseLogIncidentDetailsQueriesList.
func (o SparseLogIncidentDetailsQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseLogIncidentDetailsQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseLogIncidentDetailsQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseLogIncidentDetailsQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseLogIncidentDetailsQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseLogIncidentDetailsQueriesList converted to LogIncidentDetailsQueriesList.
func (o SparseLogIncidentDetailsQueriesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseLogIncidentDetailsQueriesList) Version() int {

	return 1
}

// SparseLogIncidentDetailsQuery represents the sparse version of a logincidentdetailsquery.
type SparseLogIncidentDetailsQuery struct {
	// IP addresses for the attacker.
	AttackerIPs *[]string `json:"attackerIPs,omitempty" msgpack:"attackerIPs,omitempty" bson:"-" mapstructure:"attackerIPs,omitempty"`

	// The NGFW name.
	FirewallName *string `json:"firewallName,omitempty" msgpack:"firewallName,omitempty" bson:"-" mapstructure:"firewallName,omitempty"`

	// The result of the query.
	LogResult *[]*FirewallLog `json:"logResult,omitempty" msgpack:"logResult,omitempty" bson:"-" mapstructure:"logResult,omitempty"`

	// IP addresses for the victim.
	VictimIPs *[]string `json:"victimIPs,omitempty" msgpack:"victimIPs,omitempty" bson:"-" mapstructure:"victimIPs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseLogIncidentDetailsQuery returns a new  SparseLogIncidentDetailsQuery.
func NewSparseLogIncidentDetailsQuery() *SparseLogIncidentDetailsQuery {
	return &SparseLogIncidentDetailsQuery{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseLogIncidentDetailsQuery) Identity() elemental.Identity {

	return LogIncidentDetailsQueryIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseLogIncidentDetailsQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseLogIncidentDetailsQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogIncidentDetailsQuery) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseLogIncidentDetailsQuery{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogIncidentDetailsQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseLogIncidentDetailsQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseLogIncidentDetailsQuery) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseLogIncidentDetailsQuery) ToPlain() elemental.PlainIdentifiable {

	out := NewLogIncidentDetailsQuery()
	if o.AttackerIPs != nil {
		out.AttackerIPs = *o.AttackerIPs
	}
	if o.FirewallName != nil {
		out.FirewallName = *o.FirewallName
	}
	if o.LogResult != nil {
		out.LogResult = *o.LogResult
	}
	if o.VictimIPs != nil {
		out.VictimIPs = *o.VictimIPs
	}

	return out
}

// DeepCopy returns a deep copy if the SparseLogIncidentDetailsQuery.
func (o *SparseLogIncidentDetailsQuery) DeepCopy() *SparseLogIncidentDetailsQuery {

	if o == nil {
		return nil
	}

	out := &SparseLogIncidentDetailsQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseLogIncidentDetailsQuery.
func (o *SparseLogIncidentDetailsQuery) DeepCopyInto(out *SparseLogIncidentDetailsQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseLogIncidentDetailsQuery: %s", err))
	}

	*out = *target.(*SparseLogIncidentDetailsQuery)
}

type mongoAttributesLogIncidentDetailsQuery struct {
}
type mongoAttributesSparseLogIncidentDetailsQuery struct {
}
