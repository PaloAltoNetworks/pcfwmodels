// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// TrendQueryItem represents the model of a trendqueryitem
type TrendQueryItem struct {
	// The value of the subject at the given timestamp.
	Count int `json:"count" msgpack:"count" bson:"-" mapstructure:"count,omitempty"`

	// Number of minutes represented by the trend.
	Minutes int `json:"minutes" msgpack:"minutes" bson:"-" mapstructure:"minutes,omitempty"`

	// The timestamp of the trend.
	Timestamp time.Time `json:"timestamp" msgpack:"timestamp" bson:"-" mapstructure:"timestamp,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTrendQueryItem returns a new *TrendQueryItem
func NewTrendQueryItem() *TrendQueryItem {

	return &TrendQueryItem{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TrendQueryItem) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTrendQueryItem{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TrendQueryItem) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesTrendQueryItem{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *TrendQueryItem) BleveType() string {

	return "trendqueryitem"
}

// DeepCopy returns a deep copy if the TrendQueryItem.
func (o *TrendQueryItem) DeepCopy() *TrendQueryItem {

	if o == nil {
		return nil
	}

	out := &TrendQueryItem{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TrendQueryItem.
func (o *TrendQueryItem) DeepCopyInto(out *TrendQueryItem) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TrendQueryItem: %s", err))
	}

	*out = *target.(*TrendQueryItem)
}

// Validate valides the current information stored into the structure.
func (o *TrendQueryItem) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredTime("timestamp", o.Timestamp); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TrendQueryItem) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TrendQueryItemAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TrendQueryItemLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TrendQueryItem) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TrendQueryItemAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TrendQueryItem) ValueForAttribute(name string) any {

	switch name {
	case "count":
		return o.Count
	case "minutes":
		return o.Minutes
	case "timestamp":
		return o.Timestamp
	}

	return nil
}

// TrendQueryItemAttributesMap represents the map of attribute for TrendQueryItem.
var TrendQueryItemAttributesMap = map[string]elemental.AttributeSpecification{
	"Count": {
		AllowedChoices: []string{},
		ConvertedName:  "Count",
		Description:    `The value of the subject at the given timestamp.`,
		Exposed:        true,
		Name:           "count",
		Type:           "integer",
	},
	"Minutes": {
		AllowedChoices: []string{},
		ConvertedName:  "Minutes",
		Description:    `Number of minutes represented by the trend.`,
		Exposed:        true,
		Name:           "minutes",
		Type:           "integer",
	},
	"Timestamp": {
		AllowedChoices: []string{},
		ConvertedName:  "Timestamp",
		Description:    `The timestamp of the trend.`,
		Exposed:        true,
		Name:           "timestamp",
		Required:       true,
		Type:           "time",
	},
}

// TrendQueryItemLowerCaseAttributesMap represents the map of attribute for TrendQueryItem.
var TrendQueryItemLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"count": {
		AllowedChoices: []string{},
		ConvertedName:  "Count",
		Description:    `The value of the subject at the given timestamp.`,
		Exposed:        true,
		Name:           "count",
		Type:           "integer",
	},
	"minutes": {
		AllowedChoices: []string{},
		ConvertedName:  "Minutes",
		Description:    `Number of minutes represented by the trend.`,
		Exposed:        true,
		Name:           "minutes",
		Type:           "integer",
	},
	"timestamp": {
		AllowedChoices: []string{},
		ConvertedName:  "Timestamp",
		Description:    `The timestamp of the trend.`,
		Exposed:        true,
		Name:           "timestamp",
		Required:       true,
		Type:           "time",
	},
}

type mongoAttributesTrendQueryItem struct {
}
