// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// PCFWTenantLogDestinationTypeValue represents the possible values for attribute "logDestinationType".
type PCFWTenantLogDestinationTypeValue string

const (
	// PCFWTenantLogDestinationTypeCloudwatch represents the value Cloudwatch.
	PCFWTenantLogDestinationTypeCloudwatch PCFWTenantLogDestinationTypeValue = "Cloudwatch"

	// PCFWTenantLogDestinationTypeKinesisFirehose represents the value KinesisFirehose.
	PCFWTenantLogDestinationTypeKinesisFirehose PCFWTenantLogDestinationTypeValue = "KinesisFirehose"

	// PCFWTenantLogDestinationTypePrisma represents the value Prisma.
	PCFWTenantLogDestinationTypePrisma PCFWTenantLogDestinationTypeValue = "Prisma"

	// PCFWTenantLogDestinationTypeS3 represents the value S3.
	PCFWTenantLogDestinationTypeS3 PCFWTenantLogDestinationTypeValue = "S3"
)

// PCFWTenantStatusValue represents the possible values for attribute "status".
type PCFWTenantStatusValue string

const (
	// PCFWTenantStatusCreating represents the value Creating.
	PCFWTenantStatusCreating PCFWTenantStatusValue = "Creating"

	// PCFWTenantStatusDeleting represents the value Deleting.
	PCFWTenantStatusDeleting PCFWTenantStatusValue = "Deleting"

	// PCFWTenantStatusFailed represents the value Failed.
	PCFWTenantStatusFailed PCFWTenantStatusValue = "Failed"

	// PCFWTenantStatusFailedCreatingPrimaryAccount represents the value FailedCreatingPrimaryAccount.
	PCFWTenantStatusFailedCreatingPrimaryAccount PCFWTenantStatusValue = "FailedCreatingPrimaryAccount"

	// PCFWTenantStatusSuccess represents the value Success.
	PCFWTenantStatusSuccess PCFWTenantStatusValue = "Success"

	// PCFWTenantStatusUnsubscribe represents the value Unsubscribe.
	PCFWTenantStatusUnsubscribe PCFWTenantStatusValue = "Unsubscribe"

	// PCFWTenantStatusUnsubscribePending represents the value UnsubscribePending.
	PCFWTenantStatusUnsubscribePending PCFWTenantStatusValue = "UnsubscribePending"
)

// PCFWTenantIdentity represents the Identity of the object.
var PCFWTenantIdentity = elemental.Identity{
	Name:     "pcfwtenant",
	Category: "pcfwtenants",
	Package:  "ngfw",
	Private:  false,
}

// PCFWTenantsList represents a list of PCFWTenants
type PCFWTenantsList []*PCFWTenant

// Identity returns the identity of the objects in the list.
func (o PCFWTenantsList) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Copy returns a pointer to a copy the PCFWTenantsList.
func (o PCFWTenantsList) Copy() elemental.Identifiables {

	out := append(PCFWTenantsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the PCFWTenantsList.
func (o PCFWTenantsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PCFWTenantsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PCFWTenant))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PCFWTenantsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PCFWTenantsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PCFWTenantsList converted to SparsePCFWTenantsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PCFWTenantsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePCFWTenantsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePCFWTenant)
	}

	return out
}

// Version returns the version of the content.
func (o PCFWTenantsList) Version() int {

	return 1
}

// PCFWTenant represents the model of a pcfwtenant
type PCFWTenant struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// NGFW external ID.
	NGFWExternalID string `json:"NGFWExternalID" msgpack:"NGFWExternalID" bson:"ngfwexternalid" mapstructure:"NGFWExternalID,omitempty"`

	// NGFW tenant ID.
	NGFWTenantID string `json:"NGFWTenantID" msgpack:"NGFWTenantID" bson:"ngfwtenantid" mapstructure:"NGFWTenantID,omitempty"`

	// Stores additional information about an entity.
	Annotations map[string][]string `json:"annotations" msgpack:"annotations" bson:"annotations" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags []string `json:"associatedTags" msgpack:"associatedTags" bson:"associatedtags" mapstructure:"associatedTags,omitempty"`

	// Athena workgroup to execute queries in.
	AthenaWorkgroup string `json:"athenaWorkgroup" msgpack:"athenaWorkgroup" bson:"athenaworkgroup" mapstructure:"athenaWorkgroup,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey string `json:"-" msgpack:"-" bson:"createidempotencykey" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// AWS rulestack decryption role ARN.
	DecryptionRoleARN string `json:"decryptionRoleARN" msgpack:"decryptionRoleARN" bson:"decryptionrolearn" mapstructure:"decryptionRoleARN,omitempty"`

	// AWS endpoint role ARN.
	EndpointRoleARN string `json:"endpointRoleARN" msgpack:"endpointRoleARN" bson:"endpointrolearn" mapstructure:"endpointRoleARN,omitempty"`

	// The log destination for logging. The value will be converted to lower case and have the aws account id and logging region appended to it (ie. logs-1234-us-east-2) when used to create an S3 bucket for logging.
	LogDestination string `json:"logDestination" msgpack:"logDestination" bson:"logdestination" mapstructure:"logDestination,omitempty"`

	// Destination type for log output.
	LogDestinationType PCFWTenantLogDestinationTypeValue `json:"logDestinationType" msgpack:"logDestinationType" bson:"logdestinationtype" mapstructure:"logDestinationType,omitempty"`

	// ARN of AWS role that allows the NGFW to push logs.
	LogPushRoleARN string `json:"logPushRoleARN" msgpack:"logPushRoleARN" bson:"logpushrolearn" mapstructure:"logPushRoleARN,omitempty"`

	// ARN of AWS role that allows the PCFW to query logs.
	LogQueryRoleARN string `json:"logQueryRoleARN" msgpack:"logQueryRoleARN" bson:"logqueryrolearn" mapstructure:"logQueryRoleARN,omitempty"`

	// The AWS region where logging data lives.
	LogRegion string `json:"logRegion" msgpack:"logRegion" bson:"logregion" mapstructure:"logRegion,omitempty"`

	// Prefix to use for logging resources.
	LogResourcePrefix string `json:"logResourcePrefix" msgpack:"logResourcePrefix" bson:"logresourceprefix" mapstructure:"logResourcePrefix,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags []string `json:"normalizedTags" msgpack:"normalizedTags" bson:"normalizedtags" mapstructure:"normalizedTags,omitempty"`

	// The timestamp when offboarding pending started.
	OffboardingTimestamp time.Time `json:"-" msgpack:"-" bson:"offboardingtimestamp" mapstructure:"-,omitempty"`

	// The primary AWS Account ID.
	PrimaryAWSAccountID string `json:"primaryAWSAccountID" msgpack:"primaryAWSAccountID" bson:"primaryawsaccountid" mapstructure:"primaryAWSAccountID,omitempty"`

	// The namespace where the primary pcfwaccount will be created.
	PrimaryAccountNamespace string `json:"primaryAccountNamespace" msgpack:"primaryAccountNamespace" bson:"primaryaccountnamespace" mapstructure:"primaryAccountNamespace,omitempty"`

	// Defines if the object is protected.
	Protected bool `json:"protected" msgpack:"protected" bson:"protected" mapstructure:"protected,omitempty"`

	// status of tenant.
	Status PCFWTenantStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// status failure reason.
	StatusReason string `json:"statusReason" msgpack:"statusReason" bson:"statusreason" mapstructure:"statusReason,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey string `json:"-" msgpack:"-" bson:"updateidempotencykey" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPCFWTenant returns a new *PCFWTenant
func NewPCFWTenant() *PCFWTenant {

	return &PCFWTenant{
		ModelVersion:       1,
		Annotations:        map[string][]string{},
		AssociatedTags:     []string{},
		AthenaWorkgroup:    "logs_workgroup",
		LogDestinationType: PCFWTenantLogDestinationTypePrisma,
		LogResourcePrefix:  "pcfw",
		NormalizedTags:     []string{},
	}
}

// Identity returns the Identity of the object.
func (o *PCFWTenant) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PCFWTenant) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PCFWTenant) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWTenant) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPCFWTenant{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.NGFWExternalID = o.NGFWExternalID
	s.NGFWTenantID = o.NGFWTenantID
	s.Annotations = o.Annotations
	s.AssociatedTags = o.AssociatedTags
	s.AthenaWorkgroup = o.AthenaWorkgroup
	s.CreateIdempotencyKey = o.CreateIdempotencyKey
	s.CreateTime = o.CreateTime
	s.DecryptionRoleARN = o.DecryptionRoleARN
	s.EndpointRoleARN = o.EndpointRoleARN
	s.LogDestination = o.LogDestination
	s.LogDestinationType = o.LogDestinationType
	s.LogPushRoleARN = o.LogPushRoleARN
	s.LogQueryRoleARN = o.LogQueryRoleARN
	s.LogRegion = o.LogRegion
	s.LogResourcePrefix = o.LogResourcePrefix
	s.Namespace = o.Namespace
	s.NormalizedTags = o.NormalizedTags
	s.OffboardingTimestamp = o.OffboardingTimestamp
	s.PrimaryAWSAccountID = o.PrimaryAWSAccountID
	s.PrimaryAccountNamespace = o.PrimaryAccountNamespace
	s.Protected = o.Protected
	s.Status = o.Status
	s.StatusReason = o.StatusReason
	s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWTenant) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPCFWTenant{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.NGFWExternalID = s.NGFWExternalID
	o.NGFWTenantID = s.NGFWTenantID
	o.Annotations = s.Annotations
	o.AssociatedTags = s.AssociatedTags
	o.AthenaWorkgroup = s.AthenaWorkgroup
	o.CreateIdempotencyKey = s.CreateIdempotencyKey
	o.CreateTime = s.CreateTime
	o.DecryptionRoleARN = s.DecryptionRoleARN
	o.EndpointRoleARN = s.EndpointRoleARN
	o.LogDestination = s.LogDestination
	o.LogDestinationType = s.LogDestinationType
	o.LogPushRoleARN = s.LogPushRoleARN
	o.LogQueryRoleARN = s.LogQueryRoleARN
	o.LogRegion = s.LogRegion
	o.LogResourcePrefix = s.LogResourcePrefix
	o.Namespace = s.Namespace
	o.NormalizedTags = s.NormalizedTags
	o.OffboardingTimestamp = s.OffboardingTimestamp
	o.PrimaryAWSAccountID = s.PrimaryAWSAccountID
	o.PrimaryAccountNamespace = s.PrimaryAccountNamespace
	o.Protected = s.Protected
	o.Status = s.Status
	o.StatusReason = s.StatusReason
	o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PCFWTenant) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PCFWTenant) BleveType() string {

	return "pcfwtenant"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PCFWTenant) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PCFWTenant) Doc() string {

	return `Represents Prisma Cloud Firewall Tenant.`
}

func (o *PCFWTenant) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetAnnotations returns the Annotations of the receiver.
func (o *PCFWTenant) GetAnnotations() map[string][]string {

	return o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the given value.
func (o *PCFWTenant) SetAnnotations(annotations map[string][]string) {

	o.Annotations = annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *PCFWTenant) GetAssociatedTags() []string {

	return o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the given value.
func (o *PCFWTenant) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *PCFWTenant) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *PCFWTenant) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *PCFWTenant) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *PCFWTenant) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *PCFWTenant) GetNormalizedTags() []string {

	return o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the given value.
func (o *PCFWTenant) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *PCFWTenant) GetProtected() bool {

	return o.Protected
}

// SetProtected sets the property Protected of the receiver using the given value.
func (o *PCFWTenant) SetProtected(protected bool) {

	o.Protected = protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *PCFWTenant) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *PCFWTenant) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PCFWTenant) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePCFWTenant{
			ID:                      &o.ID,
			NGFWExternalID:          &o.NGFWExternalID,
			NGFWTenantID:            &o.NGFWTenantID,
			Annotations:             &o.Annotations,
			AssociatedTags:          &o.AssociatedTags,
			AthenaWorkgroup:         &o.AthenaWorkgroup,
			CreateIdempotencyKey:    &o.CreateIdempotencyKey,
			CreateTime:              &o.CreateTime,
			DecryptionRoleARN:       &o.DecryptionRoleARN,
			EndpointRoleARN:         &o.EndpointRoleARN,
			LogDestination:          &o.LogDestination,
			LogDestinationType:      &o.LogDestinationType,
			LogPushRoleARN:          &o.LogPushRoleARN,
			LogQueryRoleARN:         &o.LogQueryRoleARN,
			LogRegion:               &o.LogRegion,
			LogResourcePrefix:       &o.LogResourcePrefix,
			Namespace:               &o.Namespace,
			NormalizedTags:          &o.NormalizedTags,
			OffboardingTimestamp:    &o.OffboardingTimestamp,
			PrimaryAWSAccountID:     &o.PrimaryAWSAccountID,
			PrimaryAccountNamespace: &o.PrimaryAccountNamespace,
			Protected:               &o.Protected,
			Status:                  &o.Status,
			StatusReason:            &o.StatusReason,
			UpdateIdempotencyKey:    &o.UpdateIdempotencyKey,
			UpdateTime:              &o.UpdateTime,
			ZHash:                   &o.ZHash,
			Zone:                    &o.Zone,
		}
	}

	sp := &SparsePCFWTenant{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "NGFWExternalID":
			sp.NGFWExternalID = &(o.NGFWExternalID)
		case "NGFWTenantID":
			sp.NGFWTenantID = &(o.NGFWTenantID)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "associatedTags":
			sp.AssociatedTags = &(o.AssociatedTags)
		case "athenaWorkgroup":
			sp.AthenaWorkgroup = &(o.AthenaWorkgroup)
		case "createIdempotencyKey":
			sp.CreateIdempotencyKey = &(o.CreateIdempotencyKey)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "decryptionRoleARN":
			sp.DecryptionRoleARN = &(o.DecryptionRoleARN)
		case "endpointRoleARN":
			sp.EndpointRoleARN = &(o.EndpointRoleARN)
		case "logDestination":
			sp.LogDestination = &(o.LogDestination)
		case "logDestinationType":
			sp.LogDestinationType = &(o.LogDestinationType)
		case "logPushRoleARN":
			sp.LogPushRoleARN = &(o.LogPushRoleARN)
		case "logQueryRoleARN":
			sp.LogQueryRoleARN = &(o.LogQueryRoleARN)
		case "logRegion":
			sp.LogRegion = &(o.LogRegion)
		case "logResourcePrefix":
			sp.LogResourcePrefix = &(o.LogResourcePrefix)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "normalizedTags":
			sp.NormalizedTags = &(o.NormalizedTags)
		case "offboardingTimestamp":
			sp.OffboardingTimestamp = &(o.OffboardingTimestamp)
		case "primaryAWSAccountID":
			sp.PrimaryAWSAccountID = &(o.PrimaryAWSAccountID)
		case "primaryAccountNamespace":
			sp.PrimaryAccountNamespace = &(o.PrimaryAccountNamespace)
		case "protected":
			sp.Protected = &(o.Protected)
		case "status":
			sp.Status = &(o.Status)
		case "statusReason":
			sp.StatusReason = &(o.StatusReason)
		case "updateIdempotencyKey":
			sp.UpdateIdempotencyKey = &(o.UpdateIdempotencyKey)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePCFWTenant to the object.
func (o *PCFWTenant) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePCFWTenant)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.NGFWExternalID != nil {
		o.NGFWExternalID = *so.NGFWExternalID
	}
	if so.NGFWTenantID != nil {
		o.NGFWTenantID = *so.NGFWTenantID
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.AssociatedTags != nil {
		o.AssociatedTags = *so.AssociatedTags
	}
	if so.AthenaWorkgroup != nil {
		o.AthenaWorkgroup = *so.AthenaWorkgroup
	}
	if so.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = *so.CreateIdempotencyKey
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DecryptionRoleARN != nil {
		o.DecryptionRoleARN = *so.DecryptionRoleARN
	}
	if so.EndpointRoleARN != nil {
		o.EndpointRoleARN = *so.EndpointRoleARN
	}
	if so.LogDestination != nil {
		o.LogDestination = *so.LogDestination
	}
	if so.LogDestinationType != nil {
		o.LogDestinationType = *so.LogDestinationType
	}
	if so.LogPushRoleARN != nil {
		o.LogPushRoleARN = *so.LogPushRoleARN
	}
	if so.LogQueryRoleARN != nil {
		o.LogQueryRoleARN = *so.LogQueryRoleARN
	}
	if so.LogRegion != nil {
		o.LogRegion = *so.LogRegion
	}
	if so.LogResourcePrefix != nil {
		o.LogResourcePrefix = *so.LogResourcePrefix
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NormalizedTags != nil {
		o.NormalizedTags = *so.NormalizedTags
	}
	if so.OffboardingTimestamp != nil {
		o.OffboardingTimestamp = *so.OffboardingTimestamp
	}
	if so.PrimaryAWSAccountID != nil {
		o.PrimaryAWSAccountID = *so.PrimaryAWSAccountID
	}
	if so.PrimaryAccountNamespace != nil {
		o.PrimaryAccountNamespace = *so.PrimaryAccountNamespace
	}
	if so.Protected != nil {
		o.Protected = *so.Protected
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.StatusReason != nil {
		o.StatusReason = *so.StatusReason
	}
	if so.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = *so.UpdateIdempotencyKey
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the PCFWTenant.
func (o *PCFWTenant) DeepCopy() *PCFWTenant {

	if o == nil {
		return nil
	}

	out := &PCFWTenant{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PCFWTenant.
func (o *PCFWTenant) DeepCopyInto(out *PCFWTenant) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PCFWTenant: %s", err))
	}

	*out = *target.(*PCFWTenant)
}

// Validate valides the current information stored into the structure.
func (o *PCFWTenant) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateTagsWithoutReservedPrefixes("associatedTags", o.AssociatedTags); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("athenaWorkgroup", o.AthenaWorkgroup); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("decryptionRoleARN", o.DecryptionRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("endpointRoleARN", o.EndpointRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestination", o.LogDestination); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestinationType", string(o.LogDestinationType)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("logDestinationType", string(o.LogDestinationType), []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logPushRoleARN", o.LogPushRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logQueryRoleARN", o.LogQueryRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logRegion", o.LogRegion); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logResourcePrefix", o.LogResourcePrefix); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("primaryAWSAccountID", o.PrimaryAWSAccountID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("primaryAccountNamespace", o.PrimaryAccountNamespace); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Creating", "Success", "Failed", "Unsubscribe", "UnsubscribePending", "Deleting", "FailedCreatingPrimaryAccount"}, true); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PCFWTenant) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PCFWTenantAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PCFWTenantLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PCFWTenant) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PCFWTenantAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PCFWTenant) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "NGFWExternalID":
		return o.NGFWExternalID
	case "NGFWTenantID":
		return o.NGFWTenantID
	case "annotations":
		return o.Annotations
	case "associatedTags":
		return o.AssociatedTags
	case "athenaWorkgroup":
		return o.AthenaWorkgroup
	case "createIdempotencyKey":
		return o.CreateIdempotencyKey
	case "createTime":
		return o.CreateTime
	case "decryptionRoleARN":
		return o.DecryptionRoleARN
	case "endpointRoleARN":
		return o.EndpointRoleARN
	case "logDestination":
		return o.LogDestination
	case "logDestinationType":
		return o.LogDestinationType
	case "logPushRoleARN":
		return o.LogPushRoleARN
	case "logQueryRoleARN":
		return o.LogQueryRoleARN
	case "logRegion":
		return o.LogRegion
	case "logResourcePrefix":
		return o.LogResourcePrefix
	case "namespace":
		return o.Namespace
	case "normalizedTags":
		return o.NormalizedTags
	case "offboardingTimestamp":
		return o.OffboardingTimestamp
	case "primaryAWSAccountID":
		return o.PrimaryAWSAccountID
	case "primaryAccountNamespace":
		return o.PrimaryAccountNamespace
	case "protected":
		return o.Protected
	case "status":
		return o.Status
	case "statusReason":
		return o.StatusReason
	case "updateIdempotencyKey":
		return o.UpdateIdempotencyKey
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PCFWTenantAttributesMap represents the map of attribute for PCFWTenant.
var PCFWTenantAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWExternalID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwexternalid",
		ConvertedName:  "NGFWExternalID",
		Description:    `NGFW external ID.`,
		Exposed:        true,
		Name:           "NGFWExternalID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWTenantID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwtenantid",
		ConvertedName:  "NGFWTenantID",
		Description:    `NGFW tenant ID.`,
		Exposed:        true,
		Name:           "NGFWTenantID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"AssociatedTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"AthenaWorkgroup": {
		AllowedChoices: []string{},
		BSONFieldName:  "athenaworkgroup",
		ConvertedName:  "AthenaWorkgroup",
		DefaultValue:   "logs_workgroup",
		Description:    `Athena workgroup to execute queries in.`,
		Exposed:        true,
		Name:           "athenaWorkgroup",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},

	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DecryptionRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionrolearn",
		ConvertedName:  "DecryptionRoleARN",
		Description:    `AWS rulestack decryption role ARN.`,
		Exposed:        true,
		Name:           "decryptionRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"EndpointRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointrolearn",
		ConvertedName:  "EndpointRoleARN",
		Description:    `AWS endpoint role ARN.`,
		Exposed:        true,
		Name:           "endpointRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `The log destination for logging. The value will be converted to lower case and have the aws account id and logging region appended to it (ie. logs-1234-us-east-2) when used to create an S3 bucket for logging.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestinationType": {
		AllowedChoices: []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"},
		BSONFieldName:  "logdestinationtype",
		ConvertedName:  "LogDestinationType",
		DefaultValue:   PCFWTenantLogDestinationTypePrisma,
		Description:    `Destination type for log output.`,
		Exposed:        true,
		Name:           "logDestinationType",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"LogPushRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "logpushrolearn",
		ConvertedName:  "LogPushRoleARN",
		Description:    `ARN of AWS role that allows the NGFW to push logs.`,
		Exposed:        true,
		Name:           "logPushRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogQueryRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "logqueryrolearn",
		ConvertedName:  "LogQueryRoleARN",
		Description:    `ARN of AWS role that allows the PCFW to query logs.`,
		Exposed:        true,
		Name:           "logQueryRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogRegion": {
		AllowedChoices: []string{},
		BSONFieldName:  "logregion",
		ConvertedName:  "LogRegion",
		Description:    `The AWS region where logging data lives.`,
		Exposed:        true,
		Name:           "logRegion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogResourcePrefix": {
		AllowedChoices: []string{},
		BSONFieldName:  "logresourceprefix",
		ConvertedName:  "LogResourcePrefix",
		DefaultValue:   "pcfw",
		Description:    `Prefix to use for logging resources.`,
		Exposed:        true,
		Name:           "logResourcePrefix",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NormalizedTags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},

	"PrimaryAWSAccountID": {
		AllowedChoices: []string{},
		BSONFieldName:  "primaryawsaccountid",
		ConvertedName:  "PrimaryAWSAccountID",
		Description:    `The primary AWS Account ID.`,
		Exposed:        true,
		Name:           "primaryAWSAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"PrimaryAccountNamespace": {
		AllowedChoices: []string{},
		BSONFieldName:  "primaryaccountnamespace",
		ConvertedName:  "PrimaryAccountNamespace",
		Description:    `The namespace where the primary pcfwaccount will be created.`,
		Exposed:        true,
		Name:           "primaryAccountNamespace",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"Status": {
		AllowedChoices: []string{"Creating", "Success", "Failed", "Unsubscribe", "UnsubscribePending", "Deleting", "FailedCreatingPrimaryAccount"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `status of tenant.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"StatusReason": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `status failure reason.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// PCFWTenantLowerCaseAttributesMap represents the map of attribute for PCFWTenant.
var PCFWTenantLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwexternalid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwexternalid",
		ConvertedName:  "NGFWExternalID",
		Description:    `NGFW external ID.`,
		Exposed:        true,
		Name:           "NGFWExternalID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwtenantid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwtenantid",
		ConvertedName:  "NGFWTenantID",
		Description:    `NGFW tenant ID.`,
		Exposed:        true,
		Name:           "NGFWTenantID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"associatedtags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"athenaworkgroup": {
		AllowedChoices: []string{},
		BSONFieldName:  "athenaworkgroup",
		ConvertedName:  "AthenaWorkgroup",
		DefaultValue:   "logs_workgroup",
		Description:    `Athena workgroup to execute queries in.`,
		Exposed:        true,
		Name:           "athenaWorkgroup",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},

	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"decryptionrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionrolearn",
		ConvertedName:  "DecryptionRoleARN",
		Description:    `AWS rulestack decryption role ARN.`,
		Exposed:        true,
		Name:           "decryptionRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"endpointrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointrolearn",
		ConvertedName:  "EndpointRoleARN",
		Description:    `AWS endpoint role ARN.`,
		Exposed:        true,
		Name:           "endpointRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logdestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `The log destination for logging. The value will be converted to lower case and have the aws account id and logging region appended to it (ie. logs-1234-us-east-2) when used to create an S3 bucket for logging.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logdestinationtype": {
		AllowedChoices: []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"},
		BSONFieldName:  "logdestinationtype",
		ConvertedName:  "LogDestinationType",
		DefaultValue:   PCFWTenantLogDestinationTypePrisma,
		Description:    `Destination type for log output.`,
		Exposed:        true,
		Name:           "logDestinationType",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"logpushrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "logpushrolearn",
		ConvertedName:  "LogPushRoleARN",
		Description:    `ARN of AWS role that allows the NGFW to push logs.`,
		Exposed:        true,
		Name:           "logPushRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logqueryrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "logqueryrolearn",
		ConvertedName:  "LogQueryRoleARN",
		Description:    `ARN of AWS role that allows the PCFW to query logs.`,
		Exposed:        true,
		Name:           "logQueryRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logregion": {
		AllowedChoices: []string{},
		BSONFieldName:  "logregion",
		ConvertedName:  "LogRegion",
		Description:    `The AWS region where logging data lives.`,
		Exposed:        true,
		Name:           "logRegion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logresourceprefix": {
		AllowedChoices: []string{},
		BSONFieldName:  "logresourceprefix",
		ConvertedName:  "LogResourcePrefix",
		DefaultValue:   "pcfw",
		Description:    `Prefix to use for logging resources.`,
		Exposed:        true,
		Name:           "logResourcePrefix",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"normalizedtags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},

	"primaryawsaccountid": {
		AllowedChoices: []string{},
		BSONFieldName:  "primaryawsaccountid",
		ConvertedName:  "PrimaryAWSAccountID",
		Description:    `The primary AWS Account ID.`,
		Exposed:        true,
		Name:           "primaryAWSAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"primaryaccountnamespace": {
		AllowedChoices: []string{},
		BSONFieldName:  "primaryaccountnamespace",
		ConvertedName:  "PrimaryAccountNamespace",
		Description:    `The namespace where the primary pcfwaccount will be created.`,
		Exposed:        true,
		Name:           "primaryAccountNamespace",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"status": {
		AllowedChoices: []string{"Creating", "Success", "Failed", "Unsubscribe", "UnsubscribePending", "Deleting", "FailedCreatingPrimaryAccount"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `status of tenant.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"statusreason": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `status failure reason.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},

	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparsePCFWTenantsList represents a list of SparsePCFWTenants
type SparsePCFWTenantsList []*SparsePCFWTenant

// Identity returns the identity of the objects in the list.
func (o SparsePCFWTenantsList) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Copy returns a pointer to a copy the SparsePCFWTenantsList.
func (o SparsePCFWTenantsList) Copy() elemental.Identifiables {

	copy := append(SparsePCFWTenantsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePCFWTenantsList.
func (o SparsePCFWTenantsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePCFWTenantsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePCFWTenant))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePCFWTenantsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePCFWTenantsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePCFWTenantsList converted to PCFWTenantsList.
func (o SparsePCFWTenantsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePCFWTenantsList) Version() int {

	return 1
}

// SparsePCFWTenant represents the sparse version of a pcfwtenant.
type SparsePCFWTenant struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// NGFW external ID.
	NGFWExternalID *string `json:"NGFWExternalID,omitempty" msgpack:"NGFWExternalID,omitempty" bson:"ngfwexternalid,omitempty" mapstructure:"NGFWExternalID,omitempty"`

	// NGFW tenant ID.
	NGFWTenantID *string `json:"NGFWTenantID,omitempty" msgpack:"NGFWTenantID,omitempty" bson:"ngfwtenantid,omitempty" mapstructure:"NGFWTenantID,omitempty"`

	// Stores additional information about an entity.
	Annotations *map[string][]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags *[]string `json:"associatedTags,omitempty" msgpack:"associatedTags,omitempty" bson:"associatedtags,omitempty" mapstructure:"associatedTags,omitempty"`

	// Athena workgroup to execute queries in.
	AthenaWorkgroup *string `json:"athenaWorkgroup,omitempty" msgpack:"athenaWorkgroup,omitempty" bson:"athenaworkgroup,omitempty" mapstructure:"athenaWorkgroup,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey *string `json:"-" msgpack:"-" bson:"createidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// AWS rulestack decryption role ARN.
	DecryptionRoleARN *string `json:"decryptionRoleARN,omitempty" msgpack:"decryptionRoleARN,omitempty" bson:"decryptionrolearn,omitempty" mapstructure:"decryptionRoleARN,omitempty"`

	// AWS endpoint role ARN.
	EndpointRoleARN *string `json:"endpointRoleARN,omitempty" msgpack:"endpointRoleARN,omitempty" bson:"endpointrolearn,omitempty" mapstructure:"endpointRoleARN,omitempty"`

	// The log destination for logging. The value will be converted to lower case and have the aws account id and logging region appended to it (ie. logs-1234-us-east-2) when used to create an S3 bucket for logging.
	LogDestination *string `json:"logDestination,omitempty" msgpack:"logDestination,omitempty" bson:"logdestination,omitempty" mapstructure:"logDestination,omitempty"`

	// Destination type for log output.
	LogDestinationType *PCFWTenantLogDestinationTypeValue `json:"logDestinationType,omitempty" msgpack:"logDestinationType,omitempty" bson:"logdestinationtype,omitempty" mapstructure:"logDestinationType,omitempty"`

	// ARN of AWS role that allows the NGFW to push logs.
	LogPushRoleARN *string `json:"logPushRoleARN,omitempty" msgpack:"logPushRoleARN,omitempty" bson:"logpushrolearn,omitempty" mapstructure:"logPushRoleARN,omitempty"`

	// ARN of AWS role that allows the PCFW to query logs.
	LogQueryRoleARN *string `json:"logQueryRoleARN,omitempty" msgpack:"logQueryRoleARN,omitempty" bson:"logqueryrolearn,omitempty" mapstructure:"logQueryRoleARN,omitempty"`

	// The AWS region where logging data lives.
	LogRegion *string `json:"logRegion,omitempty" msgpack:"logRegion,omitempty" bson:"logregion,omitempty" mapstructure:"logRegion,omitempty"`

	// Prefix to use for logging resources.
	LogResourcePrefix *string `json:"logResourcePrefix,omitempty" msgpack:"logResourcePrefix,omitempty" bson:"logresourceprefix,omitempty" mapstructure:"logResourcePrefix,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags *[]string `json:"normalizedTags,omitempty" msgpack:"normalizedTags,omitempty" bson:"normalizedtags,omitempty" mapstructure:"normalizedTags,omitempty"`

	// The timestamp when offboarding pending started.
	OffboardingTimestamp *time.Time `json:"-" msgpack:"-" bson:"offboardingtimestamp,omitempty" mapstructure:"-,omitempty"`

	// The primary AWS Account ID.
	PrimaryAWSAccountID *string `json:"primaryAWSAccountID,omitempty" msgpack:"primaryAWSAccountID,omitempty" bson:"primaryawsaccountid,omitempty" mapstructure:"primaryAWSAccountID,omitempty"`

	// The namespace where the primary pcfwaccount will be created.
	PrimaryAccountNamespace *string `json:"primaryAccountNamespace,omitempty" msgpack:"primaryAccountNamespace,omitempty" bson:"primaryaccountnamespace,omitempty" mapstructure:"primaryAccountNamespace,omitempty"`

	// Defines if the object is protected.
	Protected *bool `json:"protected,omitempty" msgpack:"protected,omitempty" bson:"protected,omitempty" mapstructure:"protected,omitempty"`

	// status of tenant.
	Status *PCFWTenantStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// status failure reason.
	StatusReason *string `json:"statusReason,omitempty" msgpack:"statusReason,omitempty" bson:"statusreason,omitempty" mapstructure:"statusReason,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey *string `json:"-" msgpack:"-" bson:"updateidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePCFWTenant returns a new  SparsePCFWTenant.
func NewSparsePCFWTenant() *SparsePCFWTenant {
	return &SparsePCFWTenant{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePCFWTenant) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePCFWTenant) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePCFWTenant) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWTenant) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePCFWTenant{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.NGFWExternalID != nil {
		s.NGFWExternalID = o.NGFWExternalID
	}
	if o.NGFWTenantID != nil {
		s.NGFWTenantID = o.NGFWTenantID
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.AssociatedTags != nil {
		s.AssociatedTags = o.AssociatedTags
	}
	if o.AthenaWorkgroup != nil {
		s.AthenaWorkgroup = o.AthenaWorkgroup
	}
	if o.CreateIdempotencyKey != nil {
		s.CreateIdempotencyKey = o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DecryptionRoleARN != nil {
		s.DecryptionRoleARN = o.DecryptionRoleARN
	}
	if o.EndpointRoleARN != nil {
		s.EndpointRoleARN = o.EndpointRoleARN
	}
	if o.LogDestination != nil {
		s.LogDestination = o.LogDestination
	}
	if o.LogDestinationType != nil {
		s.LogDestinationType = o.LogDestinationType
	}
	if o.LogPushRoleARN != nil {
		s.LogPushRoleARN = o.LogPushRoleARN
	}
	if o.LogQueryRoleARN != nil {
		s.LogQueryRoleARN = o.LogQueryRoleARN
	}
	if o.LogRegion != nil {
		s.LogRegion = o.LogRegion
	}
	if o.LogResourcePrefix != nil {
		s.LogResourcePrefix = o.LogResourcePrefix
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NormalizedTags != nil {
		s.NormalizedTags = o.NormalizedTags
	}
	if o.OffboardingTimestamp != nil {
		s.OffboardingTimestamp = o.OffboardingTimestamp
	}
	if o.PrimaryAWSAccountID != nil {
		s.PrimaryAWSAccountID = o.PrimaryAWSAccountID
	}
	if o.PrimaryAccountNamespace != nil {
		s.PrimaryAccountNamespace = o.PrimaryAccountNamespace
	}
	if o.Protected != nil {
		s.Protected = o.Protected
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.StatusReason != nil {
		s.StatusReason = o.StatusReason
	}
	if o.UpdateIdempotencyKey != nil {
		s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWTenant) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePCFWTenant{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.NGFWExternalID != nil {
		o.NGFWExternalID = s.NGFWExternalID
	}
	if s.NGFWTenantID != nil {
		o.NGFWTenantID = s.NGFWTenantID
	}
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.AssociatedTags != nil {
		o.AssociatedTags = s.AssociatedTags
	}
	if s.AthenaWorkgroup != nil {
		o.AthenaWorkgroup = s.AthenaWorkgroup
	}
	if s.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = s.CreateIdempotencyKey
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DecryptionRoleARN != nil {
		o.DecryptionRoleARN = s.DecryptionRoleARN
	}
	if s.EndpointRoleARN != nil {
		o.EndpointRoleARN = s.EndpointRoleARN
	}
	if s.LogDestination != nil {
		o.LogDestination = s.LogDestination
	}
	if s.LogDestinationType != nil {
		o.LogDestinationType = s.LogDestinationType
	}
	if s.LogPushRoleARN != nil {
		o.LogPushRoleARN = s.LogPushRoleARN
	}
	if s.LogQueryRoleARN != nil {
		o.LogQueryRoleARN = s.LogQueryRoleARN
	}
	if s.LogRegion != nil {
		o.LogRegion = s.LogRegion
	}
	if s.LogResourcePrefix != nil {
		o.LogResourcePrefix = s.LogResourcePrefix
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NormalizedTags != nil {
		o.NormalizedTags = s.NormalizedTags
	}
	if s.OffboardingTimestamp != nil {
		o.OffboardingTimestamp = s.OffboardingTimestamp
	}
	if s.PrimaryAWSAccountID != nil {
		o.PrimaryAWSAccountID = s.PrimaryAWSAccountID
	}
	if s.PrimaryAccountNamespace != nil {
		o.PrimaryAccountNamespace = s.PrimaryAccountNamespace
	}
	if s.Protected != nil {
		o.Protected = s.Protected
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.StatusReason != nil {
		o.StatusReason = s.StatusReason
	}
	if s.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePCFWTenant) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePCFWTenant) ToPlain() elemental.PlainIdentifiable {

	out := NewPCFWTenant()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.NGFWExternalID != nil {
		out.NGFWExternalID = *o.NGFWExternalID
	}
	if o.NGFWTenantID != nil {
		out.NGFWTenantID = *o.NGFWTenantID
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.AssociatedTags != nil {
		out.AssociatedTags = *o.AssociatedTags
	}
	if o.AthenaWorkgroup != nil {
		out.AthenaWorkgroup = *o.AthenaWorkgroup
	}
	if o.CreateIdempotencyKey != nil {
		out.CreateIdempotencyKey = *o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DecryptionRoleARN != nil {
		out.DecryptionRoleARN = *o.DecryptionRoleARN
	}
	if o.EndpointRoleARN != nil {
		out.EndpointRoleARN = *o.EndpointRoleARN
	}
	if o.LogDestination != nil {
		out.LogDestination = *o.LogDestination
	}
	if o.LogDestinationType != nil {
		out.LogDestinationType = *o.LogDestinationType
	}
	if o.LogPushRoleARN != nil {
		out.LogPushRoleARN = *o.LogPushRoleARN
	}
	if o.LogQueryRoleARN != nil {
		out.LogQueryRoleARN = *o.LogQueryRoleARN
	}
	if o.LogRegion != nil {
		out.LogRegion = *o.LogRegion
	}
	if o.LogResourcePrefix != nil {
		out.LogResourcePrefix = *o.LogResourcePrefix
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NormalizedTags != nil {
		out.NormalizedTags = *o.NormalizedTags
	}
	if o.OffboardingTimestamp != nil {
		out.OffboardingTimestamp = *o.OffboardingTimestamp
	}
	if o.PrimaryAWSAccountID != nil {
		out.PrimaryAWSAccountID = *o.PrimaryAWSAccountID
	}
	if o.PrimaryAccountNamespace != nil {
		out.PrimaryAccountNamespace = *o.PrimaryAccountNamespace
	}
	if o.Protected != nil {
		out.Protected = *o.Protected
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.StatusReason != nil {
		out.StatusReason = *o.StatusReason
	}
	if o.UpdateIdempotencyKey != nil {
		out.UpdateIdempotencyKey = *o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetAnnotations returns the Annotations of the receiver.
func (o *SparsePCFWTenant) GetAnnotations() (out map[string][]string) {

	if o.Annotations == nil {
		return
	}

	return *o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetAnnotations(annotations map[string][]string) {

	o.Annotations = &annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *SparsePCFWTenant) GetAssociatedTags() (out []string) {

	if o.AssociatedTags == nil {
		return
	}

	return *o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = &associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparsePCFWTenant) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePCFWTenant) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *SparsePCFWTenant) GetNormalizedTags() (out []string) {

	if o.NormalizedTags == nil {
		return
	}

	return *o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = &normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *SparsePCFWTenant) GetProtected() (out bool) {

	if o.Protected == nil {
		return
	}

	return *o.Protected
}

// SetProtected sets the property Protected of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetProtected(protected bool) {

	o.Protected = &protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparsePCFWTenant) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparsePCFWTenant.
func (o *SparsePCFWTenant) DeepCopy() *SparsePCFWTenant {

	if o == nil {
		return nil
	}

	out := &SparsePCFWTenant{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePCFWTenant.
func (o *SparsePCFWTenant) DeepCopyInto(out *SparsePCFWTenant) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePCFWTenant: %s", err))
	}

	*out = *target.(*SparsePCFWTenant)
}

type mongoAttributesPCFWTenant struct {
	ID                      bson.ObjectId                     `bson:"_id,omitempty"`
	NGFWExternalID          string                            `bson:"ngfwexternalid"`
	NGFWTenantID            string                            `bson:"ngfwtenantid"`
	Annotations             map[string][]string               `bson:"annotations"`
	AssociatedTags          []string                          `bson:"associatedtags"`
	AthenaWorkgroup         string                            `bson:"athenaworkgroup"`
	CreateIdempotencyKey    string                            `bson:"createidempotencykey"`
	CreateTime              time.Time                         `bson:"createtime"`
	DecryptionRoleARN       string                            `bson:"decryptionrolearn"`
	EndpointRoleARN         string                            `bson:"endpointrolearn"`
	LogDestination          string                            `bson:"logdestination"`
	LogDestinationType      PCFWTenantLogDestinationTypeValue `bson:"logdestinationtype"`
	LogPushRoleARN          string                            `bson:"logpushrolearn"`
	LogQueryRoleARN         string                            `bson:"logqueryrolearn"`
	LogRegion               string                            `bson:"logregion"`
	LogResourcePrefix       string                            `bson:"logresourceprefix"`
	Namespace               string                            `bson:"namespace"`
	NormalizedTags          []string                          `bson:"normalizedtags"`
	OffboardingTimestamp    time.Time                         `bson:"offboardingtimestamp"`
	PrimaryAWSAccountID     string                            `bson:"primaryawsaccountid"`
	PrimaryAccountNamespace string                            `bson:"primaryaccountnamespace"`
	Protected               bool                              `bson:"protected"`
	Status                  PCFWTenantStatusValue             `bson:"status"`
	StatusReason            string                            `bson:"statusreason"`
	UpdateIdempotencyKey    string                            `bson:"updateidempotencykey"`
	UpdateTime              time.Time                         `bson:"updatetime"`
	ZHash                   int                               `bson:"zhash"`
	Zone                    int                               `bson:"zone"`
}
type mongoAttributesSparsePCFWTenant struct {
	ID                      bson.ObjectId                      `bson:"_id,omitempty"`
	NGFWExternalID          *string                            `bson:"ngfwexternalid,omitempty"`
	NGFWTenantID            *string                            `bson:"ngfwtenantid,omitempty"`
	Annotations             *map[string][]string               `bson:"annotations,omitempty"`
	AssociatedTags          *[]string                          `bson:"associatedtags,omitempty"`
	AthenaWorkgroup         *string                            `bson:"athenaworkgroup,omitempty"`
	CreateIdempotencyKey    *string                            `bson:"createidempotencykey,omitempty"`
	CreateTime              *time.Time                         `bson:"createtime,omitempty"`
	DecryptionRoleARN       *string                            `bson:"decryptionrolearn,omitempty"`
	EndpointRoleARN         *string                            `bson:"endpointrolearn,omitempty"`
	LogDestination          *string                            `bson:"logdestination,omitempty"`
	LogDestinationType      *PCFWTenantLogDestinationTypeValue `bson:"logdestinationtype,omitempty"`
	LogPushRoleARN          *string                            `bson:"logpushrolearn,omitempty"`
	LogQueryRoleARN         *string                            `bson:"logqueryrolearn,omitempty"`
	LogRegion               *string                            `bson:"logregion,omitempty"`
	LogResourcePrefix       *string                            `bson:"logresourceprefix,omitempty"`
	Namespace               *string                            `bson:"namespace,omitempty"`
	NormalizedTags          *[]string                          `bson:"normalizedtags,omitempty"`
	OffboardingTimestamp    *time.Time                         `bson:"offboardingtimestamp,omitempty"`
	PrimaryAWSAccountID     *string                            `bson:"primaryawsaccountid,omitempty"`
	PrimaryAccountNamespace *string                            `bson:"primaryaccountnamespace,omitempty"`
	Protected               *bool                              `bson:"protected,omitempty"`
	Status                  *PCFWTenantStatusValue             `bson:"status,omitempty"`
	StatusReason            *string                            `bson:"statusreason,omitempty"`
	UpdateIdempotencyKey    *string                            `bson:"updateidempotencykey,omitempty"`
	UpdateTime              *time.Time                         `bson:"updatetime,omitempty"`
	ZHash                   *int                               `bson:"zhash,omitempty"`
	Zone                    *int                               `bson:"zone,omitempty"`
}
