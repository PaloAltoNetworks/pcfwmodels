// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// PCFWTenantStatusValue represents the possible values for attribute "status".
type PCFWTenantStatusValue string

const (
	// PCFWTenantStatusCreating represents the value Creating.
	PCFWTenantStatusCreating PCFWTenantStatusValue = "Creating"

	// PCFWTenantStatusDeleting represents the value Deleting.
	PCFWTenantStatusDeleting PCFWTenantStatusValue = "Deleting"

	// PCFWTenantStatusFailed represents the value Failed.
	PCFWTenantStatusFailed PCFWTenantStatusValue = "Failed"

	// PCFWTenantStatusFailedCreatingPrimaryAccount represents the value FailedCreatingPrimaryAccount.
	PCFWTenantStatusFailedCreatingPrimaryAccount PCFWTenantStatusValue = "FailedCreatingPrimaryAccount"

	// PCFWTenantStatusSuccess represents the value Success.
	PCFWTenantStatusSuccess PCFWTenantStatusValue = "Success"

	// PCFWTenantStatusUnsubscribe represents the value Unsubscribe.
	PCFWTenantStatusUnsubscribe PCFWTenantStatusValue = "Unsubscribe"

	// PCFWTenantStatusUnsubscribePending represents the value UnsubscribePending.
	PCFWTenantStatusUnsubscribePending PCFWTenantStatusValue = "UnsubscribePending"
)

// PCFWTenantIdentity represents the Identity of the object.
var PCFWTenantIdentity = elemental.Identity{
	Name:     "pcfwtenant",
	Category: "pcfwtenants",
	Package:  "ngfw",
	Private:  false,
}

// PCFWTenantsList represents a list of PCFWTenants
type PCFWTenantsList []*PCFWTenant

// Identity returns the identity of the objects in the list.
func (o PCFWTenantsList) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Copy returns a pointer to a copy the PCFWTenantsList.
func (o PCFWTenantsList) Copy() elemental.Identifiables {

	copy := append(PCFWTenantsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the PCFWTenantsList.
func (o PCFWTenantsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PCFWTenantsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PCFWTenant))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PCFWTenantsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PCFWTenantsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PCFWTenantsList converted to SparsePCFWTenantsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PCFWTenantsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePCFWTenantsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePCFWTenant)
	}

	return out
}

// Version returns the version of the content.
func (o PCFWTenantsList) Version() int {

	return 1
}

// PCFWTenant represents the model of a pcfwtenant
type PCFWTenant struct {
	// AWS Account ID.
	AWSAccountID string `json:"AWSAccountID" msgpack:"AWSAccountID" bson:"awsaccountid" mapstructure:"AWSAccountID,omitempty"`

	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// NGFW external ID.
	NGFWExternalID string `json:"NGFWExternalID" msgpack:"NGFWExternalID" bson:"ngfwexternalid" mapstructure:"NGFWExternalID,omitempty"`

	// NGFW tenant ID.
	NGFWTenantID string `json:"NGFWTenantID" msgpack:"NGFWTenantID" bson:"ngfwtenantid" mapstructure:"NGFWTenantID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// AWS rulestack decryption role ARN.
	DecryptionRoleARN string `json:"decryptionRoleARN" msgpack:"decryptionRoleARN" bson:"decryptionrolearn" mapstructure:"decryptionRoleARN,omitempty"`

	// AWS endpoint role ARN.
	EndpointRoleARN string `json:"endpointRoleARN" msgpack:"endpointRoleARN" bson:"endpointrolearn" mapstructure:"endpointRoleARN,omitempty"`

	// The log destination for logging.
	LogDestination string `json:"logDestination" msgpack:"logDestination" bson:"logdestination" mapstructure:"logDestination,omitempty"`

	// AWS logging role ARN.
	LoggingRoleARN string `json:"loggingRoleARN" msgpack:"loggingRoleARN" bson:"loggingrolearn" mapstructure:"loggingRoleARN,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The timestamp when offboarding pending started.
	OffboardingTimestamp time.Time `json:"-" msgpack:"-" bson:"offboardingtimestamp" mapstructure:"-,omitempty"`

	// status of tenant.
	Status PCFWTenantStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// status failure reason.
	StatusReason string `json:"statusReason" msgpack:"statusReason" bson:"statusreason" mapstructure:"statusReason,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPCFWTenant returns a new *PCFWTenant
func NewPCFWTenant() *PCFWTenant {

	return &PCFWTenant{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PCFWTenant) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PCFWTenant) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PCFWTenant) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWTenant) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPCFWTenant{}

	s.AWSAccountID = o.AWSAccountID
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.NGFWExternalID = o.NGFWExternalID
	s.NGFWTenantID = o.NGFWTenantID
	s.CreateTime = o.CreateTime
	s.DecryptionRoleARN = o.DecryptionRoleARN
	s.EndpointRoleARN = o.EndpointRoleARN
	s.LogDestination = o.LogDestination
	s.LoggingRoleARN = o.LoggingRoleARN
	s.Namespace = o.Namespace
	s.OffboardingTimestamp = o.OffboardingTimestamp
	s.Status = o.Status
	s.StatusReason = o.StatusReason
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWTenant) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPCFWTenant{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AWSAccountID = s.AWSAccountID
	o.ID = s.ID.Hex()
	o.NGFWExternalID = s.NGFWExternalID
	o.NGFWTenantID = s.NGFWTenantID
	o.CreateTime = s.CreateTime
	o.DecryptionRoleARN = s.DecryptionRoleARN
	o.EndpointRoleARN = s.EndpointRoleARN
	o.LogDestination = s.LogDestination
	o.LoggingRoleARN = s.LoggingRoleARN
	o.Namespace = s.Namespace
	o.OffboardingTimestamp = s.OffboardingTimestamp
	o.Status = s.Status
	o.StatusReason = s.StatusReason
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PCFWTenant) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PCFWTenant) BleveType() string {

	return "pcfwtenant"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PCFWTenant) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PCFWTenant) Doc() string {

	return `Represents Prisma Cloud Firewall Tenant.`
}

func (o *PCFWTenant) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *PCFWTenant) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *PCFWTenant) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *PCFWTenant) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *PCFWTenant) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *PCFWTenant) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *PCFWTenant) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PCFWTenant) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePCFWTenant{
			AWSAccountID:         &o.AWSAccountID,
			ID:                   &o.ID,
			NGFWExternalID:       &o.NGFWExternalID,
			NGFWTenantID:         &o.NGFWTenantID,
			CreateTime:           &o.CreateTime,
			DecryptionRoleARN:    &o.DecryptionRoleARN,
			EndpointRoleARN:      &o.EndpointRoleARN,
			LogDestination:       &o.LogDestination,
			LoggingRoleARN:       &o.LoggingRoleARN,
			Namespace:            &o.Namespace,
			OffboardingTimestamp: &o.OffboardingTimestamp,
			Status:               &o.Status,
			StatusReason:         &o.StatusReason,
			UpdateTime:           &o.UpdateTime,
			ZHash:                &o.ZHash,
			Zone:                 &o.Zone,
		}
	}

	sp := &SparsePCFWTenant{}
	for _, f := range fields {
		switch f {
		case "AWSAccountID":
			sp.AWSAccountID = &(o.AWSAccountID)
		case "ID":
			sp.ID = &(o.ID)
		case "NGFWExternalID":
			sp.NGFWExternalID = &(o.NGFWExternalID)
		case "NGFWTenantID":
			sp.NGFWTenantID = &(o.NGFWTenantID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "decryptionRoleARN":
			sp.DecryptionRoleARN = &(o.DecryptionRoleARN)
		case "endpointRoleARN":
			sp.EndpointRoleARN = &(o.EndpointRoleARN)
		case "logDestination":
			sp.LogDestination = &(o.LogDestination)
		case "loggingRoleARN":
			sp.LoggingRoleARN = &(o.LoggingRoleARN)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "offboardingTimestamp":
			sp.OffboardingTimestamp = &(o.OffboardingTimestamp)
		case "status":
			sp.Status = &(o.Status)
		case "statusReason":
			sp.StatusReason = &(o.StatusReason)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePCFWTenant to the object.
func (o *PCFWTenant) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePCFWTenant)
	if so.AWSAccountID != nil {
		o.AWSAccountID = *so.AWSAccountID
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.NGFWExternalID != nil {
		o.NGFWExternalID = *so.NGFWExternalID
	}
	if so.NGFWTenantID != nil {
		o.NGFWTenantID = *so.NGFWTenantID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DecryptionRoleARN != nil {
		o.DecryptionRoleARN = *so.DecryptionRoleARN
	}
	if so.EndpointRoleARN != nil {
		o.EndpointRoleARN = *so.EndpointRoleARN
	}
	if so.LogDestination != nil {
		o.LogDestination = *so.LogDestination
	}
	if so.LoggingRoleARN != nil {
		o.LoggingRoleARN = *so.LoggingRoleARN
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.OffboardingTimestamp != nil {
		o.OffboardingTimestamp = *so.OffboardingTimestamp
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.StatusReason != nil {
		o.StatusReason = *so.StatusReason
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the PCFWTenant.
func (o *PCFWTenant) DeepCopy() *PCFWTenant {

	if o == nil {
		return nil
	}

	out := &PCFWTenant{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PCFWTenant.
func (o *PCFWTenant) DeepCopyInto(out *PCFWTenant) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PCFWTenant: %s", err))
	}

	*out = *target.(*PCFWTenant)
}

// Validate valides the current information stored into the structure.
func (o *PCFWTenant) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("AWSAccountID", o.AWSAccountID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("decryptionRoleARN", o.DecryptionRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("endpointRoleARN", o.EndpointRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestination", o.LogDestination); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Creating", "Success", "Failed", "Unsubscribe", "UnsubscribePending", "Deleting", "FailedCreatingPrimaryAccount"}, true); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PCFWTenant) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PCFWTenantAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PCFWTenantLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PCFWTenant) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PCFWTenantAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PCFWTenant) ValueForAttribute(name string) any {

	switch name {
	case "AWSAccountID":
		return o.AWSAccountID
	case "ID":
		return o.ID
	case "NGFWExternalID":
		return o.NGFWExternalID
	case "NGFWTenantID":
		return o.NGFWTenantID
	case "createTime":
		return o.CreateTime
	case "decryptionRoleARN":
		return o.DecryptionRoleARN
	case "endpointRoleARN":
		return o.EndpointRoleARN
	case "logDestination":
		return o.LogDestination
	case "loggingRoleARN":
		return o.LoggingRoleARN
	case "namespace":
		return o.Namespace
	case "offboardingTimestamp":
		return o.OffboardingTimestamp
	case "status":
		return o.Status
	case "statusReason":
		return o.StatusReason
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PCFWTenantAttributesMap represents the map of attribute for PCFWTenant.
var PCFWTenantAttributesMap = map[string]elemental.AttributeSpecification{
	"AWSAccountID": {
		AllowedChoices: []string{},
		BSONFieldName:  "awsaccountid",
		ConvertedName:  "AWSAccountID",
		Description:    `AWS Account ID.`,
		Exposed:        true,
		Name:           "AWSAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWExternalID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwexternalid",
		ConvertedName:  "NGFWExternalID",
		Description:    `NGFW external ID.`,
		Exposed:        true,
		Name:           "NGFWExternalID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWTenantID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwtenantid",
		ConvertedName:  "NGFWTenantID",
		Description:    `NGFW tenant ID.`,
		Exposed:        true,
		Name:           "NGFWTenantID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DecryptionRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionrolearn",
		ConvertedName:  "DecryptionRoleARN",
		Description:    `AWS rulestack decryption role ARN.`,
		Exposed:        true,
		Name:           "decryptionRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"EndpointRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointrolearn",
		ConvertedName:  "EndpointRoleARN",
		Description:    `AWS endpoint role ARN.`,
		Exposed:        true,
		Name:           "endpointRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `The log destination for logging.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LoggingRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "loggingrolearn",
		ConvertedName:  "LoggingRoleARN",
		Description:    `AWS logging role ARN.`,
		Exposed:        true,
		Name:           "loggingRoleARN",
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},

	"Status": {
		AllowedChoices: []string{"Creating", "Success", "Failed", "Unsubscribe", "UnsubscribePending", "Deleting", "FailedCreatingPrimaryAccount"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `status of tenant.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"StatusReason": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `status failure reason.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// PCFWTenantLowerCaseAttributesMap represents the map of attribute for PCFWTenant.
var PCFWTenantLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"awsaccountid": {
		AllowedChoices: []string{},
		BSONFieldName:  "awsaccountid",
		ConvertedName:  "AWSAccountID",
		Description:    `AWS Account ID.`,
		Exposed:        true,
		Name:           "AWSAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwexternalid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwexternalid",
		ConvertedName:  "NGFWExternalID",
		Description:    `NGFW external ID.`,
		Exposed:        true,
		Name:           "NGFWExternalID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwtenantid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwtenantid",
		ConvertedName:  "NGFWTenantID",
		Description:    `NGFW tenant ID.`,
		Exposed:        true,
		Name:           "NGFWTenantID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"decryptionrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionrolearn",
		ConvertedName:  "DecryptionRoleARN",
		Description:    `AWS rulestack decryption role ARN.`,
		Exposed:        true,
		Name:           "decryptionRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"endpointrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointrolearn",
		ConvertedName:  "EndpointRoleARN",
		Description:    `AWS endpoint role ARN.`,
		Exposed:        true,
		Name:           "endpointRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logdestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `The log destination for logging.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"loggingrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "loggingrolearn",
		ConvertedName:  "LoggingRoleARN",
		Description:    `AWS logging role ARN.`,
		Exposed:        true,
		Name:           "loggingRoleARN",
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},

	"status": {
		AllowedChoices: []string{"Creating", "Success", "Failed", "Unsubscribe", "UnsubscribePending", "Deleting", "FailedCreatingPrimaryAccount"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `status of tenant.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"statusreason": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `status failure reason.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparsePCFWTenantsList represents a list of SparsePCFWTenants
type SparsePCFWTenantsList []*SparsePCFWTenant

// Identity returns the identity of the objects in the list.
func (o SparsePCFWTenantsList) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Copy returns a pointer to a copy the SparsePCFWTenantsList.
func (o SparsePCFWTenantsList) Copy() elemental.Identifiables {

	copy := append(SparsePCFWTenantsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePCFWTenantsList.
func (o SparsePCFWTenantsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePCFWTenantsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePCFWTenant))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePCFWTenantsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePCFWTenantsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePCFWTenantsList converted to PCFWTenantsList.
func (o SparsePCFWTenantsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePCFWTenantsList) Version() int {

	return 1
}

// SparsePCFWTenant represents the sparse version of a pcfwtenant.
type SparsePCFWTenant struct {
	// AWS Account ID.
	AWSAccountID *string `json:"AWSAccountID,omitempty" msgpack:"AWSAccountID,omitempty" bson:"awsaccountid,omitempty" mapstructure:"AWSAccountID,omitempty"`

	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// NGFW external ID.
	NGFWExternalID *string `json:"NGFWExternalID,omitempty" msgpack:"NGFWExternalID,omitempty" bson:"ngfwexternalid,omitempty" mapstructure:"NGFWExternalID,omitempty"`

	// NGFW tenant ID.
	NGFWTenantID *string `json:"NGFWTenantID,omitempty" msgpack:"NGFWTenantID,omitempty" bson:"ngfwtenantid,omitempty" mapstructure:"NGFWTenantID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// AWS rulestack decryption role ARN.
	DecryptionRoleARN *string `json:"decryptionRoleARN,omitempty" msgpack:"decryptionRoleARN,omitempty" bson:"decryptionrolearn,omitempty" mapstructure:"decryptionRoleARN,omitempty"`

	// AWS endpoint role ARN.
	EndpointRoleARN *string `json:"endpointRoleARN,omitempty" msgpack:"endpointRoleARN,omitempty" bson:"endpointrolearn,omitempty" mapstructure:"endpointRoleARN,omitempty"`

	// The log destination for logging.
	LogDestination *string `json:"logDestination,omitempty" msgpack:"logDestination,omitempty" bson:"logdestination,omitempty" mapstructure:"logDestination,omitempty"`

	// AWS logging role ARN.
	LoggingRoleARN *string `json:"loggingRoleARN,omitempty" msgpack:"loggingRoleARN,omitempty" bson:"loggingrolearn,omitempty" mapstructure:"loggingRoleARN,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The timestamp when offboarding pending started.
	OffboardingTimestamp *time.Time `json:"-" msgpack:"-" bson:"offboardingtimestamp,omitempty" mapstructure:"-,omitempty"`

	// status of tenant.
	Status *PCFWTenantStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// status failure reason.
	StatusReason *string `json:"statusReason,omitempty" msgpack:"statusReason,omitempty" bson:"statusreason,omitempty" mapstructure:"statusReason,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePCFWTenant returns a new  SparsePCFWTenant.
func NewSparsePCFWTenant() *SparsePCFWTenant {
	return &SparsePCFWTenant{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePCFWTenant) Identity() elemental.Identity {

	return PCFWTenantIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePCFWTenant) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePCFWTenant) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWTenant) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePCFWTenant{}

	if o.AWSAccountID != nil {
		s.AWSAccountID = o.AWSAccountID
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.NGFWExternalID != nil {
		s.NGFWExternalID = o.NGFWExternalID
	}
	if o.NGFWTenantID != nil {
		s.NGFWTenantID = o.NGFWTenantID
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DecryptionRoleARN != nil {
		s.DecryptionRoleARN = o.DecryptionRoleARN
	}
	if o.EndpointRoleARN != nil {
		s.EndpointRoleARN = o.EndpointRoleARN
	}
	if o.LogDestination != nil {
		s.LogDestination = o.LogDestination
	}
	if o.LoggingRoleARN != nil {
		s.LoggingRoleARN = o.LoggingRoleARN
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.OffboardingTimestamp != nil {
		s.OffboardingTimestamp = o.OffboardingTimestamp
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.StatusReason != nil {
		s.StatusReason = o.StatusReason
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWTenant) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePCFWTenant{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.AWSAccountID != nil {
		o.AWSAccountID = s.AWSAccountID
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.NGFWExternalID != nil {
		o.NGFWExternalID = s.NGFWExternalID
	}
	if s.NGFWTenantID != nil {
		o.NGFWTenantID = s.NGFWTenantID
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DecryptionRoleARN != nil {
		o.DecryptionRoleARN = s.DecryptionRoleARN
	}
	if s.EndpointRoleARN != nil {
		o.EndpointRoleARN = s.EndpointRoleARN
	}
	if s.LogDestination != nil {
		o.LogDestination = s.LogDestination
	}
	if s.LoggingRoleARN != nil {
		o.LoggingRoleARN = s.LoggingRoleARN
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.OffboardingTimestamp != nil {
		o.OffboardingTimestamp = s.OffboardingTimestamp
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.StatusReason != nil {
		o.StatusReason = s.StatusReason
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePCFWTenant) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePCFWTenant) ToPlain() elemental.PlainIdentifiable {

	out := NewPCFWTenant()
	if o.AWSAccountID != nil {
		out.AWSAccountID = *o.AWSAccountID
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.NGFWExternalID != nil {
		out.NGFWExternalID = *o.NGFWExternalID
	}
	if o.NGFWTenantID != nil {
		out.NGFWTenantID = *o.NGFWTenantID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DecryptionRoleARN != nil {
		out.DecryptionRoleARN = *o.DecryptionRoleARN
	}
	if o.EndpointRoleARN != nil {
		out.EndpointRoleARN = *o.EndpointRoleARN
	}
	if o.LogDestination != nil {
		out.LogDestination = *o.LogDestination
	}
	if o.LoggingRoleARN != nil {
		out.LoggingRoleARN = *o.LoggingRoleARN
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.OffboardingTimestamp != nil {
		out.OffboardingTimestamp = *o.OffboardingTimestamp
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.StatusReason != nil {
		out.StatusReason = *o.StatusReason
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparsePCFWTenant) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePCFWTenant) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparsePCFWTenant) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparsePCFWTenant) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparsePCFWTenant.
func (o *SparsePCFWTenant) DeepCopy() *SparsePCFWTenant {

	if o == nil {
		return nil
	}

	out := &SparsePCFWTenant{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePCFWTenant.
func (o *SparsePCFWTenant) DeepCopyInto(out *SparsePCFWTenant) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePCFWTenant: %s", err))
	}

	*out = *target.(*SparsePCFWTenant)
}

type mongoAttributesPCFWTenant struct {
	AWSAccountID         string                `bson:"awsaccountid"`
	ID                   bson.ObjectId         `bson:"_id,omitempty"`
	NGFWExternalID       string                `bson:"ngfwexternalid"`
	NGFWTenantID         string                `bson:"ngfwtenantid"`
	CreateTime           time.Time             `bson:"createtime"`
	DecryptionRoleARN    string                `bson:"decryptionrolearn"`
	EndpointRoleARN      string                `bson:"endpointrolearn"`
	LogDestination       string                `bson:"logdestination"`
	LoggingRoleARN       string                `bson:"loggingrolearn"`
	Namespace            string                `bson:"namespace"`
	OffboardingTimestamp time.Time             `bson:"offboardingtimestamp"`
	Status               PCFWTenantStatusValue `bson:"status"`
	StatusReason         string                `bson:"statusreason"`
	UpdateTime           time.Time             `bson:"updatetime"`
	ZHash                int                   `bson:"zhash"`
	Zone                 int                   `bson:"zone"`
}
type mongoAttributesSparsePCFWTenant struct {
	AWSAccountID         *string                `bson:"awsaccountid,omitempty"`
	ID                   bson.ObjectId          `bson:"_id,omitempty"`
	NGFWExternalID       *string                `bson:"ngfwexternalid,omitempty"`
	NGFWTenantID         *string                `bson:"ngfwtenantid,omitempty"`
	CreateTime           *time.Time             `bson:"createtime,omitempty"`
	DecryptionRoleARN    *string                `bson:"decryptionrolearn,omitempty"`
	EndpointRoleARN      *string                `bson:"endpointrolearn,omitempty"`
	LogDestination       *string                `bson:"logdestination,omitempty"`
	LoggingRoleARN       *string                `bson:"loggingrolearn,omitempty"`
	Namespace            *string                `bson:"namespace,omitempty"`
	OffboardingTimestamp *time.Time             `bson:"offboardingtimestamp,omitempty"`
	Status               *PCFWTenantStatusValue `bson:"status,omitempty"`
	StatusReason         *string                `bson:"statusreason,omitempty"`
	UpdateTime           *time.Time             `bson:"updatetime,omitempty"`
	ZHash                *int                   `bson:"zhash,omitempty"`
	Zone                 *int                   `bson:"zone,omitempty"`
}
