// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallCountryCodelistIdentity represents the Identity of the object.
var FirewallCountryCodelistIdentity = elemental.Identity{
	Name:     "firewallcountrycodelist",
	Category: "firewallcountrycodelist",
	Package:  "ngfw",
	Private:  false,
}

// FirewallCountryCodelistsList represents a list of FirewallCountryCodelists
type FirewallCountryCodelistsList []*FirewallCountryCodelist

// Identity returns the identity of the objects in the list.
func (o FirewallCountryCodelistsList) Identity() elemental.Identity {

	return FirewallCountryCodelistIdentity
}

// Copy returns a pointer to a copy the FirewallCountryCodelistsList.
func (o FirewallCountryCodelistsList) Copy() elemental.Identifiables {

	out := append(FirewallCountryCodelistsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the FirewallCountryCodelistsList.
func (o FirewallCountryCodelistsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallCountryCodelistsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallCountryCodelist))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallCountryCodelistsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallCountryCodelistsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the FirewallCountryCodelistsList converted to SparseFirewallCountryCodelistsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallCountryCodelistsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallCountryCodelistsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallCountryCodelist)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallCountryCodelistsList) Version() int {

	return 1
}

// FirewallCountryCodelist represents the model of a firewallcountrycodelist
type FirewallCountryCodelist struct {
	// A list of NGFW Country codes.
	Countrycodes []*FirewallCountryCode `json:"countrycodes" msgpack:"countrycodes" bson:"countrycodes" mapstructure:"countrycodes,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallCountryCodelist returns a new *FirewallCountryCodelist
func NewFirewallCountryCodelist() *FirewallCountryCodelist {

	return &FirewallCountryCodelist{
		ModelVersion: 1,
		Countrycodes: []*FirewallCountryCode{},
	}
}

// Identity returns the Identity of the object.
func (o *FirewallCountryCodelist) Identity() elemental.Identity {

	return FirewallCountryCodelistIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallCountryCodelist) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallCountryCodelist) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallCountryCodelist) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallCountryCodelist{}

	s.Countrycodes = o.Countrycodes
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallCountryCodelist) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallCountryCodelist{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Countrycodes = s.Countrycodes
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallCountryCodelist) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallCountryCodelist) BleveType() string {

	return "firewallcountrycodelist"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallCountryCodelist) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *FirewallCountryCodelist) Doc() string {

	return `A list of NGFW Country codes.`
}

func (o *FirewallCountryCodelist) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallCountryCodelist) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallCountryCodelist) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallCountryCodelist) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallCountryCodelist{
			Countrycodes: &o.Countrycodes,
			Namespace:    &o.Namespace,
		}
	}

	sp := &SparseFirewallCountryCodelist{}
	for _, f := range fields {
		switch f {
		case "countrycodes":
			sp.Countrycodes = &(o.Countrycodes)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallCountryCodelist to the object.
func (o *FirewallCountryCodelist) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallCountryCodelist)
	if so.Countrycodes != nil {
		o.Countrycodes = *so.Countrycodes
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
}

// DeepCopy returns a deep copy if the FirewallCountryCodelist.
func (o *FirewallCountryCodelist) DeepCopy() *FirewallCountryCodelist {

	if o == nil {
		return nil
	}

	out := &FirewallCountryCodelist{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallCountryCodelist.
func (o *FirewallCountryCodelist) DeepCopyInto(out *FirewallCountryCodelist) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallCountryCodelist: %s", err))
	}

	*out = *target.(*FirewallCountryCodelist)
}

// Validate valides the current information stored into the structure.
func (o *FirewallCountryCodelist) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Countrycodes {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallCountryCodelist) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallCountryCodelistAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallCountryCodelistLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallCountryCodelist) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallCountryCodelistAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallCountryCodelist) ValueForAttribute(name string) any {

	switch name {
	case "countrycodes":
		return o.Countrycodes
	case "namespace":
		return o.Namespace
	}

	return nil
}

// FirewallCountryCodelistAttributesMap represents the map of attribute for FirewallCountryCodelist.
var FirewallCountryCodelistAttributesMap = map[string]elemental.AttributeSpecification{
	"Countrycodes": {
		AllowedChoices: []string{},
		BSONFieldName:  "countrycodes",
		ConvertedName:  "Countrycodes",
		Description:    `A list of NGFW Country codes.`,
		Exposed:        true,
		Name:           "countrycodes",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "firewallcountrycode",
		Type:           "refList",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// FirewallCountryCodelistLowerCaseAttributesMap represents the map of attribute for FirewallCountryCodelist.
var FirewallCountryCodelistLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"countrycodes": {
		AllowedChoices: []string{},
		BSONFieldName:  "countrycodes",
		ConvertedName:  "Countrycodes",
		Description:    `A list of NGFW Country codes.`,
		Exposed:        true,
		Name:           "countrycodes",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "firewallcountrycode",
		Type:           "refList",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// SparseFirewallCountryCodelistsList represents a list of SparseFirewallCountryCodelists
type SparseFirewallCountryCodelistsList []*SparseFirewallCountryCodelist

// Identity returns the identity of the objects in the list.
func (o SparseFirewallCountryCodelistsList) Identity() elemental.Identity {

	return FirewallCountryCodelistIdentity
}

// Copy returns a pointer to a copy the SparseFirewallCountryCodelistsList.
func (o SparseFirewallCountryCodelistsList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallCountryCodelistsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallCountryCodelistsList.
func (o SparseFirewallCountryCodelistsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallCountryCodelistsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallCountryCodelist))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallCountryCodelistsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallCountryCodelistsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseFirewallCountryCodelistsList converted to FirewallCountryCodelistsList.
func (o SparseFirewallCountryCodelistsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallCountryCodelistsList) Version() int {

	return 1
}

// SparseFirewallCountryCodelist represents the sparse version of a firewallcountrycodelist.
type SparseFirewallCountryCodelist struct {
	// A list of NGFW Country codes.
	Countrycodes *[]*FirewallCountryCode `json:"countrycodes,omitempty" msgpack:"countrycodes,omitempty" bson:"countrycodes,omitempty" mapstructure:"countrycodes,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallCountryCodelist returns a new  SparseFirewallCountryCodelist.
func NewSparseFirewallCountryCodelist() *SparseFirewallCountryCodelist {
	return &SparseFirewallCountryCodelist{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallCountryCodelist) Identity() elemental.Identity {

	return FirewallCountryCodelistIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallCountryCodelist) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallCountryCodelist) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallCountryCodelist) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallCountryCodelist{}

	if o.Countrycodes != nil {
		s.Countrycodes = o.Countrycodes
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallCountryCodelist) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallCountryCodelist{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Countrycodes != nil {
		o.Countrycodes = s.Countrycodes
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallCountryCodelist) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallCountryCodelist) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallCountryCodelist()
	if o.Countrycodes != nil {
		out.Countrycodes = *o.Countrycodes
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallCountryCodelist) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallCountryCodelist) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseFirewallCountryCodelist.
func (o *SparseFirewallCountryCodelist) DeepCopy() *SparseFirewallCountryCodelist {

	if o == nil {
		return nil
	}

	out := &SparseFirewallCountryCodelist{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallCountryCodelist.
func (o *SparseFirewallCountryCodelist) DeepCopyInto(out *SparseFirewallCountryCodelist) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallCountryCodelist: %s", err))
	}

	*out = *target.(*SparseFirewallCountryCodelist)
}

type mongoAttributesFirewallCountryCodelist struct {
	Countrycodes []*FirewallCountryCode `bson:"countrycodes"`
	Namespace    string                 `bson:"namespace"`
}
type mongoAttributesSparseFirewallCountryCodelist struct {
	Countrycodes *[]*FirewallCountryCode `bson:"countrycodes,omitempty"`
	Namespace    *string                 `bson:"namespace,omitempty"`
}
