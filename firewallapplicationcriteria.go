// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallApplicationCriteria represents the model of a firewallapplicationcriteria
type FirewallApplicationCriteria struct {
	// List of NGFW App IDs.  See AppIDList.
	AppIDs []string `json:"appIDs" msgpack:"appIDs" bson:"appids" mapstructure:"appIDs,omitempty"`

	// A list of FirewallApplicationGroup IDs.
	ApplicationGroupIDs []string `json:"applicationGroupIDs" msgpack:"applicationGroupIDs" bson:"applicationgroupids" mapstructure:"applicationGroupIDs,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallApplicationCriteria returns a new *FirewallApplicationCriteria
func NewFirewallApplicationCriteria() *FirewallApplicationCriteria {

	return &FirewallApplicationCriteria{
		ModelVersion:        1,
		AppIDs:              []string{},
		ApplicationGroupIDs: []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallApplicationCriteria) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallApplicationCriteria{}

	s.AppIDs = o.AppIDs
	s.ApplicationGroupIDs = o.ApplicationGroupIDs

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallApplicationCriteria) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallApplicationCriteria{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AppIDs = s.AppIDs
	o.ApplicationGroupIDs = s.ApplicationGroupIDs

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallApplicationCriteria) BleveType() string {

	return "firewallapplicationcriteria"
}

// DeepCopy returns a deep copy if the FirewallApplicationCriteria.
func (o *FirewallApplicationCriteria) DeepCopy() *FirewallApplicationCriteria {

	if o == nil {
		return nil
	}

	out := &FirewallApplicationCriteria{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallApplicationCriteria.
func (o *FirewallApplicationCriteria) DeepCopyInto(out *FirewallApplicationCriteria) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallApplicationCriteria: %s", err))
	}

	*out = *target.(*FirewallApplicationCriteria)
}

// Validate valides the current information stored into the structure.
func (o *FirewallApplicationCriteria) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallApplicationCriteria) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallApplicationCriteriaAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallApplicationCriteriaLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallApplicationCriteria) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallApplicationCriteriaAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallApplicationCriteria) ValueForAttribute(name string) any {

	switch name {
	case "appIDs":
		return o.AppIDs
	case "applicationGroupIDs":
		return o.ApplicationGroupIDs
	}

	return nil
}

// FirewallApplicationCriteriaAttributesMap represents the map of attribute for FirewallApplicationCriteria.
var FirewallApplicationCriteriaAttributesMap = map[string]elemental.AttributeSpecification{
	"AppIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "appids",
		ConvertedName:  "AppIDs",
		Description:    `List of NGFW App IDs.  See AppIDList.`,
		Exposed:        true,
		Name:           "appIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"ApplicationGroupIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "applicationgroupids",
		ConvertedName:  "ApplicationGroupIDs",
		Description:    `A list of FirewallApplicationGroup IDs.`,
		Exposed:        true,
		Name:           "applicationGroupIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

// FirewallApplicationCriteriaLowerCaseAttributesMap represents the map of attribute for FirewallApplicationCriteria.
var FirewallApplicationCriteriaLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"appids": {
		AllowedChoices: []string{},
		BSONFieldName:  "appids",
		ConvertedName:  "AppIDs",
		Description:    `List of NGFW App IDs.  See AppIDList.`,
		Exposed:        true,
		Name:           "appIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"applicationgroupids": {
		AllowedChoices: []string{},
		BSONFieldName:  "applicationgroupids",
		ConvertedName:  "ApplicationGroupIDs",
		Description:    `A list of FirewallApplicationGroup IDs.`,
		Exposed:        true,
		Name:           "applicationGroupIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
}

type mongoAttributesFirewallApplicationCriteria struct {
	AppIDs              []string `bson:"appids"`
	ApplicationGroupIDs []string `bson:"applicationgroupids"`
}
