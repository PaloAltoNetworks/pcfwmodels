// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// MirrorFilter represents the model of a mirrorfilter
type MirrorFilter struct {
	// AWS network services to be mirrored.
	NetworkServices []string `json:"networkServices" msgpack:"networkServices" bson:"networkservices" mapstructure:"networkServices,omitempty"`

	// A list of mirror filter rules.
	Rules []*MirrorRule `json:"rules" msgpack:"rules" bson:"rules" mapstructure:"rules,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewMirrorFilter returns a new *MirrorFilter
func NewMirrorFilter() *MirrorFilter {

	return &MirrorFilter{
		ModelVersion:    1,
		NetworkServices: []string{},
		Rules:           []*MirrorRule{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MirrorFilter) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesMirrorFilter{}

	s.NetworkServices = o.NetworkServices
	s.Rules = o.Rules

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *MirrorFilter) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesMirrorFilter{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.NetworkServices = s.NetworkServices
	o.Rules = s.Rules

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *MirrorFilter) BleveType() string {

	return "mirrorfilter"
}

// DeepCopy returns a deep copy if the MirrorFilter.
func (o *MirrorFilter) DeepCopy() *MirrorFilter {

	if o == nil {
		return nil
	}

	out := &MirrorFilter{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *MirrorFilter.
func (o *MirrorFilter) DeepCopyInto(out *MirrorFilter) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy MirrorFilter: %s", err))
	}

	*out = *target.(*MirrorFilter)
}

// Validate valides the current information stored into the structure.
func (o *MirrorFilter) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateAwsNetworkServices("networkServices", o.NetworkServices); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.Rules {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := ValidateMirrorRules("rules", o.Rules); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*MirrorFilter) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := MirrorFilterAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return MirrorFilterLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*MirrorFilter) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return MirrorFilterAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *MirrorFilter) ValueForAttribute(name string) any {

	switch name {
	case "networkServices":
		return o.NetworkServices
	case "rules":
		return o.Rules
	}

	return nil
}

// MirrorFilterAttributesMap represents the map of attribute for MirrorFilter.
var MirrorFilterAttributesMap = map[string]elemental.AttributeSpecification{
	"NetworkServices": {
		AllowedChoices: []string{},
		BSONFieldName:  "networkservices",
		ConvertedName:  "NetworkServices",
		Description:    `AWS network services to be mirrored.`,
		Exposed:        true,
		Name:           "networkServices",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Rules": {
		AllowedChoices: []string{},
		BSONFieldName:  "rules",
		ConvertedName:  "Rules",
		Description:    `A list of mirror filter rules.`,
		Exposed:        true,
		Name:           "rules",
		Stored:         true,
		SubType:        "mirrorrule",
		Type:           "refList",
	},
}

// MirrorFilterLowerCaseAttributesMap represents the map of attribute for MirrorFilter.
var MirrorFilterLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"networkservices": {
		AllowedChoices: []string{},
		BSONFieldName:  "networkservices",
		ConvertedName:  "NetworkServices",
		Description:    `AWS network services to be mirrored.`,
		Exposed:        true,
		Name:           "networkServices",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"rules": {
		AllowedChoices: []string{},
		BSONFieldName:  "rules",
		ConvertedName:  "Rules",
		Description:    `A list of mirror filter rules.`,
		Exposed:        true,
		Name:           "rules",
		Stored:         true,
		SubType:        "mirrorrule",
		Type:           "refList",
	},
}

type mongoAttributesMirrorFilter struct {
	NetworkServices []string      `bson:"networkservices"`
	Rules           []*MirrorRule `bson:"rules"`
}
