// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallExternalFeedFeedtypeValue represents the possible values for attribute "feedtype".
type FirewallExternalFeedFeedtypeValue string

const (
	// FirewallExternalFeedFeedtypeIPList represents the value IPList.
	FirewallExternalFeedFeedtypeIPList FirewallExternalFeedFeedtypeValue = "IPList"

	// FirewallExternalFeedFeedtypeURLList represents the value URLList.
	FirewallExternalFeedFeedtypeURLList FirewallExternalFeedFeedtypeValue = "URLList"
)

// FirewallExternalFeed represents the model of a firewallexternalfeed
type FirewallExternalFeed struct {
	// The type of external feed.
	Feedtype FirewallExternalFeedFeedtypeValue `json:"feedtype" msgpack:"feedtype" bson:"feedtype" mapstructure:"feedtype,omitempty"`

	// External feed name.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallExternalFeed returns a new *FirewallExternalFeed
func NewFirewallExternalFeed() *FirewallExternalFeed {

	return &FirewallExternalFeed{
		ModelVersion: 1,
		Feedtype:     FirewallExternalFeedFeedtypeIPList,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallExternalFeed) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallExternalFeed{}

	s.Feedtype = o.Feedtype
	s.Name = o.Name

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallExternalFeed) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallExternalFeed{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Feedtype = s.Feedtype
	o.Name = s.Name

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallExternalFeed) BleveType() string {

	return "firewallexternalfeed"
}

// DeepCopy returns a deep copy if the FirewallExternalFeed.
func (o *FirewallExternalFeed) DeepCopy() *FirewallExternalFeed {

	if o == nil {
		return nil
	}

	out := &FirewallExternalFeed{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallExternalFeed.
func (o *FirewallExternalFeed) DeepCopyInto(out *FirewallExternalFeed) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallExternalFeed: %s", err))
	}

	*out = *target.(*FirewallExternalFeed)
}

// Validate valides the current information stored into the structure.
func (o *FirewallExternalFeed) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("feedtype", string(o.Feedtype), []string{"IPList", "URLList"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallExternalFeed) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallExternalFeedAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallExternalFeedLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallExternalFeed) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallExternalFeedAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallExternalFeed) ValueForAttribute(name string) interface{} {

	switch name {
	case "feedtype":
		return o.Feedtype
	case "name":
		return o.Name
	}

	return nil
}

// FirewallExternalFeedAttributesMap represents the map of attribute for FirewallExternalFeed.
var FirewallExternalFeedAttributesMap = map[string]elemental.AttributeSpecification{
	"Feedtype": {
		AllowedChoices: []string{"IPList", "URLList"},
		BSONFieldName:  "feedtype",
		ConvertedName:  "Feedtype",
		DefaultValue:   FirewallExternalFeedFeedtypeIPList,
		Description:    `The type of external feed.`,
		Exposed:        true,
		Name:           "feedtype",
		Stored:         true,
		Type:           "enum",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `External feed name.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// FirewallExternalFeedLowerCaseAttributesMap represents the map of attribute for FirewallExternalFeed.
var FirewallExternalFeedLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"feedtype": {
		AllowedChoices: []string{"IPList", "URLList"},
		BSONFieldName:  "feedtype",
		ConvertedName:  "Feedtype",
		DefaultValue:   FirewallExternalFeedFeedtypeIPList,
		Description:    `The type of external feed.`,
		Exposed:        true,
		Name:           "feedtype",
		Stored:         true,
		Type:           "enum",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `External feed name.`,
		Exposed:        true,
		Name:           "name",
		ReadOnly:       true,
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesFirewallExternalFeed struct {
	Feedtype FirewallExternalFeedFeedtypeValue `bson:"feedtype"`
	Name     string                            `bson:"name"`
}
