// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// LogDebugIdentity represents the Identity of the object.
var LogDebugIdentity = elemental.Identity{
	Name:     "logdebug",
	Category: "logdebugs",
	Package:  "logging",
	Private:  false,
}

// LogDebugsList represents a list of LogDebugs
type LogDebugsList []*LogDebug

// Identity returns the identity of the objects in the list.
func (o LogDebugsList) Identity() elemental.Identity {

	return LogDebugIdentity
}

// Copy returns a pointer to a copy the LogDebugsList.
func (o LogDebugsList) Copy() elemental.Identifiables {

	out := append(LogDebugsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the LogDebugsList.
func (o LogDebugsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(LogDebugsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*LogDebug))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o LogDebugsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o LogDebugsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the LogDebugsList converted to SparseLogDebugsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o LogDebugsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseLogDebugsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseLogDebug)
	}

	return out
}

// Version returns the version of the content.
func (o LogDebugsList) Version() int {

	return 1
}

// LogDebug represents the model of a logdebug
type LogDebug struct {
	// The command to perform.
	Command string `json:"command" msgpack:"command" bson:"-" mapstructure:"command,omitempty"`

	// The NGFW name.
	FirewallName string `json:"firewallName" msgpack:"firewallName" bson:"-" mapstructure:"firewallName,omitempty"`

	// Additional information returned to caller.
	Information string `json:"information" msgpack:"information" bson:"-" mapstructure:"information,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewLogDebug returns a new *LogDebug
func NewLogDebug() *LogDebug {

	return &LogDebug{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *LogDebug) Identity() elemental.Identity {

	return LogDebugIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *LogDebug) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *LogDebug) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogDebug) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesLogDebug{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *LogDebug) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesLogDebug{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *LogDebug) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *LogDebug) BleveType() string {

	return "logdebug"
}

// DefaultOrder returns the list of default ordering fields.
func (o *LogDebug) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *LogDebug) Doc() string {

	return `Get debug information or initiate debug commands.`
}

func (o *LogDebug) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *LogDebug) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseLogDebug{
			Command:      &o.Command,
			FirewallName: &o.FirewallName,
			Information:  &o.Information,
		}
	}

	sp := &SparseLogDebug{}
	for _, f := range fields {
		switch f {
		case "command":
			sp.Command = &(o.Command)
		case "firewallName":
			sp.FirewallName = &(o.FirewallName)
		case "information":
			sp.Information = &(o.Information)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseLogDebug to the object.
func (o *LogDebug) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseLogDebug)
	if so.Command != nil {
		o.Command = *so.Command
	}
	if so.FirewallName != nil {
		o.FirewallName = *so.FirewallName
	}
	if so.Information != nil {
		o.Information = *so.Information
	}
}

// DeepCopy returns a deep copy if the LogDebug.
func (o *LogDebug) DeepCopy() *LogDebug {

	if o == nil {
		return nil
	}

	out := &LogDebug{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *LogDebug.
func (o *LogDebug) DeepCopyInto(out *LogDebug) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy LogDebug: %s", err))
	}

	*out = *target.(*LogDebug)
}

// Validate valides the current information stored into the structure.
func (o *LogDebug) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*LogDebug) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := LogDebugAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return LogDebugLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*LogDebug) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return LogDebugAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *LogDebug) ValueForAttribute(name string) any {

	switch name {
	case "command":
		return o.Command
	case "firewallName":
		return o.FirewallName
	case "information":
		return o.Information
	}

	return nil
}

// LogDebugAttributesMap represents the map of attribute for LogDebug.
var LogDebugAttributesMap = map[string]elemental.AttributeSpecification{
	"Command": {
		AllowedChoices: []string{},
		ConvertedName:  "Command",
		Description:    `The command to perform.`,
		Exposed:        true,
		Name:           "command",
		Type:           "string",
	},
	"FirewallName": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Type:           "string",
	},
	"Information": {
		AllowedChoices: []string{},
		ConvertedName:  "Information",
		Description:    `Additional information returned to caller.`,
		Exposed:        true,
		Name:           "information",
		ReadOnly:       true,
		Type:           "string",
	},
}

// LogDebugLowerCaseAttributesMap represents the map of attribute for LogDebug.
var LogDebugLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"command": {
		AllowedChoices: []string{},
		ConvertedName:  "Command",
		Description:    `The command to perform.`,
		Exposed:        true,
		Name:           "command",
		Type:           "string",
	},
	"firewallname": {
		AllowedChoices: []string{},
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Type:           "string",
	},
	"information": {
		AllowedChoices: []string{},
		ConvertedName:  "Information",
		Description:    `Additional information returned to caller.`,
		Exposed:        true,
		Name:           "information",
		ReadOnly:       true,
		Type:           "string",
	},
}

// SparseLogDebugsList represents a list of SparseLogDebugs
type SparseLogDebugsList []*SparseLogDebug

// Identity returns the identity of the objects in the list.
func (o SparseLogDebugsList) Identity() elemental.Identity {

	return LogDebugIdentity
}

// Copy returns a pointer to a copy the SparseLogDebugsList.
func (o SparseLogDebugsList) Copy() elemental.Identifiables {

	copy := append(SparseLogDebugsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseLogDebugsList.
func (o SparseLogDebugsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseLogDebugsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseLogDebug))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseLogDebugsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseLogDebugsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseLogDebugsList converted to LogDebugsList.
func (o SparseLogDebugsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseLogDebugsList) Version() int {

	return 1
}

// SparseLogDebug represents the sparse version of a logdebug.
type SparseLogDebug struct {
	// The command to perform.
	Command *string `json:"command,omitempty" msgpack:"command,omitempty" bson:"-" mapstructure:"command,omitempty"`

	// The NGFW name.
	FirewallName *string `json:"firewallName,omitempty" msgpack:"firewallName,omitempty" bson:"-" mapstructure:"firewallName,omitempty"`

	// Additional information returned to caller.
	Information *string `json:"information,omitempty" msgpack:"information,omitempty" bson:"-" mapstructure:"information,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseLogDebug returns a new  SparseLogDebug.
func NewSparseLogDebug() *SparseLogDebug {
	return &SparseLogDebug{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseLogDebug) Identity() elemental.Identity {

	return LogDebugIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseLogDebug) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseLogDebug) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogDebug) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseLogDebug{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseLogDebug) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseLogDebug{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseLogDebug) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseLogDebug) ToPlain() elemental.PlainIdentifiable {

	out := NewLogDebug()
	if o.Command != nil {
		out.Command = *o.Command
	}
	if o.FirewallName != nil {
		out.FirewallName = *o.FirewallName
	}
	if o.Information != nil {
		out.Information = *o.Information
	}

	return out
}

// DeepCopy returns a deep copy if the SparseLogDebug.
func (o *SparseLogDebug) DeepCopy() *SparseLogDebug {

	if o == nil {
		return nil
	}

	out := &SparseLogDebug{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseLogDebug.
func (o *SparseLogDebug) DeepCopyInto(out *SparseLogDebug) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseLogDebug: %s", err))
	}

	*out = *target.(*SparseLogDebug)
}

type mongoAttributesLogDebug struct {
}
type mongoAttributesSparseLogDebug struct {
}
