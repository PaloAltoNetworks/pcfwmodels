// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallOptionRegion represents the model of a firewalloptionregion
type FirewallOptionRegion struct {
	// List of VPCs and their associated availability zones.
	VPCAvailabilityZones []*FirewallOptionVPC `json:"VPCAvailabilityZones" msgpack:"VPCAvailabilityZones" bson:"-" mapstructure:"VPCAvailabilityZones,omitempty"`

	// The AWS region of the VPCs.
	Region string `json:"region" msgpack:"region" bson:"-" mapstructure:"region,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallOptionRegion returns a new *FirewallOptionRegion
func NewFirewallOptionRegion() *FirewallOptionRegion {

	return &FirewallOptionRegion{
		ModelVersion:         1,
		VPCAvailabilityZones: []*FirewallOptionVPC{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallOptionRegion) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallOptionRegion{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallOptionRegion) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallOptionRegion{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallOptionRegion) BleveType() string {

	return "firewalloptionregion"
}

// DeepCopy returns a deep copy if the FirewallOptionRegion.
func (o *FirewallOptionRegion) DeepCopy() *FirewallOptionRegion {

	if o == nil {
		return nil
	}

	out := &FirewallOptionRegion{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallOptionRegion.
func (o *FirewallOptionRegion) DeepCopyInto(out *FirewallOptionRegion) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallOptionRegion: %s", err))
	}

	*out = *target.(*FirewallOptionRegion)
}

// Validate valides the current information stored into the structure.
func (o *FirewallOptionRegion) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.VPCAvailabilityZones {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallOptionRegion) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallOptionRegionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallOptionRegionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallOptionRegion) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallOptionRegionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallOptionRegion) ValueForAttribute(name string) any {

	switch name {
	case "VPCAvailabilityZones":
		return o.VPCAvailabilityZones
	case "region":
		return o.Region
	}

	return nil
}

// FirewallOptionRegionAttributesMap represents the map of attribute for FirewallOptionRegion.
var FirewallOptionRegionAttributesMap = map[string]elemental.AttributeSpecification{
	"VPCAvailabilityZones": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "VPCAvailabilityZones",
		Description:    `List of VPCs and their associated availability zones.`,
		Exposed:        true,
		Name:           "VPCAvailabilityZones",
		ReadOnly:       true,
		SubType:        "firewalloptionvpc",
		Type:           "refList",
	},
	"Region": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Region",
		Description:    `The AWS region of the VPCs.`,
		Exposed:        true,
		Name:           "region",
		ReadOnly:       true,
		Type:           "string",
	},
}

// FirewallOptionRegionLowerCaseAttributesMap represents the map of attribute for FirewallOptionRegion.
var FirewallOptionRegionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"vpcavailabilityzones": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "VPCAvailabilityZones",
		Description:    `List of VPCs and their associated availability zones.`,
		Exposed:        true,
		Name:           "VPCAvailabilityZones",
		ReadOnly:       true,
		SubType:        "firewalloptionvpc",
		Type:           "refList",
	},
	"region": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Region",
		Description:    `The AWS region of the VPCs.`,
		Exposed:        true,
		Name:           "region",
		ReadOnly:       true,
		Type:           "string",
	},
}

type mongoAttributesFirewallOptionRegion struct {
}
