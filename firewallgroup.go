// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallGroupIdentity represents the Identity of the object.
var FirewallGroupIdentity = elemental.Identity{
	Name:     "firewallgroup",
	Category: "firewallgroups",
	Package:  "ngfw",
	Private:  false,
}

// FirewallGroupsList represents a list of FirewallGroups
type FirewallGroupsList []*FirewallGroup

// Identity returns the identity of the objects in the list.
func (o FirewallGroupsList) Identity() elemental.Identity {

	return FirewallGroupIdentity
}

// Copy returns a pointer to a copy the FirewallGroupsList.
func (o FirewallGroupsList) Copy() elemental.Identifiables {

	out := append(FirewallGroupsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the FirewallGroupsList.
func (o FirewallGroupsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallGroupsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallGroup))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallGroupsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallGroupsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the FirewallGroupsList converted to SparseFirewallGroupsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallGroupsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallGroupsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallGroup)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallGroupsList) Version() int {

	return 1
}

// FirewallGroup represents the model of a firewallgroup
type FirewallGroup struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Stores additional information about an entity.
	Annotations map[string][]string `json:"annotations" msgpack:"annotations" bson:"annotations" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags []string `json:"associatedTags" msgpack:"associatedTags" bson:"associatedtags" mapstructure:"associatedTags,omitempty"`

	// A profile used to attach newly created firewalls to this firewall group.
	AutoIncludeProfile *FirewallAutoIncludeProfile `json:"autoIncludeProfile" msgpack:"autoIncludeProfile" bson:"autoincludeprofile" mapstructure:"autoIncludeProfile,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey string `json:"-" msgpack:"-" bson:"createidempotencykey" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// A FirewallSecurityProfile ID.
	FirewallSecurityProfileID string `json:"firewallSecurityProfileID" msgpack:"firewallSecurityProfileID" bson:"firewallsecurityprofileid" mapstructure:"firewallSecurityProfileID,omitempty"`

	// A FirewallTemplate ID.
	FirewallTemplateID string `json:"firewallTemplateID" msgpack:"firewallTemplateID" bson:"firewalltemplateid" mapstructure:"firewallTemplateID,omitempty"`

	// Log Definition ID.
	LogDefinitionID string `json:"logDefinitionID" msgpack:"logDefinitionID" bson:"logdefinitionid" mapstructure:"logDefinitionID,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags []string `json:"normalizedTags" msgpack:"normalizedTags" bson:"normalizedtags" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected bool `json:"protected" msgpack:"protected" bson:"protected" mapstructure:"protected,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey string `json:"-" msgpack:"-" bson:"updateidempotencykey" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallGroup returns a new *FirewallGroup
func NewFirewallGroup() *FirewallGroup {

	return &FirewallGroup{
		ModelVersion:       1,
		Annotations:        map[string][]string{},
		AssociatedTags:     []string{},
		AutoIncludeProfile: NewFirewallAutoIncludeProfile(),
		NormalizedTags:     []string{},
	}
}

// Identity returns the Identity of the object.
func (o *FirewallGroup) Identity() elemental.Identity {

	return FirewallGroupIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallGroup) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallGroup) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallGroup) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallGroup{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Annotations = o.Annotations
	s.AssociatedTags = o.AssociatedTags
	s.AutoIncludeProfile = o.AutoIncludeProfile
	s.CreateIdempotencyKey = o.CreateIdempotencyKey
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.FirewallSecurityProfileID = o.FirewallSecurityProfileID
	s.FirewallTemplateID = o.FirewallTemplateID
	s.LogDefinitionID = o.LogDefinitionID
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.NormalizedTags = o.NormalizedTags
	s.Protected = o.Protected
	s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallGroup) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallGroup{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Annotations = s.Annotations
	o.AssociatedTags = s.AssociatedTags
	o.AutoIncludeProfile = s.AutoIncludeProfile
	o.CreateIdempotencyKey = s.CreateIdempotencyKey
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.FirewallSecurityProfileID = s.FirewallSecurityProfileID
	o.FirewallTemplateID = s.FirewallTemplateID
	o.LogDefinitionID = s.LogDefinitionID
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.NormalizedTags = s.NormalizedTags
	o.Protected = s.Protected
	o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallGroup) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallGroup) BleveType() string {

	return "firewallgroup"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallGroup) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *FirewallGroup) Doc() string {

	return `Represents common configuration for 1 or more AWSFirewall objects.`
}

func (o *FirewallGroup) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetAnnotations returns the Annotations of the receiver.
func (o *FirewallGroup) GetAnnotations() map[string][]string {

	return o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the given value.
func (o *FirewallGroup) SetAnnotations(annotations map[string][]string) {

	o.Annotations = annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *FirewallGroup) GetAssociatedTags() []string {

	return o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the given value.
func (o *FirewallGroup) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *FirewallGroup) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *FirewallGroup) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetDescription returns the Description of the receiver.
func (o *FirewallGroup) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *FirewallGroup) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *FirewallGroup) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *FirewallGroup) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallGroup) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallGroup) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *FirewallGroup) GetNormalizedTags() []string {

	return o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the given value.
func (o *FirewallGroup) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *FirewallGroup) GetProtected() bool {

	return o.Protected
}

// SetProtected sets the property Protected of the receiver using the given value.
func (o *FirewallGroup) SetProtected(protected bool) {

	o.Protected = protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *FirewallGroup) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *FirewallGroup) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallGroup) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallGroup{
			ID:                        &o.ID,
			Annotations:               &o.Annotations,
			AssociatedTags:            &o.AssociatedTags,
			AutoIncludeProfile:        o.AutoIncludeProfile,
			CreateIdempotencyKey:      &o.CreateIdempotencyKey,
			CreateTime:                &o.CreateTime,
			Description:               &o.Description,
			FirewallSecurityProfileID: &o.FirewallSecurityProfileID,
			FirewallTemplateID:        &o.FirewallTemplateID,
			LogDefinitionID:           &o.LogDefinitionID,
			Name:                      &o.Name,
			Namespace:                 &o.Namespace,
			NormalizedTags:            &o.NormalizedTags,
			Protected:                 &o.Protected,
			UpdateIdempotencyKey:      &o.UpdateIdempotencyKey,
			UpdateTime:                &o.UpdateTime,
			ZHash:                     &o.ZHash,
			Zone:                      &o.Zone,
		}
	}

	sp := &SparseFirewallGroup{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "associatedTags":
			sp.AssociatedTags = &(o.AssociatedTags)
		case "autoIncludeProfile":
			sp.AutoIncludeProfile = o.AutoIncludeProfile
		case "createIdempotencyKey":
			sp.CreateIdempotencyKey = &(o.CreateIdempotencyKey)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "firewallSecurityProfileID":
			sp.FirewallSecurityProfileID = &(o.FirewallSecurityProfileID)
		case "firewallTemplateID":
			sp.FirewallTemplateID = &(o.FirewallTemplateID)
		case "logDefinitionID":
			sp.LogDefinitionID = &(o.LogDefinitionID)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "normalizedTags":
			sp.NormalizedTags = &(o.NormalizedTags)
		case "protected":
			sp.Protected = &(o.Protected)
		case "updateIdempotencyKey":
			sp.UpdateIdempotencyKey = &(o.UpdateIdempotencyKey)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallGroup to the object.
func (o *FirewallGroup) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallGroup)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.AssociatedTags != nil {
		o.AssociatedTags = *so.AssociatedTags
	}
	if so.AutoIncludeProfile != nil {
		o.AutoIncludeProfile = so.AutoIncludeProfile
	}
	if so.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = *so.CreateIdempotencyKey
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.FirewallSecurityProfileID != nil {
		o.FirewallSecurityProfileID = *so.FirewallSecurityProfileID
	}
	if so.FirewallTemplateID != nil {
		o.FirewallTemplateID = *so.FirewallTemplateID
	}
	if so.LogDefinitionID != nil {
		o.LogDefinitionID = *so.LogDefinitionID
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NormalizedTags != nil {
		o.NormalizedTags = *so.NormalizedTags
	}
	if so.Protected != nil {
		o.Protected = *so.Protected
	}
	if so.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = *so.UpdateIdempotencyKey
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the FirewallGroup.
func (o *FirewallGroup) DeepCopy() *FirewallGroup {

	if o == nil {
		return nil
	}

	out := &FirewallGroup{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallGroup.
func (o *FirewallGroup) DeepCopyInto(out *FirewallGroup) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallGroup: %s", err))
	}

	*out = *target.(*FirewallGroup)
}

// Validate valides the current information stored into the structure.
func (o *FirewallGroup) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateTagsWithoutReservedPrefixes("associatedTags", o.AssociatedTags); err != nil {
		errors = errors.Append(err)
	}

	if o.AutoIncludeProfile != nil {
		elemental.ResetDefaultForZeroValues(o.AutoIncludeProfile)
		if err := o.AutoIncludeProfile.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallGroup) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallGroupAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallGroupLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallGroup) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallGroupAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallGroup) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "annotations":
		return o.Annotations
	case "associatedTags":
		return o.AssociatedTags
	case "autoIncludeProfile":
		return o.AutoIncludeProfile
	case "createIdempotencyKey":
		return o.CreateIdempotencyKey
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "firewallSecurityProfileID":
		return o.FirewallSecurityProfileID
	case "firewallTemplateID":
		return o.FirewallTemplateID
	case "logDefinitionID":
		return o.LogDefinitionID
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "normalizedTags":
		return o.NormalizedTags
	case "protected":
		return o.Protected
	case "updateIdempotencyKey":
		return o.UpdateIdempotencyKey
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// FirewallGroupAttributesMap represents the map of attribute for FirewallGroup.
var FirewallGroupAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"AssociatedTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"AutoIncludeProfile": {
		AllowedChoices: []string{},
		BSONFieldName:  "autoincludeprofile",
		ConvertedName:  "AutoIncludeProfile",
		Description:    `A profile used to attach newly created firewalls to this firewall group.`,
		Exposed:        true,
		Name:           "autoIncludeProfile",
		Stored:         true,
		SubType:        "firewallautoincludeprofile",
		Type:           "ref",
	},

	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"FirewallSecurityProfileID": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallsecurityprofileid",
		ConvertedName:  "FirewallSecurityProfileID",
		Description:    `A FirewallSecurityProfile ID.`,
		Exposed:        true,
		Name:           "firewallSecurityProfileID",
		Stored:         true,
		Type:           "string",
	},
	"FirewallTemplateID": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewalltemplateid",
		ConvertedName:  "FirewallTemplateID",
		Description:    `A FirewallTemplate ID.`,
		Exposed:        true,
		Name:           "firewallTemplateID",
		Stored:         true,
		Type:           "string",
	},
	"LogDefinitionID": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdefinitionid",
		ConvertedName:  "LogDefinitionID",
		Description:    `Log Definition ID.`,
		Exposed:        true,
		Name:           "logDefinitionID",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NormalizedTags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"Protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},

	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// FirewallGroupLowerCaseAttributesMap represents the map of attribute for FirewallGroup.
var FirewallGroupLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"associatedtags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"autoincludeprofile": {
		AllowedChoices: []string{},
		BSONFieldName:  "autoincludeprofile",
		ConvertedName:  "AutoIncludeProfile",
		Description:    `A profile used to attach newly created firewalls to this firewall group.`,
		Exposed:        true,
		Name:           "autoIncludeProfile",
		Stored:         true,
		SubType:        "firewallautoincludeprofile",
		Type:           "ref",
	},

	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"firewallsecurityprofileid": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallsecurityprofileid",
		ConvertedName:  "FirewallSecurityProfileID",
		Description:    `A FirewallSecurityProfile ID.`,
		Exposed:        true,
		Name:           "firewallSecurityProfileID",
		Stored:         true,
		Type:           "string",
	},
	"firewalltemplateid": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewalltemplateid",
		ConvertedName:  "FirewallTemplateID",
		Description:    `A FirewallTemplate ID.`,
		Exposed:        true,
		Name:           "firewallTemplateID",
		Stored:         true,
		Type:           "string",
	},
	"logdefinitionid": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdefinitionid",
		ConvertedName:  "LogDefinitionID",
		Description:    `Log Definition ID.`,
		Exposed:        true,
		Name:           "logDefinitionID",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"normalizedtags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},

	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseFirewallGroupsList represents a list of SparseFirewallGroups
type SparseFirewallGroupsList []*SparseFirewallGroup

// Identity returns the identity of the objects in the list.
func (o SparseFirewallGroupsList) Identity() elemental.Identity {

	return FirewallGroupIdentity
}

// Copy returns a pointer to a copy the SparseFirewallGroupsList.
func (o SparseFirewallGroupsList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallGroupsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallGroupsList.
func (o SparseFirewallGroupsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallGroupsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallGroup))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallGroupsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallGroupsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparseFirewallGroupsList converted to FirewallGroupsList.
func (o SparseFirewallGroupsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallGroupsList) Version() int {

	return 1
}

// SparseFirewallGroup represents the sparse version of a firewallgroup.
type SparseFirewallGroup struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Stores additional information about an entity.
	Annotations *map[string][]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags *[]string `json:"associatedTags,omitempty" msgpack:"associatedTags,omitempty" bson:"associatedtags,omitempty" mapstructure:"associatedTags,omitempty"`

	// A profile used to attach newly created firewalls to this firewall group.
	AutoIncludeProfile *FirewallAutoIncludeProfile `json:"autoIncludeProfile,omitempty" msgpack:"autoIncludeProfile,omitempty" bson:"autoincludeprofile,omitempty" mapstructure:"autoIncludeProfile,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey *string `json:"-" msgpack:"-" bson:"createidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// A FirewallSecurityProfile ID.
	FirewallSecurityProfileID *string `json:"firewallSecurityProfileID,omitempty" msgpack:"firewallSecurityProfileID,omitempty" bson:"firewallsecurityprofileid,omitempty" mapstructure:"firewallSecurityProfileID,omitempty"`

	// A FirewallTemplate ID.
	FirewallTemplateID *string `json:"firewallTemplateID,omitempty" msgpack:"firewallTemplateID,omitempty" bson:"firewalltemplateid,omitempty" mapstructure:"firewallTemplateID,omitempty"`

	// Log Definition ID.
	LogDefinitionID *string `json:"logDefinitionID,omitempty" msgpack:"logDefinitionID,omitempty" bson:"logdefinitionid,omitempty" mapstructure:"logDefinitionID,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags *[]string `json:"normalizedTags,omitempty" msgpack:"normalizedTags,omitempty" bson:"normalizedtags,omitempty" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected *bool `json:"protected,omitempty" msgpack:"protected,omitempty" bson:"protected,omitempty" mapstructure:"protected,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey *string `json:"-" msgpack:"-" bson:"updateidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallGroup returns a new  SparseFirewallGroup.
func NewSparseFirewallGroup() *SparseFirewallGroup {
	return &SparseFirewallGroup{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallGroup) Identity() elemental.Identity {

	return FirewallGroupIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallGroup) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallGroup) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallGroup) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallGroup{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.AssociatedTags != nil {
		s.AssociatedTags = o.AssociatedTags
	}
	if o.AutoIncludeProfile != nil {
		s.AutoIncludeProfile = o.AutoIncludeProfile
	}
	if o.CreateIdempotencyKey != nil {
		s.CreateIdempotencyKey = o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.FirewallSecurityProfileID != nil {
		s.FirewallSecurityProfileID = o.FirewallSecurityProfileID
	}
	if o.FirewallTemplateID != nil {
		s.FirewallTemplateID = o.FirewallTemplateID
	}
	if o.LogDefinitionID != nil {
		s.LogDefinitionID = o.LogDefinitionID
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NormalizedTags != nil {
		s.NormalizedTags = o.NormalizedTags
	}
	if o.Protected != nil {
		s.Protected = o.Protected
	}
	if o.UpdateIdempotencyKey != nil {
		s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallGroup) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallGroup{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.AssociatedTags != nil {
		o.AssociatedTags = s.AssociatedTags
	}
	if s.AutoIncludeProfile != nil {
		o.AutoIncludeProfile = s.AutoIncludeProfile
	}
	if s.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = s.CreateIdempotencyKey
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.FirewallSecurityProfileID != nil {
		o.FirewallSecurityProfileID = s.FirewallSecurityProfileID
	}
	if s.FirewallTemplateID != nil {
		o.FirewallTemplateID = s.FirewallTemplateID
	}
	if s.LogDefinitionID != nil {
		o.LogDefinitionID = s.LogDefinitionID
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NormalizedTags != nil {
		o.NormalizedTags = s.NormalizedTags
	}
	if s.Protected != nil {
		o.Protected = s.Protected
	}
	if s.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallGroup) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallGroup) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallGroup()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.AssociatedTags != nil {
		out.AssociatedTags = *o.AssociatedTags
	}
	if o.AutoIncludeProfile != nil {
		out.AutoIncludeProfile = o.AutoIncludeProfile
	}
	if o.CreateIdempotencyKey != nil {
		out.CreateIdempotencyKey = *o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.FirewallSecurityProfileID != nil {
		out.FirewallSecurityProfileID = *o.FirewallSecurityProfileID
	}
	if o.FirewallTemplateID != nil {
		out.FirewallTemplateID = *o.FirewallTemplateID
	}
	if o.LogDefinitionID != nil {
		out.LogDefinitionID = *o.LogDefinitionID
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NormalizedTags != nil {
		out.NormalizedTags = *o.NormalizedTags
	}
	if o.Protected != nil {
		out.Protected = *o.Protected
	}
	if o.UpdateIdempotencyKey != nil {
		out.UpdateIdempotencyKey = *o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetAnnotations returns the Annotations of the receiver.
func (o *SparseFirewallGroup) GetAnnotations() (out map[string][]string) {

	if o.Annotations == nil {
		return
	}

	return *o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetAnnotations(annotations map[string][]string) {

	o.Annotations = &annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *SparseFirewallGroup) GetAssociatedTags() (out []string) {

	if o.AssociatedTags == nil {
		return
	}

	return *o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = &associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseFirewallGroup) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetDescription returns the Description of the receiver.
func (o *SparseFirewallGroup) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparseFirewallGroup) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallGroup) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *SparseFirewallGroup) GetNormalizedTags() (out []string) {

	if o.NormalizedTags == nil {
		return
	}

	return *o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = &normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *SparseFirewallGroup) GetProtected() (out bool) {

	if o.Protected == nil {
		return
	}

	return *o.Protected
}

// SetProtected sets the property Protected of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetProtected(protected bool) {

	o.Protected = &protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseFirewallGroup) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseFirewallGroup) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseFirewallGroup.
func (o *SparseFirewallGroup) DeepCopy() *SparseFirewallGroup {

	if o == nil {
		return nil
	}

	out := &SparseFirewallGroup{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallGroup.
func (o *SparseFirewallGroup) DeepCopyInto(out *SparseFirewallGroup) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallGroup: %s", err))
	}

	*out = *target.(*SparseFirewallGroup)
}

type mongoAttributesFirewallGroup struct {
	ID                        bson.ObjectId               `bson:"_id,omitempty"`
	Annotations               map[string][]string         `bson:"annotations"`
	AssociatedTags            []string                    `bson:"associatedtags"`
	AutoIncludeProfile        *FirewallAutoIncludeProfile `bson:"autoincludeprofile"`
	CreateIdempotencyKey      string                      `bson:"createidempotencykey"`
	CreateTime                time.Time                   `bson:"createtime"`
	Description               string                      `bson:"description"`
	FirewallSecurityProfileID string                      `bson:"firewallsecurityprofileid"`
	FirewallTemplateID        string                      `bson:"firewalltemplateid"`
	LogDefinitionID           string                      `bson:"logdefinitionid"`
	Name                      string                      `bson:"name"`
	Namespace                 string                      `bson:"namespace"`
	NormalizedTags            []string                    `bson:"normalizedtags"`
	Protected                 bool                        `bson:"protected"`
	UpdateIdempotencyKey      string                      `bson:"updateidempotencykey"`
	UpdateTime                time.Time                   `bson:"updatetime"`
	ZHash                     int                         `bson:"zhash"`
	Zone                      int                         `bson:"zone"`
}
type mongoAttributesSparseFirewallGroup struct {
	ID                        bson.ObjectId               `bson:"_id,omitempty"`
	Annotations               *map[string][]string        `bson:"annotations,omitempty"`
	AssociatedTags            *[]string                   `bson:"associatedtags,omitempty"`
	AutoIncludeProfile        *FirewallAutoIncludeProfile `bson:"autoincludeprofile,omitempty"`
	CreateIdempotencyKey      *string                     `bson:"createidempotencykey,omitempty"`
	CreateTime                *time.Time                  `bson:"createtime,omitempty"`
	Description               *string                     `bson:"description,omitempty"`
	FirewallSecurityProfileID *string                     `bson:"firewallsecurityprofileid,omitempty"`
	FirewallTemplateID        *string                     `bson:"firewalltemplateid,omitempty"`
	LogDefinitionID           *string                     `bson:"logdefinitionid,omitempty"`
	Name                      *string                     `bson:"name,omitempty"`
	Namespace                 *string                     `bson:"namespace,omitempty"`
	NormalizedTags            *[]string                   `bson:"normalizedtags,omitempty"`
	Protected                 *bool                       `bson:"protected,omitempty"`
	UpdateIdempotencyKey      *string                     `bson:"updateidempotencykey,omitempty"`
	UpdateTime                *time.Time                  `bson:"updatetime,omitempty"`
	ZHash                     *int                        `bson:"zhash,omitempty"`
	Zone                      *int                        `bson:"zone,omitempty"`
}
