// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// PCFWAccountMirrorSourceIdentity represents the Identity of the object.
var PCFWAccountMirrorSourceIdentity = elemental.Identity{
	Name:     "pcfwaccountmirrorsource",
	Category: "pcfwaccountmirrorsources",
	Package:  "deploymentadvisor",
	Private:  false,
}

// PCFWAccountMirrorSourcesList represents a list of PCFWAccountMirrorSources
type PCFWAccountMirrorSourcesList []*PCFWAccountMirrorSource

// Identity returns the identity of the objects in the list.
func (o PCFWAccountMirrorSourcesList) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceIdentity
}

// Copy returns a pointer to a copy the PCFWAccountMirrorSourcesList.
func (o PCFWAccountMirrorSourcesList) Copy() elemental.Identifiables {

	copy := append(PCFWAccountMirrorSourcesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the PCFWAccountMirrorSourcesList.
func (o PCFWAccountMirrorSourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PCFWAccountMirrorSourcesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PCFWAccountMirrorSource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PCFWAccountMirrorSourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PCFWAccountMirrorSourcesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the PCFWAccountMirrorSourcesList converted to SparsePCFWAccountMirrorSourcesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PCFWAccountMirrorSourcesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePCFWAccountMirrorSourcesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePCFWAccountMirrorSource)
	}

	return out
}

// Version returns the version of the content.
func (o PCFWAccountMirrorSourcesList) Version() int {

	return 1
}

// PCFWAccountMirrorSource represents the model of a pcfwaccountmirrorsource
type PCFWAccountMirrorSource struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The list of all VPC IDs where traffic is to be monitored.
	VPCIDs []string `json:"VPCIDs" msgpack:"VPCIDs" bson:"vpcids" mapstructure:"VPCIDs,omitempty"`

	// The list of all autoscaling group names where instances are to be monitored.
	AutoScalingGroupNames []string `json:"autoScalingGroupNames" msgpack:"autoScalingGroupNames" bson:"autoscalinggroupnames" mapstructure:"autoScalingGroupNames,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Whether or not perform dynamic updates in customer VPC e.g. for creating
	// mirroring policies on new instances.
	DynamicPolicyUpdateEnabled bool `json:"dynamicPolicyUpdateEnabled" msgpack:"dynamicPolicyUpdateEnabled" bson:"dynamicpolicyupdateenabled" mapstructure:"dynamicPolicyUpdateEnabled,omitempty"`

	// Whether or not any required endpoint for any VPC is absent.
	EndpointAbsent bool `json:"endpointAbsent" msgpack:"endpointAbsent" bson:"-" mapstructure:"endpointAbsent,omitempty"`

	// Traffic mirror filter to specify what traffic is to be mirrored.
	Filter *MirrorFilter `json:"filter" msgpack:"filter" bson:"filter" mapstructure:"filter,omitempty"`

	// The list of all instance IDs where traffic is to be monitored.
	InstanceIDs []string `json:"instanceIDs" msgpack:"instanceIDs" bson:"instanceids" mapstructure:"instanceIDs,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPCFWAccountMirrorSource returns a new *PCFWAccountMirrorSource
func NewPCFWAccountMirrorSource() *PCFWAccountMirrorSource {

	return &PCFWAccountMirrorSource{
		ModelVersion:               1,
		VPCIDs:                     []string{},
		AutoScalingGroupNames:      []string{},
		DynamicPolicyUpdateEnabled: true,
		Filter:                     NewMirrorFilter(),
		InstanceIDs:                []string{},
	}
}

// Identity returns the Identity of the object.
func (o *PCFWAccountMirrorSource) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PCFWAccountMirrorSource) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PCFWAccountMirrorSource) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWAccountMirrorSource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPCFWAccountMirrorSource{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.VPCIDs = o.VPCIDs
	s.AutoScalingGroupNames = o.AutoScalingGroupNames
	s.Description = o.Description
	s.DynamicPolicyUpdateEnabled = o.DynamicPolicyUpdateEnabled
	s.Filter = o.Filter
	s.InstanceIDs = o.InstanceIDs
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWAccountMirrorSource) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPCFWAccountMirrorSource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.VPCIDs = s.VPCIDs
	o.AutoScalingGroupNames = s.AutoScalingGroupNames
	o.Description = s.Description
	o.DynamicPolicyUpdateEnabled = s.DynamicPolicyUpdateEnabled
	o.Filter = s.Filter
	o.InstanceIDs = s.InstanceIDs
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PCFWAccountMirrorSource) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PCFWAccountMirrorSource) BleveType() string {

	return "pcfwaccountmirrorsource"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PCFWAccountMirrorSource) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *PCFWAccountMirrorSource) Doc() string {

	return `Represents the traffic mirror source configuration for a firewall associatd with
a customer account.`
}

func (o *PCFWAccountMirrorSource) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetDescription returns the Description of the receiver.
func (o *PCFWAccountMirrorSource) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *PCFWAccountMirrorSource) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *PCFWAccountMirrorSource) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *PCFWAccountMirrorSource) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *PCFWAccountMirrorSource) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *PCFWAccountMirrorSource) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PCFWAccountMirrorSource) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePCFWAccountMirrorSource{
			ID:                         &o.ID,
			VPCIDs:                     &o.VPCIDs,
			AutoScalingGroupNames:      &o.AutoScalingGroupNames,
			Description:                &o.Description,
			DynamicPolicyUpdateEnabled: &o.DynamicPolicyUpdateEnabled,
			EndpointAbsent:             &o.EndpointAbsent,
			Filter:                     o.Filter,
			InstanceIDs:                &o.InstanceIDs,
			Name:                       &o.Name,
			Namespace:                  &o.Namespace,
			ZHash:                      &o.ZHash,
			Zone:                       &o.Zone,
		}
	}

	sp := &SparsePCFWAccountMirrorSource{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "VPCIDs":
			sp.VPCIDs = &(o.VPCIDs)
		case "autoScalingGroupNames":
			sp.AutoScalingGroupNames = &(o.AutoScalingGroupNames)
		case "description":
			sp.Description = &(o.Description)
		case "dynamicPolicyUpdateEnabled":
			sp.DynamicPolicyUpdateEnabled = &(o.DynamicPolicyUpdateEnabled)
		case "endpointAbsent":
			sp.EndpointAbsent = &(o.EndpointAbsent)
		case "filter":
			sp.Filter = o.Filter
		case "instanceIDs":
			sp.InstanceIDs = &(o.InstanceIDs)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePCFWAccountMirrorSource to the object.
func (o *PCFWAccountMirrorSource) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePCFWAccountMirrorSource)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.VPCIDs != nil {
		o.VPCIDs = *so.VPCIDs
	}
	if so.AutoScalingGroupNames != nil {
		o.AutoScalingGroupNames = *so.AutoScalingGroupNames
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.DynamicPolicyUpdateEnabled != nil {
		o.DynamicPolicyUpdateEnabled = *so.DynamicPolicyUpdateEnabled
	}
	if so.EndpointAbsent != nil {
		o.EndpointAbsent = *so.EndpointAbsent
	}
	if so.Filter != nil {
		o.Filter = so.Filter
	}
	if so.InstanceIDs != nil {
		o.InstanceIDs = *so.InstanceIDs
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the PCFWAccountMirrorSource.
func (o *PCFWAccountMirrorSource) DeepCopy() *PCFWAccountMirrorSource {

	if o == nil {
		return nil
	}

	out := &PCFWAccountMirrorSource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PCFWAccountMirrorSource.
func (o *PCFWAccountMirrorSource) DeepCopyInto(out *PCFWAccountMirrorSource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PCFWAccountMirrorSource: %s", err))
	}

	*out = *target.(*PCFWAccountMirrorSource)
}

// Validate valides the current information stored into the structure.
func (o *PCFWAccountMirrorSource) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if o.Filter != nil {
		elemental.ResetDefaultForZeroValues(o.Filter)
		if err := o.Filter.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PCFWAccountMirrorSource) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PCFWAccountMirrorSourceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PCFWAccountMirrorSourceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PCFWAccountMirrorSource) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PCFWAccountMirrorSourceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PCFWAccountMirrorSource) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "VPCIDs":
		return o.VPCIDs
	case "autoScalingGroupNames":
		return o.AutoScalingGroupNames
	case "description":
		return o.Description
	case "dynamicPolicyUpdateEnabled":
		return o.DynamicPolicyUpdateEnabled
	case "endpointAbsent":
		return o.EndpointAbsent
	case "filter":
		return o.Filter
	case "instanceIDs":
		return o.InstanceIDs
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PCFWAccountMirrorSourceAttributesMap represents the map of attribute for PCFWAccountMirrorSource.
var PCFWAccountMirrorSourceAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"VPCIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcids",
		ConvertedName:  "VPCIDs",
		Description:    `The list of all VPC IDs where traffic is to be monitored.`,
		Exposed:        true,
		Name:           "VPCIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"AutoScalingGroupNames": {
		AllowedChoices: []string{},
		BSONFieldName:  "autoscalinggroupnames",
		ConvertedName:  "AutoScalingGroupNames",
		Description:    `The list of all autoscaling group names where instances are to be monitored.`,
		Exposed:        true,
		Name:           "autoScalingGroupNames",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"DynamicPolicyUpdateEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "dynamicpolicyupdateenabled",
		ConvertedName:  "DynamicPolicyUpdateEnabled",
		DefaultValue:   true,
		Description: `Whether or not perform dynamic updates in customer VPC e.g. for creating
mirroring policies on new instances.`,
		Exposed: true,
		Name:    "dynamicPolicyUpdateEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"EndpointAbsent": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "EndpointAbsent",
		Description:    `Whether or not any required endpoint for any VPC is absent.`,
		Exposed:        true,
		Name:           "endpointAbsent",
		Type:           "boolean",
	},
	"Filter": {
		AllowedChoices: []string{},
		BSONFieldName:  "filter",
		ConvertedName:  "Filter",
		Description:    `Traffic mirror filter to specify what traffic is to be mirrored.`,
		Exposed:        true,
		Name:           "filter",
		Stored:         true,
		SubType:        "mirrorfilter",
		Type:           "ref",
	},
	"InstanceIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceids",
		ConvertedName:  "InstanceIDs",
		Description:    `The list of all instance IDs where traffic is to be monitored.`,
		Exposed:        true,
		Name:           "instanceIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// PCFWAccountMirrorSourceLowerCaseAttributesMap represents the map of attribute for PCFWAccountMirrorSource.
var PCFWAccountMirrorSourceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"vpcids": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcids",
		ConvertedName:  "VPCIDs",
		Description:    `The list of all VPC IDs where traffic is to be monitored.`,
		Exposed:        true,
		Name:           "VPCIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"autoscalinggroupnames": {
		AllowedChoices: []string{},
		BSONFieldName:  "autoscalinggroupnames",
		ConvertedName:  "AutoScalingGroupNames",
		Description:    `The list of all autoscaling group names where instances are to be monitored.`,
		Exposed:        true,
		Name:           "autoScalingGroupNames",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"dynamicpolicyupdateenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "dynamicpolicyupdateenabled",
		ConvertedName:  "DynamicPolicyUpdateEnabled",
		DefaultValue:   true,
		Description: `Whether or not perform dynamic updates in customer VPC e.g. for creating
mirroring policies on new instances.`,
		Exposed: true,
		Name:    "dynamicPolicyUpdateEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"endpointabsent": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "EndpointAbsent",
		Description:    `Whether or not any required endpoint for any VPC is absent.`,
		Exposed:        true,
		Name:           "endpointAbsent",
		Type:           "boolean",
	},
	"filter": {
		AllowedChoices: []string{},
		BSONFieldName:  "filter",
		ConvertedName:  "Filter",
		Description:    `Traffic mirror filter to specify what traffic is to be mirrored.`,
		Exposed:        true,
		Name:           "filter",
		Stored:         true,
		SubType:        "mirrorfilter",
		Type:           "ref",
	},
	"instanceids": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceids",
		ConvertedName:  "InstanceIDs",
		Description:    `The list of all instance IDs where traffic is to be monitored.`,
		Exposed:        true,
		Name:           "instanceIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// SparsePCFWAccountMirrorSourcesList represents a list of SparsePCFWAccountMirrorSources
type SparsePCFWAccountMirrorSourcesList []*SparsePCFWAccountMirrorSource

// Identity returns the identity of the objects in the list.
func (o SparsePCFWAccountMirrorSourcesList) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceIdentity
}

// Copy returns a pointer to a copy the SparsePCFWAccountMirrorSourcesList.
func (o SparsePCFWAccountMirrorSourcesList) Copy() elemental.Identifiables {

	copy := append(SparsePCFWAccountMirrorSourcesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePCFWAccountMirrorSourcesList.
func (o SparsePCFWAccountMirrorSourcesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePCFWAccountMirrorSourcesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePCFWAccountMirrorSource))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePCFWAccountMirrorSourcesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePCFWAccountMirrorSourcesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparsePCFWAccountMirrorSourcesList converted to PCFWAccountMirrorSourcesList.
func (o SparsePCFWAccountMirrorSourcesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePCFWAccountMirrorSourcesList) Version() int {

	return 1
}

// SparsePCFWAccountMirrorSource represents the sparse version of a pcfwaccountmirrorsource.
type SparsePCFWAccountMirrorSource struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The list of all VPC IDs where traffic is to be monitored.
	VPCIDs *[]string `json:"VPCIDs,omitempty" msgpack:"VPCIDs,omitempty" bson:"vpcids,omitempty" mapstructure:"VPCIDs,omitempty"`

	// The list of all autoscaling group names where instances are to be monitored.
	AutoScalingGroupNames *[]string `json:"autoScalingGroupNames,omitempty" msgpack:"autoScalingGroupNames,omitempty" bson:"autoscalinggroupnames,omitempty" mapstructure:"autoScalingGroupNames,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Whether or not perform dynamic updates in customer VPC e.g. for creating
	// mirroring policies on new instances.
	DynamicPolicyUpdateEnabled *bool `json:"dynamicPolicyUpdateEnabled,omitempty" msgpack:"dynamicPolicyUpdateEnabled,omitempty" bson:"dynamicpolicyupdateenabled,omitempty" mapstructure:"dynamicPolicyUpdateEnabled,omitempty"`

	// Whether or not any required endpoint for any VPC is absent.
	EndpointAbsent *bool `json:"endpointAbsent,omitempty" msgpack:"endpointAbsent,omitempty" bson:"-" mapstructure:"endpointAbsent,omitempty"`

	// Traffic mirror filter to specify what traffic is to be mirrored.
	Filter *MirrorFilter `json:"filter,omitempty" msgpack:"filter,omitempty" bson:"filter,omitempty" mapstructure:"filter,omitempty"`

	// The list of all instance IDs where traffic is to be monitored.
	InstanceIDs *[]string `json:"instanceIDs,omitempty" msgpack:"instanceIDs,omitempty" bson:"instanceids,omitempty" mapstructure:"instanceIDs,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePCFWAccountMirrorSource returns a new  SparsePCFWAccountMirrorSource.
func NewSparsePCFWAccountMirrorSource() *SparsePCFWAccountMirrorSource {
	return &SparsePCFWAccountMirrorSource{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePCFWAccountMirrorSource) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePCFWAccountMirrorSource) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePCFWAccountMirrorSource) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWAccountMirrorSource) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePCFWAccountMirrorSource{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.VPCIDs != nil {
		s.VPCIDs = o.VPCIDs
	}
	if o.AutoScalingGroupNames != nil {
		s.AutoScalingGroupNames = o.AutoScalingGroupNames
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.DynamicPolicyUpdateEnabled != nil {
		s.DynamicPolicyUpdateEnabled = o.DynamicPolicyUpdateEnabled
	}
	if o.Filter != nil {
		s.Filter = o.Filter
	}
	if o.InstanceIDs != nil {
		s.InstanceIDs = o.InstanceIDs
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWAccountMirrorSource) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePCFWAccountMirrorSource{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.VPCIDs != nil {
		o.VPCIDs = s.VPCIDs
	}
	if s.AutoScalingGroupNames != nil {
		o.AutoScalingGroupNames = s.AutoScalingGroupNames
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.DynamicPolicyUpdateEnabled != nil {
		o.DynamicPolicyUpdateEnabled = s.DynamicPolicyUpdateEnabled
	}
	if s.Filter != nil {
		o.Filter = s.Filter
	}
	if s.InstanceIDs != nil {
		o.InstanceIDs = s.InstanceIDs
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePCFWAccountMirrorSource) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePCFWAccountMirrorSource) ToPlain() elemental.PlainIdentifiable {

	out := NewPCFWAccountMirrorSource()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.VPCIDs != nil {
		out.VPCIDs = *o.VPCIDs
	}
	if o.AutoScalingGroupNames != nil {
		out.AutoScalingGroupNames = *o.AutoScalingGroupNames
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.DynamicPolicyUpdateEnabled != nil {
		out.DynamicPolicyUpdateEnabled = *o.DynamicPolicyUpdateEnabled
	}
	if o.EndpointAbsent != nil {
		out.EndpointAbsent = *o.EndpointAbsent
	}
	if o.Filter != nil {
		out.Filter = o.Filter
	}
	if o.InstanceIDs != nil {
		out.InstanceIDs = *o.InstanceIDs
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetDescription returns the Description of the receiver.
func (o *SparsePCFWAccountMirrorSource) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparsePCFWAccountMirrorSource) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparsePCFWAccountMirrorSource) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparsePCFWAccountMirrorSource) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePCFWAccountMirrorSource) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePCFWAccountMirrorSource) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparsePCFWAccountMirrorSource.
func (o *SparsePCFWAccountMirrorSource) DeepCopy() *SparsePCFWAccountMirrorSource {

	if o == nil {
		return nil
	}

	out := &SparsePCFWAccountMirrorSource{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePCFWAccountMirrorSource.
func (o *SparsePCFWAccountMirrorSource) DeepCopyInto(out *SparsePCFWAccountMirrorSource) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePCFWAccountMirrorSource: %s", err))
	}

	*out = *target.(*SparsePCFWAccountMirrorSource)
}

type mongoAttributesPCFWAccountMirrorSource struct {
	ID                         bson.ObjectId `bson:"_id,omitempty"`
	VPCIDs                     []string      `bson:"vpcids"`
	AutoScalingGroupNames      []string      `bson:"autoscalinggroupnames"`
	Description                string        `bson:"description"`
	DynamicPolicyUpdateEnabled bool          `bson:"dynamicpolicyupdateenabled"`
	Filter                     *MirrorFilter `bson:"filter"`
	InstanceIDs                []string      `bson:"instanceids"`
	Name                       string        `bson:"name"`
	Namespace                  string        `bson:"namespace"`
	ZHash                      int           `bson:"zhash"`
	Zone                       int           `bson:"zone"`
}
type mongoAttributesSparsePCFWAccountMirrorSource struct {
	ID                         bson.ObjectId `bson:"_id,omitempty"`
	VPCIDs                     *[]string     `bson:"vpcids,omitempty"`
	AutoScalingGroupNames      *[]string     `bson:"autoscalinggroupnames,omitempty"`
	Description                *string       `bson:"description,omitempty"`
	DynamicPolicyUpdateEnabled *bool         `bson:"dynamicpolicyupdateenabled,omitempty"`
	Filter                     *MirrorFilter `bson:"filter,omitempty"`
	InstanceIDs                *[]string     `bson:"instanceids,omitempty"`
	Name                       *string       `bson:"name,omitempty"`
	Namespace                  *string       `bson:"namespace,omitempty"`
	ZHash                      *int          `bson:"zhash,omitempty"`
	Zone                       *int          `bson:"zone,omitempty"`
}
