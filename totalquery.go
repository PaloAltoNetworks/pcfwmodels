// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// TotalQueryTotalTypeValue represents the possible values for attribute "totalType".
type TotalQueryTotalTypeValue string

const (
	// TotalQueryTotalTypeEgressBytes represents the value EgressBytes.
	TotalQueryTotalTypeEgressBytes TotalQueryTotalTypeValue = "EgressBytes"

	// TotalQueryTotalTypeIngressBytes represents the value IngressBytes.
	TotalQueryTotalTypeIngressBytes TotalQueryTotalTypeValue = "IngressBytes"

	// TotalQueryTotalTypeThreatsBlocked represents the value ThreatsBlocked.
	TotalQueryTotalTypeThreatsBlocked TotalQueryTotalTypeValue = "ThreatsBlocked"

	// TotalQueryTotalTypeThreatsDetected represents the value ThreatsDetected.
	TotalQueryTotalTypeThreatsDetected TotalQueryTotalTypeValue = "ThreatsDetected"

	// TotalQueryTotalTypeTraffic represents the value Traffic.
	TotalQueryTotalTypeTraffic TotalQueryTotalTypeValue = "Traffic"
)

// TotalQueryIdentity represents the Identity of the object.
var TotalQueryIdentity = elemental.Identity{
	Name:     "totalquery",
	Category: "totalqueries",
	Package:  "logserv",
	Private:  false,
}

// TotalQueriesList represents a list of TotalQueries
type TotalQueriesList []*TotalQuery

// Identity returns the identity of the objects in the list.
func (o TotalQueriesList) Identity() elemental.Identity {

	return TotalQueryIdentity
}

// Copy returns a pointer to a copy the TotalQueriesList.
func (o TotalQueriesList) Copy() elemental.Identifiables {

	copy := append(TotalQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the TotalQueriesList.
func (o TotalQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(TotalQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*TotalQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o TotalQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o TotalQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the TotalQueriesList converted to SparseTotalQueriesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o TotalQueriesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseTotalQueriesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseTotalQuery)
	}

	return out
}

// Version returns the version of the content.
func (o TotalQueriesList) Version() int {

	return 1
}

// TotalQuery represents the model of a totalquery
type TotalQuery struct {
	// The NGFW name.
	FirewallName string `json:"firewallName" msgpack:"firewallName" bson:"firewallname" mapstructure:"firewallName,omitempty"`

	// The count of the specified type.
	Total int `json:"total" msgpack:"total" bson:"-" mapstructure:"total,omitempty"`

	// The type of field to get stats for.
	TotalType TotalQueryTotalTypeValue `json:"totalType" msgpack:"totalType" bson:"-" mapstructure:"totalType,omitempty"`

	// Fastest response time, and cheapest. Only use cached snapshot data, and estimate
	// fractional hours at the ends of the time range.
	UseCacheOnly bool `json:"useCacheOnly" msgpack:"useCacheOnly" bson:"-" mapstructure:"useCacheOnly,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewTotalQuery returns a new *TotalQuery
func NewTotalQuery() *TotalQuery {

	return &TotalQuery{
		ModelVersion: 1,
		UseCacheOnly: true,
	}
}

// Identity returns the Identity of the object.
func (o *TotalQuery) Identity() elemental.Identity {

	return TotalQueryIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *TotalQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *TotalQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TotalQuery) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesTotalQuery{}

	s.FirewallName = o.FirewallName

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *TotalQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesTotalQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.FirewallName = s.FirewallName

	return nil
}

// Version returns the hardcoded version of the model.
func (o *TotalQuery) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *TotalQuery) BleveType() string {

	return "totalquery"
}

// DefaultOrder returns the list of default ordering fields.
func (o *TotalQuery) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *TotalQuery) Doc() string {

	return `Provide counts of various statistics on firewall logs.`
}

func (o *TotalQuery) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *TotalQuery) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseTotalQuery{
			FirewallName: &o.FirewallName,
			Total:        &o.Total,
			TotalType:    &o.TotalType,
			UseCacheOnly: &o.UseCacheOnly,
		}
	}

	sp := &SparseTotalQuery{}
	for _, f := range fields {
		switch f {
		case "firewallName":
			sp.FirewallName = &(o.FirewallName)
		case "total":
			sp.Total = &(o.Total)
		case "totalType":
			sp.TotalType = &(o.TotalType)
		case "useCacheOnly":
			sp.UseCacheOnly = &(o.UseCacheOnly)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseTotalQuery to the object.
func (o *TotalQuery) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseTotalQuery)
	if so.FirewallName != nil {
		o.FirewallName = *so.FirewallName
	}
	if so.Total != nil {
		o.Total = *so.Total
	}
	if so.TotalType != nil {
		o.TotalType = *so.TotalType
	}
	if so.UseCacheOnly != nil {
		o.UseCacheOnly = *so.UseCacheOnly
	}
}

// DeepCopy returns a deep copy if the TotalQuery.
func (o *TotalQuery) DeepCopy() *TotalQuery {

	if o == nil {
		return nil
	}

	out := &TotalQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *TotalQuery.
func (o *TotalQuery) DeepCopyInto(out *TotalQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy TotalQuery: %s", err))
	}

	*out = *target.(*TotalQuery)
}

// Validate valides the current information stored into the structure.
func (o *TotalQuery) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("firewallName", o.FirewallName); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("totalType", string(o.TotalType)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("totalType", string(o.TotalType), []string{"Traffic", "IngressBytes", "EgressBytes", "ThreatsDetected", "ThreatsBlocked"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*TotalQuery) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := TotalQueryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return TotalQueryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*TotalQuery) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return TotalQueryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *TotalQuery) ValueForAttribute(name string) interface{} {

	switch name {
	case "firewallName":
		return o.FirewallName
	case "total":
		return o.Total
	case "totalType":
		return o.TotalType
	case "useCacheOnly":
		return o.UseCacheOnly
	}

	return nil
}

// TotalQueryAttributesMap represents the map of attribute for TotalQuery.
var TotalQueryAttributesMap = map[string]elemental.AttributeSpecification{
	"FirewallName": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallname",
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Total": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Total",
		Description:    `The count of the specified type.`,
		Exposed:        true,
		Name:           "total",
		ReadOnly:       true,
		Type:           "integer",
	},
	"TotalType": {
		AllowedChoices: []string{"Traffic", "IngressBytes", "EgressBytes", "ThreatsDetected", "ThreatsBlocked"},
		ConvertedName:  "TotalType",
		Description:    `The type of field to get stats for.`,
		Exposed:        true,
		Name:           "totalType",
		Required:       true,
		Type:           "enum",
	},
	"UseCacheOnly": {
		AllowedChoices: []string{},
		ConvertedName:  "UseCacheOnly",
		DefaultValue:   true,
		Description: `Fastest response time, and cheapest. Only use cached snapshot data, and estimate
fractional hours at the ends of the time range.`,
		Exposed: true,
		Name:    "useCacheOnly",
		Type:    "boolean",
	},
}

// TotalQueryLowerCaseAttributesMap represents the map of attribute for TotalQuery.
var TotalQueryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"firewallname": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallname",
		ConvertedName:  "FirewallName",
		Description:    `The NGFW name.`,
		Exposed:        true,
		Name:           "firewallName",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"total": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		ConvertedName:  "Total",
		Description:    `The count of the specified type.`,
		Exposed:        true,
		Name:           "total",
		ReadOnly:       true,
		Type:           "integer",
	},
	"totaltype": {
		AllowedChoices: []string{"Traffic", "IngressBytes", "EgressBytes", "ThreatsDetected", "ThreatsBlocked"},
		ConvertedName:  "TotalType",
		Description:    `The type of field to get stats for.`,
		Exposed:        true,
		Name:           "totalType",
		Required:       true,
		Type:           "enum",
	},
	"usecacheonly": {
		AllowedChoices: []string{},
		ConvertedName:  "UseCacheOnly",
		DefaultValue:   true,
		Description: `Fastest response time, and cheapest. Only use cached snapshot data, and estimate
fractional hours at the ends of the time range.`,
		Exposed: true,
		Name:    "useCacheOnly",
		Type:    "boolean",
	},
}

// SparseTotalQueriesList represents a list of SparseTotalQueries
type SparseTotalQueriesList []*SparseTotalQuery

// Identity returns the identity of the objects in the list.
func (o SparseTotalQueriesList) Identity() elemental.Identity {

	return TotalQueryIdentity
}

// Copy returns a pointer to a copy the SparseTotalQueriesList.
func (o SparseTotalQueriesList) Copy() elemental.Identifiables {

	copy := append(SparseTotalQueriesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseTotalQueriesList.
func (o SparseTotalQueriesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseTotalQueriesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseTotalQuery))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseTotalQueriesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseTotalQueriesList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseTotalQueriesList converted to TotalQueriesList.
func (o SparseTotalQueriesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseTotalQueriesList) Version() int {

	return 1
}

// SparseTotalQuery represents the sparse version of a totalquery.
type SparseTotalQuery struct {
	// The NGFW name.
	FirewallName *string `json:"firewallName,omitempty" msgpack:"firewallName,omitempty" bson:"firewallname,omitempty" mapstructure:"firewallName,omitempty"`

	// The count of the specified type.
	Total *int `json:"total,omitempty" msgpack:"total,omitempty" bson:"-" mapstructure:"total,omitempty"`

	// The type of field to get stats for.
	TotalType *TotalQueryTotalTypeValue `json:"totalType,omitempty" msgpack:"totalType,omitempty" bson:"-" mapstructure:"totalType,omitempty"`

	// Fastest response time, and cheapest. Only use cached snapshot data, and estimate
	// fractional hours at the ends of the time range.
	UseCacheOnly *bool `json:"useCacheOnly,omitempty" msgpack:"useCacheOnly,omitempty" bson:"-" mapstructure:"useCacheOnly,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseTotalQuery returns a new  SparseTotalQuery.
func NewSparseTotalQuery() *SparseTotalQuery {
	return &SparseTotalQuery{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseTotalQuery) Identity() elemental.Identity {

	return TotalQueryIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseTotalQuery) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseTotalQuery) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTotalQuery) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseTotalQuery{}

	if o.FirewallName != nil {
		s.FirewallName = o.FirewallName
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseTotalQuery) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseTotalQuery{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.FirewallName != nil {
		o.FirewallName = s.FirewallName
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseTotalQuery) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseTotalQuery) ToPlain() elemental.PlainIdentifiable {

	out := NewTotalQuery()
	if o.FirewallName != nil {
		out.FirewallName = *o.FirewallName
	}
	if o.Total != nil {
		out.Total = *o.Total
	}
	if o.TotalType != nil {
		out.TotalType = *o.TotalType
	}
	if o.UseCacheOnly != nil {
		out.UseCacheOnly = *o.UseCacheOnly
	}

	return out
}

// DeepCopy returns a deep copy if the SparseTotalQuery.
func (o *SparseTotalQuery) DeepCopy() *SparseTotalQuery {

	if o == nil {
		return nil
	}

	out := &SparseTotalQuery{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseTotalQuery.
func (o *SparseTotalQuery) DeepCopyInto(out *SparseTotalQuery) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseTotalQuery: %s", err))
	}

	*out = *target.(*SparseTotalQuery)
}

type mongoAttributesTotalQuery struct {
	FirewallName string `bson:"firewallname"`
}
type mongoAttributesSparseTotalQuery struct {
	FirewallName *string `bson:"firewallname,omitempty"`
}
