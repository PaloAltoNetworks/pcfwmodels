// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallExternalFeedListIdentity represents the Identity of the object.
var FirewallExternalFeedListIdentity = elemental.Identity{
	Name:     "firewallexternalfeedlist",
	Category: "firewallexternalfeedlists",
	Package:  "ngfw",
	Private:  false,
}

// FirewallExternalFeedListsList represents a list of FirewallExternalFeedLists
type FirewallExternalFeedListsList []*FirewallExternalFeedList

// Identity returns the identity of the objects in the list.
func (o FirewallExternalFeedListsList) Identity() elemental.Identity {

	return FirewallExternalFeedListIdentity
}

// Copy returns a pointer to a copy the FirewallExternalFeedListsList.
func (o FirewallExternalFeedListsList) Copy() elemental.Identifiables {

	out := append(FirewallExternalFeedListsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the FirewallExternalFeedListsList.
func (o FirewallExternalFeedListsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallExternalFeedListsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallExternalFeedList))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallExternalFeedListsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallExternalFeedListsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the FirewallExternalFeedListsList converted to SparseFirewallExternalFeedListsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallExternalFeedListsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallExternalFeedListsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallExternalFeedList)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallExternalFeedListsList) Version() int {

	return 1
}

// FirewallExternalFeedList represents the model of a firewallexternalfeedlist
type FirewallExternalFeedList struct {
	// A list of ExternalFeed objects.
	Feeds []*FirewallExternalFeed `json:"feeds" msgpack:"feeds" bson:"feeds" mapstructure:"feeds,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallExternalFeedList returns a new *FirewallExternalFeedList
func NewFirewallExternalFeedList() *FirewallExternalFeedList {

	return &FirewallExternalFeedList{
		ModelVersion: 1,
		Feeds:        []*FirewallExternalFeed{},
	}
}

// Identity returns the Identity of the object.
func (o *FirewallExternalFeedList) Identity() elemental.Identity {

	return FirewallExternalFeedListIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallExternalFeedList) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallExternalFeedList) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallExternalFeedList) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallExternalFeedList{}

	s.Feeds = o.Feeds
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallExternalFeedList) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallExternalFeedList{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Feeds = s.Feeds
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallExternalFeedList) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallExternalFeedList) BleveType() string {

	return "firewallexternalfeedlist"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallExternalFeedList) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *FirewallExternalFeedList) Doc() string {

	return `This a readonly list that returns all of the NGFW external feeds.`
}

func (o *FirewallExternalFeedList) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallExternalFeedList) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallExternalFeedList) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallExternalFeedList) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallExternalFeedList{
			Feeds:     &o.Feeds,
			Namespace: &o.Namespace,
		}
	}

	sp := &SparseFirewallExternalFeedList{}
	for _, f := range fields {
		switch f {
		case "feeds":
			sp.Feeds = &(o.Feeds)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallExternalFeedList to the object.
func (o *FirewallExternalFeedList) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallExternalFeedList)
	if so.Feeds != nil {
		o.Feeds = *so.Feeds
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
}

// DeepCopy returns a deep copy if the FirewallExternalFeedList.
func (o *FirewallExternalFeedList) DeepCopy() *FirewallExternalFeedList {

	if o == nil {
		return nil
	}

	out := &FirewallExternalFeedList{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallExternalFeedList.
func (o *FirewallExternalFeedList) DeepCopyInto(out *FirewallExternalFeedList) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallExternalFeedList: %s", err))
	}

	*out = *target.(*FirewallExternalFeedList)
}

// Validate valides the current information stored into the structure.
func (o *FirewallExternalFeedList) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	for _, sub := range o.Feeds {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallExternalFeedList) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallExternalFeedListAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallExternalFeedListLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallExternalFeedList) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallExternalFeedListAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallExternalFeedList) ValueForAttribute(name string) any {

	switch name {
	case "feeds":
		return o.Feeds
	case "namespace":
		return o.Namespace
	}

	return nil
}

// FirewallExternalFeedListAttributesMap represents the map of attribute for FirewallExternalFeedList.
var FirewallExternalFeedListAttributesMap = map[string]elemental.AttributeSpecification{
	"Feeds": {
		AllowedChoices: []string{},
		BSONFieldName:  "feeds",
		ConvertedName:  "Feeds",
		Description:    `A list of ExternalFeed objects.`,
		Exposed:        true,
		Name:           "feeds",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "firewallexternalfeed",
		Type:           "refList",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// FirewallExternalFeedListLowerCaseAttributesMap represents the map of attribute for FirewallExternalFeedList.
var FirewallExternalFeedListLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"feeds": {
		AllowedChoices: []string{},
		BSONFieldName:  "feeds",
		ConvertedName:  "Feeds",
		Description:    `A list of ExternalFeed objects.`,
		Exposed:        true,
		Name:           "feeds",
		ReadOnly:       true,
		Stored:         true,
		SubType:        "firewallexternalfeed",
		Type:           "refList",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// SparseFirewallExternalFeedListsList represents a list of SparseFirewallExternalFeedLists
type SparseFirewallExternalFeedListsList []*SparseFirewallExternalFeedList

// Identity returns the identity of the objects in the list.
func (o SparseFirewallExternalFeedListsList) Identity() elemental.Identity {

	return FirewallExternalFeedListIdentity
}

// Copy returns a pointer to a copy the SparseFirewallExternalFeedListsList.
func (o SparseFirewallExternalFeedListsList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallExternalFeedListsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallExternalFeedListsList.
func (o SparseFirewallExternalFeedListsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallExternalFeedListsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallExternalFeedList))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallExternalFeedListsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallExternalFeedListsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseFirewallExternalFeedListsList converted to FirewallExternalFeedListsList.
func (o SparseFirewallExternalFeedListsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallExternalFeedListsList) Version() int {

	return 1
}

// SparseFirewallExternalFeedList represents the sparse version of a firewallexternalfeedlist.
type SparseFirewallExternalFeedList struct {
	// A list of ExternalFeed objects.
	Feeds *[]*FirewallExternalFeed `json:"feeds,omitempty" msgpack:"feeds,omitempty" bson:"feeds,omitempty" mapstructure:"feeds,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallExternalFeedList returns a new  SparseFirewallExternalFeedList.
func NewSparseFirewallExternalFeedList() *SparseFirewallExternalFeedList {
	return &SparseFirewallExternalFeedList{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallExternalFeedList) Identity() elemental.Identity {

	return FirewallExternalFeedListIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallExternalFeedList) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallExternalFeedList) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallExternalFeedList) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallExternalFeedList{}

	if o.Feeds != nil {
		s.Feeds = o.Feeds
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallExternalFeedList) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallExternalFeedList{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.Feeds != nil {
		o.Feeds = s.Feeds
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallExternalFeedList) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallExternalFeedList) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallExternalFeedList()
	if o.Feeds != nil {
		out.Feeds = *o.Feeds
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallExternalFeedList) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallExternalFeedList) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseFirewallExternalFeedList.
func (o *SparseFirewallExternalFeedList) DeepCopy() *SparseFirewallExternalFeedList {

	if o == nil {
		return nil
	}

	out := &SparseFirewallExternalFeedList{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallExternalFeedList.
func (o *SparseFirewallExternalFeedList) DeepCopyInto(out *SparseFirewallExternalFeedList) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallExternalFeedList: %s", err))
	}

	*out = *target.(*SparseFirewallExternalFeedList)
}

type mongoAttributesFirewallExternalFeedList struct {
	Feeds     []*FirewallExternalFeed `bson:"feeds"`
	Namespace string                  `bson:"namespace"`
}
type mongoAttributesSparseFirewallExternalFeedList struct {
	Feeds     *[]*FirewallExternalFeed `bson:"feeds,omitempty"`
	Namespace *string                  `bson:"namespace,omitempty"`
}
