// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallURLCategoryActionValue represents the possible values for attribute "action".
type FirewallURLCategoryActionValue string

const (
	// FirewallURLCategoryActionAlert represents the value Alert.
	FirewallURLCategoryActionAlert FirewallURLCategoryActionValue = "Alert"

	// FirewallURLCategoryActionAllow represents the value Allow.
	FirewallURLCategoryActionAllow FirewallURLCategoryActionValue = "Allow"

	// FirewallURLCategoryActionBlock represents the value Block.
	FirewallURLCategoryActionBlock FirewallURLCategoryActionValue = "Block"
)

// FirewallURLCategory represents the model of a firewallurlcategory
type FirewallURLCategory struct {
	// The action the firewall should take.
	Action FirewallURLCategoryActionValue `json:"action" msgpack:"action" bson:"action" mapstructure:"action,omitempty"`

	// The name of the URL category.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallURLCategory returns a new *FirewallURLCategory
func NewFirewallURLCategory() *FirewallURLCategory {

	return &FirewallURLCategory{
		ModelVersion: 1,
		Action:       FirewallURLCategoryActionAlert,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallURLCategory) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallURLCategory{}

	s.Action = o.Action
	s.Name = o.Name

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallURLCategory) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallURLCategory{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.Action = s.Action
	o.Name = s.Name

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallURLCategory) BleveType() string {

	return "firewallurlcategory"
}

// DeepCopy returns a deep copy if the FirewallURLCategory.
func (o *FirewallURLCategory) DeepCopy() *FirewallURLCategory {

	if o == nil {
		return nil
	}

	out := &FirewallURLCategory{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallURLCategory.
func (o *FirewallURLCategory) DeepCopyInto(out *FirewallURLCategory) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallURLCategory: %s", err))
	}

	*out = *target.(*FirewallURLCategory)
}

// Validate valides the current information stored into the structure.
func (o *FirewallURLCategory) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("action", string(o.Action), []string{"Alert", "Allow", "Block"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallURLCategory) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallURLCategoryAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallURLCategoryLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallURLCategory) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallURLCategoryAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallURLCategory) ValueForAttribute(name string) any {

	switch name {
	case "action":
		return o.Action
	case "name":
		return o.Name
	}

	return nil
}

// FirewallURLCategoryAttributesMap represents the map of attribute for FirewallURLCategory.
var FirewallURLCategoryAttributesMap = map[string]elemental.AttributeSpecification{
	"Action": {
		AllowedChoices: []string{"Alert", "Allow", "Block"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		DefaultValue:   FirewallURLCategoryActionAlert,
		Description:    `The action the firewall should take.`,
		Exposed:        true,
		Name:           "action",
		Stored:         true,
		Type:           "enum",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the URL category.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

// FirewallURLCategoryLowerCaseAttributesMap represents the map of attribute for FirewallURLCategory.
var FirewallURLCategoryLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"action": {
		AllowedChoices: []string{"Alert", "Allow", "Block"},
		BSONFieldName:  "action",
		ConvertedName:  "Action",
		DefaultValue:   FirewallURLCategoryActionAlert,
		Description:    `The action the firewall should take.`,
		Exposed:        true,
		Name:           "action",
		Stored:         true,
		Type:           "enum",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `The name of the URL category.`,
		Exposed:        true,
		Name:           "name",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesFirewallURLCategory struct {
	Action FirewallURLCategoryActionValue `bson:"action"`
	Name   string                         `bson:"name"`
}
