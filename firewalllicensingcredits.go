// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallLicensingCreditsIdentity represents the Identity of the object.
var FirewallLicensingCreditsIdentity = elemental.Identity{
	Name:     "firewalllicensingcredits",
	Category: "firewalllicensingcredits",
	Package:  "licensingsrv",
	Private:  false,
}

// FirewallLicensingCreditsList represents a list of FirewallLicensingCredits
type FirewallLicensingCreditsList []*FirewallLicensingCredits

// Identity returns the identity of the objects in the list.
func (o FirewallLicensingCreditsList) Identity() elemental.Identity {

	return FirewallLicensingCreditsIdentity
}

// Copy returns a pointer to a copy the FirewallLicensingCreditsList.
func (o FirewallLicensingCreditsList) Copy() elemental.Identifiables {

	copy := append(FirewallLicensingCreditsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the FirewallLicensingCreditsList.
func (o FirewallLicensingCreditsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallLicensingCreditsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallLicensingCredits))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallLicensingCreditsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallLicensingCreditsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the FirewallLicensingCreditsList converted to SparseFirewallLicensingCreditsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallLicensingCreditsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallLicensingCreditsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallLicensingCredits)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallLicensingCreditsList) Version() int {

	return 1
}

// FirewallLicensingCredits represents the model of a firewalllicensingcredits
type FirewallLicensingCredits struct {
	// Represents enhanced support credits.
	EnhancedSupportCredits int `json:"EnhancedSupportCredits" msgpack:"EnhancedSupportCredits" bson:"enhancedsupportcredits" mapstructure:"EnhancedSupportCredits,omitempty"`

	// Represents firewall usage credits.
	FWUsageCredits int `json:"FWUsageCredits" msgpack:"FWUsageCredits" bson:"fwusagecredits" mapstructure:"FWUsageCredits,omitempty"`

	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Represents prisma cloud management credits.
	PrismaCloudCredits int `json:"PrismaCloudCredits" msgpack:"PrismaCloudCredits" bson:"prismacloudcredits" mapstructure:"PrismaCloudCredits,omitempty"`

	// Represents threat prevention usage credits.
	TPUsageCredits int `json:"TPUsageCredits" msgpack:"TPUsageCredits" bson:"tpusagecredits" mapstructure:"TPUsageCredits,omitempty"`

	// Represents traffic secured usage credits.
	TrafficSecuredCredits int `json:"TrafficSecuredCredits" msgpack:"TrafficSecuredCredits" bson:"trafficsecuredcredits" mapstructure:"TrafficSecuredCredits,omitempty"`

	// Represents url filtering usage credits.
	URLFUsageCredits int `json:"URLFUsageCredits" msgpack:"URLFUsageCredits" bson:"urlfusagecredits" mapstructure:"URLFUsageCredits,omitempty"`

	// Represents the user cloud account ID.
	CloudAccountID string `json:"cloudAccountID" msgpack:"cloudAccountID" bson:"cloudaccountid" mapstructure:"cloudAccountID,omitempty"`

	// Represents firewall resource.
	FirewallResource string `json:"firewallResource" msgpack:"firewallResource" bson:"firewallresource" mapstructure:"firewallResource,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Represents the cloud ngfw tenant ID.
	TenantID string `json:"tenantID" msgpack:"tenantID" bson:"tenantid" mapstructure:"tenantID,omitempty"`

	// The timestamp of this record.
	Timestamp time.Time `json:"timestamp" msgpack:"timestamp" bson:"timestamp" mapstructure:"timestamp,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallLicensingCredits returns a new *FirewallLicensingCredits
func NewFirewallLicensingCredits() *FirewallLicensingCredits {

	return &FirewallLicensingCredits{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *FirewallLicensingCredits) Identity() elemental.Identity {

	return FirewallLicensingCreditsIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallLicensingCredits) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallLicensingCredits) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallLicensingCredits) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallLicensingCredits{}

	s.EnhancedSupportCredits = o.EnhancedSupportCredits
	s.FWUsageCredits = o.FWUsageCredits
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.PrismaCloudCredits = o.PrismaCloudCredits
	s.TPUsageCredits = o.TPUsageCredits
	s.TrafficSecuredCredits = o.TrafficSecuredCredits
	s.URLFUsageCredits = o.URLFUsageCredits
	s.CloudAccountID = o.CloudAccountID
	s.FirewallResource = o.FirewallResource
	s.Namespace = o.Namespace
	s.TenantID = o.TenantID
	s.Timestamp = o.Timestamp
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallLicensingCredits) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallLicensingCredits{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.EnhancedSupportCredits = s.EnhancedSupportCredits
	o.FWUsageCredits = s.FWUsageCredits
	o.ID = s.ID.Hex()
	o.PrismaCloudCredits = s.PrismaCloudCredits
	o.TPUsageCredits = s.TPUsageCredits
	o.TrafficSecuredCredits = s.TrafficSecuredCredits
	o.URLFUsageCredits = s.URLFUsageCredits
	o.CloudAccountID = s.CloudAccountID
	o.FirewallResource = s.FirewallResource
	o.Namespace = s.Namespace
	o.TenantID = s.TenantID
	o.Timestamp = s.Timestamp
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallLicensingCredits) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallLicensingCredits) BleveType() string {

	return "firewalllicensingcredits"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallLicensingCredits) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *FirewallLicensingCredits) Doc() string {

	return `Represents firewall licensing credits.`
}

func (o *FirewallLicensingCredits) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallLicensingCredits) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallLicensingCredits) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallLicensingCredits) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallLicensingCredits{
			EnhancedSupportCredits: &o.EnhancedSupportCredits,
			FWUsageCredits:         &o.FWUsageCredits,
			ID:                     &o.ID,
			PrismaCloudCredits:     &o.PrismaCloudCredits,
			TPUsageCredits:         &o.TPUsageCredits,
			TrafficSecuredCredits:  &o.TrafficSecuredCredits,
			URLFUsageCredits:       &o.URLFUsageCredits,
			CloudAccountID:         &o.CloudAccountID,
			FirewallResource:       &o.FirewallResource,
			Namespace:              &o.Namespace,
			TenantID:               &o.TenantID,
			Timestamp:              &o.Timestamp,
			ZHash:                  &o.ZHash,
			Zone:                   &o.Zone,
		}
	}

	sp := &SparseFirewallLicensingCredits{}
	for _, f := range fields {
		switch f {
		case "EnhancedSupportCredits":
			sp.EnhancedSupportCredits = &(o.EnhancedSupportCredits)
		case "FWUsageCredits":
			sp.FWUsageCredits = &(o.FWUsageCredits)
		case "ID":
			sp.ID = &(o.ID)
		case "PrismaCloudCredits":
			sp.PrismaCloudCredits = &(o.PrismaCloudCredits)
		case "TPUsageCredits":
			sp.TPUsageCredits = &(o.TPUsageCredits)
		case "TrafficSecuredCredits":
			sp.TrafficSecuredCredits = &(o.TrafficSecuredCredits)
		case "URLFUsageCredits":
			sp.URLFUsageCredits = &(o.URLFUsageCredits)
		case "cloudAccountID":
			sp.CloudAccountID = &(o.CloudAccountID)
		case "firewallResource":
			sp.FirewallResource = &(o.FirewallResource)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "tenantID":
			sp.TenantID = &(o.TenantID)
		case "timestamp":
			sp.Timestamp = &(o.Timestamp)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallLicensingCredits to the object.
func (o *FirewallLicensingCredits) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallLicensingCredits)
	if so.EnhancedSupportCredits != nil {
		o.EnhancedSupportCredits = *so.EnhancedSupportCredits
	}
	if so.FWUsageCredits != nil {
		o.FWUsageCredits = *so.FWUsageCredits
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.PrismaCloudCredits != nil {
		o.PrismaCloudCredits = *so.PrismaCloudCredits
	}
	if so.TPUsageCredits != nil {
		o.TPUsageCredits = *so.TPUsageCredits
	}
	if so.TrafficSecuredCredits != nil {
		o.TrafficSecuredCredits = *so.TrafficSecuredCredits
	}
	if so.URLFUsageCredits != nil {
		o.URLFUsageCredits = *so.URLFUsageCredits
	}
	if so.CloudAccountID != nil {
		o.CloudAccountID = *so.CloudAccountID
	}
	if so.FirewallResource != nil {
		o.FirewallResource = *so.FirewallResource
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.TenantID != nil {
		o.TenantID = *so.TenantID
	}
	if so.Timestamp != nil {
		o.Timestamp = *so.Timestamp
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the FirewallLicensingCredits.
func (o *FirewallLicensingCredits) DeepCopy() *FirewallLicensingCredits {

	if o == nil {
		return nil
	}

	out := &FirewallLicensingCredits{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallLicensingCredits.
func (o *FirewallLicensingCredits) DeepCopyInto(out *FirewallLicensingCredits) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallLicensingCredits: %s", err))
	}

	*out = *target.(*FirewallLicensingCredits)
}

// Validate valides the current information stored into the structure.
func (o *FirewallLicensingCredits) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("cloudAccountID", o.CloudAccountID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("firewallResource", o.FirewallResource); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("tenantID", o.TenantID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredTime("timestamp", o.Timestamp); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallLicensingCredits) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallLicensingCreditsAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallLicensingCreditsLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallLicensingCredits) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallLicensingCreditsAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallLicensingCredits) ValueForAttribute(name string) any {

	switch name {
	case "EnhancedSupportCredits":
		return o.EnhancedSupportCredits
	case "FWUsageCredits":
		return o.FWUsageCredits
	case "ID":
		return o.ID
	case "PrismaCloudCredits":
		return o.PrismaCloudCredits
	case "TPUsageCredits":
		return o.TPUsageCredits
	case "TrafficSecuredCredits":
		return o.TrafficSecuredCredits
	case "URLFUsageCredits":
		return o.URLFUsageCredits
	case "cloudAccountID":
		return o.CloudAccountID
	case "firewallResource":
		return o.FirewallResource
	case "namespace":
		return o.Namespace
	case "tenantID":
		return o.TenantID
	case "timestamp":
		return o.Timestamp
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// FirewallLicensingCreditsAttributesMap represents the map of attribute for FirewallLicensingCredits.
var FirewallLicensingCreditsAttributesMap = map[string]elemental.AttributeSpecification{
	"EnhancedSupportCredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "enhancedsupportcredits",
		ConvertedName:  "EnhancedSupportCredits",
		Description:    `Represents enhanced support credits.`,
		Exposed:        true,
		Name:           "EnhancedSupportCredits",
		Stored:         true,
		Type:           "integer",
	},
	"FWUsageCredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "fwusagecredits",
		ConvertedName:  "FWUsageCredits",
		Description:    `Represents firewall usage credits.`,
		Exposed:        true,
		Name:           "FWUsageCredits",
		Stored:         true,
		Type:           "integer",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"PrismaCloudCredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismacloudcredits",
		ConvertedName:  "PrismaCloudCredits",
		Description:    `Represents prisma cloud management credits.`,
		Exposed:        true,
		Name:           "PrismaCloudCredits",
		Stored:         true,
		Type:           "integer",
	},
	"TPUsageCredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "tpusagecredits",
		ConvertedName:  "TPUsageCredits",
		Description:    `Represents threat prevention usage credits.`,
		Exposed:        true,
		Name:           "TPUsageCredits",
		Stored:         true,
		Type:           "integer",
	},
	"TrafficSecuredCredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "trafficsecuredcredits",
		ConvertedName:  "TrafficSecuredCredits",
		Description:    `Represents traffic secured usage credits.`,
		Exposed:        true,
		Name:           "TrafficSecuredCredits",
		Stored:         true,
		Type:           "integer",
	},
	"URLFUsageCredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "urlfusagecredits",
		ConvertedName:  "URLFUsageCredits",
		Description:    `Represents url filtering usage credits.`,
		Exposed:        true,
		Name:           "URLFUsageCredits",
		Stored:         true,
		Type:           "integer",
	},
	"CloudAccountID": {
		AllowedChoices: []string{},
		BSONFieldName:  "cloudaccountid",
		ConvertedName:  "CloudAccountID",
		Description:    `Represents the user cloud account ID.`,
		Exposed:        true,
		Name:           "cloudAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"FirewallResource": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallresource",
		ConvertedName:  "FirewallResource",
		Description:    `Represents firewall resource.`,
		Exposed:        true,
		Name:           "firewallResource",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"TenantID": {
		AllowedChoices: []string{},
		BSONFieldName:  "tenantid",
		ConvertedName:  "TenantID",
		Description:    `Represents the cloud ngfw tenant ID.`,
		Exposed:        true,
		Name:           "tenantID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `The timestamp of this record.`,
		Exposed:        true,
		Name:           "timestamp",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
}

// FirewallLicensingCreditsLowerCaseAttributesMap represents the map of attribute for FirewallLicensingCredits.
var FirewallLicensingCreditsLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"enhancedsupportcredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "enhancedsupportcredits",
		ConvertedName:  "EnhancedSupportCredits",
		Description:    `Represents enhanced support credits.`,
		Exposed:        true,
		Name:           "EnhancedSupportCredits",
		Stored:         true,
		Type:           "integer",
	},
	"fwusagecredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "fwusagecredits",
		ConvertedName:  "FWUsageCredits",
		Description:    `Represents firewall usage credits.`,
		Exposed:        true,
		Name:           "FWUsageCredits",
		Stored:         true,
		Type:           "integer",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"prismacloudcredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "prismacloudcredits",
		ConvertedName:  "PrismaCloudCredits",
		Description:    `Represents prisma cloud management credits.`,
		Exposed:        true,
		Name:           "PrismaCloudCredits",
		Stored:         true,
		Type:           "integer",
	},
	"tpusagecredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "tpusagecredits",
		ConvertedName:  "TPUsageCredits",
		Description:    `Represents threat prevention usage credits.`,
		Exposed:        true,
		Name:           "TPUsageCredits",
		Stored:         true,
		Type:           "integer",
	},
	"trafficsecuredcredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "trafficsecuredcredits",
		ConvertedName:  "TrafficSecuredCredits",
		Description:    `Represents traffic secured usage credits.`,
		Exposed:        true,
		Name:           "TrafficSecuredCredits",
		Stored:         true,
		Type:           "integer",
	},
	"urlfusagecredits": {
		AllowedChoices: []string{},
		BSONFieldName:  "urlfusagecredits",
		ConvertedName:  "URLFUsageCredits",
		Description:    `Represents url filtering usage credits.`,
		Exposed:        true,
		Name:           "URLFUsageCredits",
		Stored:         true,
		Type:           "integer",
	},
	"cloudaccountid": {
		AllowedChoices: []string{},
		BSONFieldName:  "cloudaccountid",
		ConvertedName:  "CloudAccountID",
		Description:    `Represents the user cloud account ID.`,
		Exposed:        true,
		Name:           "cloudAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"firewallresource": {
		AllowedChoices: []string{},
		BSONFieldName:  "firewallresource",
		ConvertedName:  "FirewallResource",
		Description:    `Represents firewall resource.`,
		Exposed:        true,
		Name:           "firewallResource",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"tenantid": {
		AllowedChoices: []string{},
		BSONFieldName:  "tenantid",
		ConvertedName:  "TenantID",
		Description:    `Represents the cloud ngfw tenant ID.`,
		Exposed:        true,
		Name:           "tenantID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"timestamp": {
		AllowedChoices: []string{},
		BSONFieldName:  "timestamp",
		ConvertedName:  "Timestamp",
		Description:    `The timestamp of this record.`,
		Exposed:        true,
		Name:           "timestamp",
		Required:       true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseFirewallLicensingCreditsList represents a list of SparseFirewallLicensingCredits
type SparseFirewallLicensingCreditsList []*SparseFirewallLicensingCredits

// Identity returns the identity of the objects in the list.
func (o SparseFirewallLicensingCreditsList) Identity() elemental.Identity {

	return FirewallLicensingCreditsIdentity
}

// Copy returns a pointer to a copy the SparseFirewallLicensingCreditsList.
func (o SparseFirewallLicensingCreditsList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallLicensingCreditsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallLicensingCreditsList.
func (o SparseFirewallLicensingCreditsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallLicensingCreditsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallLicensingCredits))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallLicensingCreditsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallLicensingCreditsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseFirewallLicensingCreditsList converted to FirewallLicensingCreditsList.
func (o SparseFirewallLicensingCreditsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallLicensingCreditsList) Version() int {

	return 1
}

// SparseFirewallLicensingCredits represents the sparse version of a firewalllicensingcredits.
type SparseFirewallLicensingCredits struct {
	// Represents enhanced support credits.
	EnhancedSupportCredits *int `json:"EnhancedSupportCredits,omitempty" msgpack:"EnhancedSupportCredits,omitempty" bson:"enhancedsupportcredits,omitempty" mapstructure:"EnhancedSupportCredits,omitempty"`

	// Represents firewall usage credits.
	FWUsageCredits *int `json:"FWUsageCredits,omitempty" msgpack:"FWUsageCredits,omitempty" bson:"fwusagecredits,omitempty" mapstructure:"FWUsageCredits,omitempty"`

	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Represents prisma cloud management credits.
	PrismaCloudCredits *int `json:"PrismaCloudCredits,omitempty" msgpack:"PrismaCloudCredits,omitempty" bson:"prismacloudcredits,omitempty" mapstructure:"PrismaCloudCredits,omitempty"`

	// Represents threat prevention usage credits.
	TPUsageCredits *int `json:"TPUsageCredits,omitempty" msgpack:"TPUsageCredits,omitempty" bson:"tpusagecredits,omitempty" mapstructure:"TPUsageCredits,omitempty"`

	// Represents traffic secured usage credits.
	TrafficSecuredCredits *int `json:"TrafficSecuredCredits,omitempty" msgpack:"TrafficSecuredCredits,omitempty" bson:"trafficsecuredcredits,omitempty" mapstructure:"TrafficSecuredCredits,omitempty"`

	// Represents url filtering usage credits.
	URLFUsageCredits *int `json:"URLFUsageCredits,omitempty" msgpack:"URLFUsageCredits,omitempty" bson:"urlfusagecredits,omitempty" mapstructure:"URLFUsageCredits,omitempty"`

	// Represents the user cloud account ID.
	CloudAccountID *string `json:"cloudAccountID,omitempty" msgpack:"cloudAccountID,omitempty" bson:"cloudaccountid,omitempty" mapstructure:"cloudAccountID,omitempty"`

	// Represents firewall resource.
	FirewallResource *string `json:"firewallResource,omitempty" msgpack:"firewallResource,omitempty" bson:"firewallresource,omitempty" mapstructure:"firewallResource,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Represents the cloud ngfw tenant ID.
	TenantID *string `json:"tenantID,omitempty" msgpack:"tenantID,omitempty" bson:"tenantid,omitempty" mapstructure:"tenantID,omitempty"`

	// The timestamp of this record.
	Timestamp *time.Time `json:"timestamp,omitempty" msgpack:"timestamp,omitempty" bson:"timestamp,omitempty" mapstructure:"timestamp,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallLicensingCredits returns a new  SparseFirewallLicensingCredits.
func NewSparseFirewallLicensingCredits() *SparseFirewallLicensingCredits {
	return &SparseFirewallLicensingCredits{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallLicensingCredits) Identity() elemental.Identity {

	return FirewallLicensingCreditsIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallLicensingCredits) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallLicensingCredits) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallLicensingCredits) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallLicensingCredits{}

	if o.EnhancedSupportCredits != nil {
		s.EnhancedSupportCredits = o.EnhancedSupportCredits
	}
	if o.FWUsageCredits != nil {
		s.FWUsageCredits = o.FWUsageCredits
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.PrismaCloudCredits != nil {
		s.PrismaCloudCredits = o.PrismaCloudCredits
	}
	if o.TPUsageCredits != nil {
		s.TPUsageCredits = o.TPUsageCredits
	}
	if o.TrafficSecuredCredits != nil {
		s.TrafficSecuredCredits = o.TrafficSecuredCredits
	}
	if o.URLFUsageCredits != nil {
		s.URLFUsageCredits = o.URLFUsageCredits
	}
	if o.CloudAccountID != nil {
		s.CloudAccountID = o.CloudAccountID
	}
	if o.FirewallResource != nil {
		s.FirewallResource = o.FirewallResource
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.TenantID != nil {
		s.TenantID = o.TenantID
	}
	if o.Timestamp != nil {
		s.Timestamp = o.Timestamp
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallLicensingCredits) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallLicensingCredits{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.EnhancedSupportCredits != nil {
		o.EnhancedSupportCredits = s.EnhancedSupportCredits
	}
	if s.FWUsageCredits != nil {
		o.FWUsageCredits = s.FWUsageCredits
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.PrismaCloudCredits != nil {
		o.PrismaCloudCredits = s.PrismaCloudCredits
	}
	if s.TPUsageCredits != nil {
		o.TPUsageCredits = s.TPUsageCredits
	}
	if s.TrafficSecuredCredits != nil {
		o.TrafficSecuredCredits = s.TrafficSecuredCredits
	}
	if s.URLFUsageCredits != nil {
		o.URLFUsageCredits = s.URLFUsageCredits
	}
	if s.CloudAccountID != nil {
		o.CloudAccountID = s.CloudAccountID
	}
	if s.FirewallResource != nil {
		o.FirewallResource = s.FirewallResource
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.TenantID != nil {
		o.TenantID = s.TenantID
	}
	if s.Timestamp != nil {
		o.Timestamp = s.Timestamp
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallLicensingCredits) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallLicensingCredits) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallLicensingCredits()
	if o.EnhancedSupportCredits != nil {
		out.EnhancedSupportCredits = *o.EnhancedSupportCredits
	}
	if o.FWUsageCredits != nil {
		out.FWUsageCredits = *o.FWUsageCredits
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.PrismaCloudCredits != nil {
		out.PrismaCloudCredits = *o.PrismaCloudCredits
	}
	if o.TPUsageCredits != nil {
		out.TPUsageCredits = *o.TPUsageCredits
	}
	if o.TrafficSecuredCredits != nil {
		out.TrafficSecuredCredits = *o.TrafficSecuredCredits
	}
	if o.URLFUsageCredits != nil {
		out.URLFUsageCredits = *o.URLFUsageCredits
	}
	if o.CloudAccountID != nil {
		out.CloudAccountID = *o.CloudAccountID
	}
	if o.FirewallResource != nil {
		out.FirewallResource = *o.FirewallResource
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.TenantID != nil {
		out.TenantID = *o.TenantID
	}
	if o.Timestamp != nil {
		out.Timestamp = *o.Timestamp
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallLicensingCredits) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallLicensingCredits) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseFirewallLicensingCredits.
func (o *SparseFirewallLicensingCredits) DeepCopy() *SparseFirewallLicensingCredits {

	if o == nil {
		return nil
	}

	out := &SparseFirewallLicensingCredits{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallLicensingCredits.
func (o *SparseFirewallLicensingCredits) DeepCopyInto(out *SparseFirewallLicensingCredits) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallLicensingCredits: %s", err))
	}

	*out = *target.(*SparseFirewallLicensingCredits)
}

type mongoAttributesFirewallLicensingCredits struct {
	EnhancedSupportCredits int           `bson:"enhancedsupportcredits"`
	FWUsageCredits         int           `bson:"fwusagecredits"`
	ID                     bson.ObjectId `bson:"_id,omitempty"`
	PrismaCloudCredits     int           `bson:"prismacloudcredits"`
	TPUsageCredits         int           `bson:"tpusagecredits"`
	TrafficSecuredCredits  int           `bson:"trafficsecuredcredits"`
	URLFUsageCredits       int           `bson:"urlfusagecredits"`
	CloudAccountID         string        `bson:"cloudaccountid"`
	FirewallResource       string        `bson:"firewallresource"`
	Namespace              string        `bson:"namespace"`
	TenantID               string        `bson:"tenantid"`
	Timestamp              time.Time     `bson:"timestamp"`
	ZHash                  int           `bson:"zhash"`
	Zone                   int           `bson:"zone"`
}
type mongoAttributesSparseFirewallLicensingCredits struct {
	EnhancedSupportCredits *int          `bson:"enhancedsupportcredits,omitempty"`
	FWUsageCredits         *int          `bson:"fwusagecredits,omitempty"`
	ID                     bson.ObjectId `bson:"_id,omitempty"`
	PrismaCloudCredits     *int          `bson:"prismacloudcredits,omitempty"`
	TPUsageCredits         *int          `bson:"tpusagecredits,omitempty"`
	TrafficSecuredCredits  *int          `bson:"trafficsecuredcredits,omitempty"`
	URLFUsageCredits       *int          `bson:"urlfusagecredits,omitempty"`
	CloudAccountID         *string       `bson:"cloudaccountid,omitempty"`
	FirewallResource       *string       `bson:"firewallresource,omitempty"`
	Namespace              *string       `bson:"namespace,omitempty"`
	TenantID               *string       `bson:"tenantid,omitempty"`
	Timestamp              *time.Time    `bson:"timestamp,omitempty"`
	ZHash                  *int          `bson:"zhash,omitempty"`
	Zone                   *int          `bson:"zone,omitempty"`
}
