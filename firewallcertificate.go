// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallCertificateIdentity represents the Identity of the object.
var FirewallCertificateIdentity = elemental.Identity{
	Name:     "firewallcertificate",
	Category: "firewallcertificates",
	Package:  "ngfw",
	Private:  false,
}

// FirewallCertificatesList represents a list of FirewallCertificates
type FirewallCertificatesList []*FirewallCertificate

// Identity returns the identity of the objects in the list.
func (o FirewallCertificatesList) Identity() elemental.Identity {

	return FirewallCertificateIdentity
}

// Copy returns a pointer to a copy the FirewallCertificatesList.
func (o FirewallCertificatesList) Copy() elemental.Identifiables {

	copy := append(FirewallCertificatesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the FirewallCertificatesList.
func (o FirewallCertificatesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallCertificatesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallCertificate))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallCertificatesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallCertificatesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the FirewallCertificatesList converted to SparseFirewallCertificatesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallCertificatesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallCertificatesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallCertificate)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallCertificatesList) Version() int {

	return 1
}

// FirewallCertificate represents the model of a firewallcertificate
type FirewallCertificate struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Depends on the Type. For AWS, it is the AWS Certificate ARN.
	Certificate string `json:"certificate" msgpack:"certificate" bson:"certificate" mapstructure:"certificate,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// A self-signed root CA certificate.
	SelfSigned bool `json:"selfSigned" msgpack:"selfSigned" bson:"selfsigned" mapstructure:"selfSigned,omitempty"`

	// List of tags attached to an entity.
	Tags []string `json:"tags" msgpack:"tags" bson:"tags" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallCertificate returns a new *FirewallCertificate
func NewFirewallCertificate() *FirewallCertificate {

	return &FirewallCertificate{
		ModelVersion: 1,
		Tags:         []string{},
	}
}

// Identity returns the Identity of the object.
func (o *FirewallCertificate) Identity() elemental.Identity {

	return FirewallCertificateIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallCertificate) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallCertificate) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallCertificate) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallCertificate{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Certificate = o.Certificate
	s.CreateTime = o.CreateTime
	s.Description = o.Description
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.SelfSigned = o.SelfSigned
	s.Tags = o.Tags
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallCertificate) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallCertificate{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Certificate = s.Certificate
	o.CreateTime = s.CreateTime
	o.Description = s.Description
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.SelfSigned = s.SelfSigned
	o.Tags = s.Tags
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallCertificate) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallCertificate) BleveType() string {

	return "firewallcertificate"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallCertificate) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *FirewallCertificate) Doc() string {

	return `Represents a cloud certificate.`
}

func (o *FirewallCertificate) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *FirewallCertificate) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *FirewallCertificate) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetDescription returns the Description of the receiver.
func (o *FirewallCertificate) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *FirewallCertificate) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *FirewallCertificate) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *FirewallCertificate) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *FirewallCertificate) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *FirewallCertificate) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetTags returns the Tags of the receiver.
func (o *FirewallCertificate) GetTags() []string {

	return o.Tags
}

// SetTags sets the property Tags of the receiver using the given value.
func (o *FirewallCertificate) SetTags(tags []string) {

	o.Tags = tags
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *FirewallCertificate) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *FirewallCertificate) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallCertificate) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallCertificate{
			ID:          &o.ID,
			Certificate: &o.Certificate,
			CreateTime:  &o.CreateTime,
			Description: &o.Description,
			Name:        &o.Name,
			Namespace:   &o.Namespace,
			SelfSigned:  &o.SelfSigned,
			Tags:        &o.Tags,
			UpdateTime:  &o.UpdateTime,
			ZHash:       &o.ZHash,
			Zone:        &o.Zone,
		}
	}

	sp := &SparseFirewallCertificate{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "certificate":
			sp.Certificate = &(o.Certificate)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "description":
			sp.Description = &(o.Description)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "selfSigned":
			sp.SelfSigned = &(o.SelfSigned)
		case "tags":
			sp.Tags = &(o.Tags)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallCertificate to the object.
func (o *FirewallCertificate) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallCertificate)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Certificate != nil {
		o.Certificate = *so.Certificate
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.SelfSigned != nil {
		o.SelfSigned = *so.SelfSigned
	}
	if so.Tags != nil {
		o.Tags = *so.Tags
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the FirewallCertificate.
func (o *FirewallCertificate) DeepCopy() *FirewallCertificate {

	if o == nil {
		return nil
	}

	out := &FirewallCertificate{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallCertificate.
func (o *FirewallCertificate) DeepCopyInto(out *FirewallCertificate) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallCertificate: %s", err))
	}

	*out = *target.(*FirewallCertificate)
}

// Validate valides the current information stored into the structure.
func (o *FirewallCertificate) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateTagsWithoutReservedPrefixes("tags", o.Tags); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallCertificate) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallCertificateAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallCertificateLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallCertificate) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallCertificateAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallCertificate) ValueForAttribute(name string) interface{} {

	switch name {
	case "ID":
		return o.ID
	case "certificate":
		return o.Certificate
	case "createTime":
		return o.CreateTime
	case "description":
		return o.Description
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "selfSigned":
		return o.SelfSigned
	case "tags":
		return o.Tags
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// FirewallCertificateAttributesMap represents the map of attribute for FirewallCertificate.
var FirewallCertificateAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Certificate": {
		AllowedChoices: []string{},
		BSONFieldName:  "certificate",
		ConvertedName:  "Certificate",
		Description:    `Depends on the Type. For AWS, it is the AWS Certificate ARN.`,
		Exposed:        true,
		Name:           "certificate",
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"SelfSigned": {
		AllowedChoices: []string{},
		BSONFieldName:  "selfsigned",
		ConvertedName:  "SelfSigned",
		Description:    `A self-signed root CA certificate.`,
		Exposed:        true,
		Name:           "selfSigned",
		Stored:         true,
		Type:           "boolean",
	},
	"Tags": {
		AllowedChoices: []string{},
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "tags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// FirewallCertificateLowerCaseAttributesMap represents the map of attribute for FirewallCertificate.
var FirewallCertificateLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"certificate": {
		AllowedChoices: []string{},
		BSONFieldName:  "certificate",
		ConvertedName:  "Certificate",
		Description:    `Depends on the Type. For AWS, it is the AWS Certificate ARN.`,
		Exposed:        true,
		Name:           "certificate",
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"selfsigned": {
		AllowedChoices: []string{},
		BSONFieldName:  "selfsigned",
		ConvertedName:  "SelfSigned",
		Description:    `A self-signed root CA certificate.`,
		Exposed:        true,
		Name:           "selfSigned",
		Stored:         true,
		Type:           "boolean",
	},
	"tags": {
		AllowedChoices: []string{},
		BSONFieldName:  "tags",
		ConvertedName:  "Tags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "tags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseFirewallCertificatesList represents a list of SparseFirewallCertificates
type SparseFirewallCertificatesList []*SparseFirewallCertificate

// Identity returns the identity of the objects in the list.
func (o SparseFirewallCertificatesList) Identity() elemental.Identity {

	return FirewallCertificateIdentity
}

// Copy returns a pointer to a copy the SparseFirewallCertificatesList.
func (o SparseFirewallCertificatesList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallCertificatesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallCertificatesList.
func (o SparseFirewallCertificatesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallCertificatesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallCertificate))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallCertificatesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallCertificatesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparseFirewallCertificatesList converted to FirewallCertificatesList.
func (o SparseFirewallCertificatesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallCertificatesList) Version() int {

	return 1
}

// SparseFirewallCertificate represents the sparse version of a firewallcertificate.
type SparseFirewallCertificate struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Depends on the Type. For AWS, it is the AWS Certificate ARN.
	Certificate *string `json:"certificate,omitempty" msgpack:"certificate,omitempty" bson:"certificate,omitempty" mapstructure:"certificate,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// A self-signed root CA certificate.
	SelfSigned *bool `json:"selfSigned,omitempty" msgpack:"selfSigned,omitempty" bson:"selfsigned,omitempty" mapstructure:"selfSigned,omitempty"`

	// List of tags attached to an entity.
	Tags *[]string `json:"tags,omitempty" msgpack:"tags,omitempty" bson:"tags,omitempty" mapstructure:"tags,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallCertificate returns a new  SparseFirewallCertificate.
func NewSparseFirewallCertificate() *SparseFirewallCertificate {
	return &SparseFirewallCertificate{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallCertificate) Identity() elemental.Identity {

	return FirewallCertificateIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallCertificate) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallCertificate) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallCertificate) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallCertificate{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Certificate != nil {
		s.Certificate = o.Certificate
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.SelfSigned != nil {
		s.SelfSigned = o.SelfSigned
	}
	if o.Tags != nil {
		s.Tags = o.Tags
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallCertificate) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallCertificate{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Certificate != nil {
		o.Certificate = s.Certificate
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.SelfSigned != nil {
		o.SelfSigned = s.SelfSigned
	}
	if s.Tags != nil {
		o.Tags = s.Tags
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallCertificate) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallCertificate) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallCertificate()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Certificate != nil {
		out.Certificate = *o.Certificate
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.SelfSigned != nil {
		out.SelfSigned = *o.SelfSigned
	}
	if o.Tags != nil {
		out.Tags = *o.Tags
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseFirewallCertificate) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseFirewallCertificate) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetDescription returns the Description of the receiver.
func (o *SparseFirewallCertificate) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparseFirewallCertificate) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparseFirewallCertificate) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparseFirewallCertificate) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseFirewallCertificate) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseFirewallCertificate) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetTags returns the Tags of the receiver.
func (o *SparseFirewallCertificate) GetTags() (out []string) {

	if o.Tags == nil {
		return
	}

	return *o.Tags
}

// SetTags sets the property Tags of the receiver using the address of the given value.
func (o *SparseFirewallCertificate) SetTags(tags []string) {

	o.Tags = &tags
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseFirewallCertificate) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseFirewallCertificate) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseFirewallCertificate.
func (o *SparseFirewallCertificate) DeepCopy() *SparseFirewallCertificate {

	if o == nil {
		return nil
	}

	out := &SparseFirewallCertificate{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallCertificate.
func (o *SparseFirewallCertificate) DeepCopyInto(out *SparseFirewallCertificate) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallCertificate: %s", err))
	}

	*out = *target.(*SparseFirewallCertificate)
}

type mongoAttributesFirewallCertificate struct {
	ID          bson.ObjectId `bson:"_id,omitempty"`
	Certificate string        `bson:"certificate"`
	CreateTime  time.Time     `bson:"createtime"`
	Description string        `bson:"description"`
	Name        string        `bson:"name"`
	Namespace   string        `bson:"namespace"`
	SelfSigned  bool          `bson:"selfsigned"`
	Tags        []string      `bson:"tags"`
	UpdateTime  time.Time     `bson:"updatetime"`
	ZHash       int           `bson:"zhash"`
	Zone        int           `bson:"zone"`
}
type mongoAttributesSparseFirewallCertificate struct {
	ID          bson.ObjectId `bson:"_id,omitempty"`
	Certificate *string       `bson:"certificate,omitempty"`
	CreateTime  *time.Time    `bson:"createtime,omitempty"`
	Description *string       `bson:"description,omitempty"`
	Name        *string       `bson:"name,omitempty"`
	Namespace   *string       `bson:"namespace,omitempty"`
	SelfSigned  *bool         `bson:"selfsigned,omitempty"`
	Tags        *[]string     `bson:"tags,omitempty"`
	UpdateTime  *time.Time    `bson:"updatetime,omitempty"`
	ZHash       *int          `bson:"zhash,omitempty"`
	Zone        *int          `bson:"zone,omitempty"`
}
