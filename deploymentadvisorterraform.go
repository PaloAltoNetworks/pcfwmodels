// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// DeploymentAdvisorTerraformNGFWModeValue represents the possible values for attribute "NGFWMode".
type DeploymentAdvisorTerraformNGFWModeValue string

const (
	// DeploymentAdvisorTerraformNGFWModeNGFW represents the value NGFW.
	DeploymentAdvisorTerraformNGFWModeNGFW DeploymentAdvisorTerraformNGFWModeValue = "NGFW"

	// DeploymentAdvisorTerraformNGFWModeTAP represents the value TAP.
	DeploymentAdvisorTerraformNGFWModeTAP DeploymentAdvisorTerraformNGFWModeValue = "TAP"
)

// DeploymentAdvisorTerraformIdentity represents the Identity of the object.
var DeploymentAdvisorTerraformIdentity = elemental.Identity{
	Name:     "deploymentadvisorterraform",
	Category: "deploymentadvisorterraforms",
	Package:  "deploymentadvisor",
	Private:  false,
}

// DeploymentAdvisorTerraformsList represents a list of DeploymentAdvisorTerraforms
type DeploymentAdvisorTerraformsList []*DeploymentAdvisorTerraform

// Identity returns the identity of the objects in the list.
func (o DeploymentAdvisorTerraformsList) Identity() elemental.Identity {

	return DeploymentAdvisorTerraformIdentity
}

// Copy returns a pointer to a copy the DeploymentAdvisorTerraformsList.
func (o DeploymentAdvisorTerraformsList) Copy() elemental.Identifiables {

	copy := append(DeploymentAdvisorTerraformsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the DeploymentAdvisorTerraformsList.
func (o DeploymentAdvisorTerraformsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(DeploymentAdvisorTerraformsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*DeploymentAdvisorTerraform))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o DeploymentAdvisorTerraformsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o DeploymentAdvisorTerraformsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the DeploymentAdvisorTerraformsList converted to SparseDeploymentAdvisorTerraformsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o DeploymentAdvisorTerraformsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseDeploymentAdvisorTerraformsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseDeploymentAdvisorTerraform)
	}

	return out
}

// Version returns the version of the content.
func (o DeploymentAdvisorTerraformsList) Version() int {

	return 1
}

// DeploymentAdvisorTerraform represents the model of a deploymentadvisorterraform
type DeploymentAdvisorTerraform struct {
	// The list of all AMI IDs where dynamic updates are to be performed on associated
	// instances.
	AMIIDs []string `json:"AMIIDs" msgpack:"AMIIDs" bson:"amiids" mapstructure:"AMIIDs,omitempty"`

	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// The mode of the Cloud NGFW instance.
	NGFWMode DeploymentAdvisorTerraformNGFWModeValue `json:"NGFWMode" msgpack:"NGFWMode" bson:"ngfwmode" mapstructure:"NGFWMode,omitempty"`

	// List of AWS VPC IDs and information about associated firewall subnets in their
	// respective availability zones.
	VPCAvailabilityZoneSubnets []*VPCAvailabilityZoneSubnet `json:"VPCAvailabilityZoneSubnets" msgpack:"VPCAvailabilityZoneSubnets" bson:"vpcavailabilityzonesubnets" mapstructure:"VPCAvailabilityZoneSubnets,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Whether or not perform dynamic updates in customer VPC e.g. for creating
	// mirroring policies on new instances.
	DynamicPolicyUpdateEnabled bool `json:"dynamicPolicyUpdateEnabled" msgpack:"dynamicPolicyUpdateEnabled" bson:"dynamicpolicyupdateenabled" mapstructure:"dynamicPolicyUpdateEnabled,omitempty"`

	// Traffic mirror filter to specify what traffic is to be mirrored.
	Filter *MirrorFilter `json:"filter" msgpack:"filter" bson:"filter" mapstructure:"filter,omitempty"`

	// The list of all instance IDs where dynamic updates are to be performed.
	InstanceIDs []string `json:"instanceIDs" msgpack:"instanceIDs" bson:"instanceids" mapstructure:"instanceIDs,omitempty"`

	// The list of all instance tags where dynamic updates are to be performed.
	InstanceTags []string `json:"instanceTags" msgpack:"instanceTags" bson:"instancetags" mapstructure:"instanceTags,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewDeploymentAdvisorTerraform returns a new *DeploymentAdvisorTerraform
func NewDeploymentAdvisorTerraform() *DeploymentAdvisorTerraform {

	return &DeploymentAdvisorTerraform{
		ModelVersion:               1,
		AMIIDs:                     []string{},
		NGFWMode:                   DeploymentAdvisorTerraformNGFWModeTAP,
		VPCAvailabilityZoneSubnets: []*VPCAvailabilityZoneSubnet{},
		Filter:                     NewMirrorFilter(),
		InstanceIDs:                []string{},
		InstanceTags:               []string{},
	}
}

// Identity returns the Identity of the object.
func (o *DeploymentAdvisorTerraform) Identity() elemental.Identity {

	return DeploymentAdvisorTerraformIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *DeploymentAdvisorTerraform) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *DeploymentAdvisorTerraform) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DeploymentAdvisorTerraform) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesDeploymentAdvisorTerraform{}

	s.AMIIDs = o.AMIIDs
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.NGFWMode = o.NGFWMode
	s.VPCAvailabilityZoneSubnets = o.VPCAvailabilityZoneSubnets
	s.Description = o.Description
	s.DynamicPolicyUpdateEnabled = o.DynamicPolicyUpdateEnabled
	s.Filter = o.Filter
	s.InstanceIDs = o.InstanceIDs
	s.InstanceTags = o.InstanceTags
	s.Name = o.Name
	s.Namespace = o.Namespace

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *DeploymentAdvisorTerraform) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesDeploymentAdvisorTerraform{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AMIIDs = s.AMIIDs
	o.ID = s.ID.Hex()
	o.NGFWMode = s.NGFWMode
	o.VPCAvailabilityZoneSubnets = s.VPCAvailabilityZoneSubnets
	o.Description = s.Description
	o.DynamicPolicyUpdateEnabled = s.DynamicPolicyUpdateEnabled
	o.Filter = s.Filter
	o.InstanceIDs = s.InstanceIDs
	o.InstanceTags = s.InstanceTags
	o.Name = s.Name
	o.Namespace = s.Namespace

	return nil
}

// Version returns the hardcoded version of the model.
func (o *DeploymentAdvisorTerraform) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *DeploymentAdvisorTerraform) BleveType() string {

	return "deploymentadvisorterraform"
}

// DefaultOrder returns the list of default ordering fields.
func (o *DeploymentAdvisorTerraform) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *DeploymentAdvisorTerraform) Doc() string {

	return `Represents a Cloud NGFW Deployment Advisor core service.`
}

func (o *DeploymentAdvisorTerraform) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetDescription returns the Description of the receiver.
func (o *DeploymentAdvisorTerraform) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *DeploymentAdvisorTerraform) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *DeploymentAdvisorTerraform) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *DeploymentAdvisorTerraform) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *DeploymentAdvisorTerraform) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *DeploymentAdvisorTerraform) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *DeploymentAdvisorTerraform) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseDeploymentAdvisorTerraform{
			AMIIDs:                     &o.AMIIDs,
			ID:                         &o.ID,
			NGFWMode:                   &o.NGFWMode,
			VPCAvailabilityZoneSubnets: &o.VPCAvailabilityZoneSubnets,
			Description:                &o.Description,
			DynamicPolicyUpdateEnabled: &o.DynamicPolicyUpdateEnabled,
			Filter:                     o.Filter,
			InstanceIDs:                &o.InstanceIDs,
			InstanceTags:               &o.InstanceTags,
			Name:                       &o.Name,
			Namespace:                  &o.Namespace,
		}
	}

	sp := &SparseDeploymentAdvisorTerraform{}
	for _, f := range fields {
		switch f {
		case "AMIIDs":
			sp.AMIIDs = &(o.AMIIDs)
		case "ID":
			sp.ID = &(o.ID)
		case "NGFWMode":
			sp.NGFWMode = &(o.NGFWMode)
		case "VPCAvailabilityZoneSubnets":
			sp.VPCAvailabilityZoneSubnets = &(o.VPCAvailabilityZoneSubnets)
		case "description":
			sp.Description = &(o.Description)
		case "dynamicPolicyUpdateEnabled":
			sp.DynamicPolicyUpdateEnabled = &(o.DynamicPolicyUpdateEnabled)
		case "filter":
			sp.Filter = o.Filter
		case "instanceIDs":
			sp.InstanceIDs = &(o.InstanceIDs)
		case "instanceTags":
			sp.InstanceTags = &(o.InstanceTags)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseDeploymentAdvisorTerraform to the object.
func (o *DeploymentAdvisorTerraform) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseDeploymentAdvisorTerraform)
	if so.AMIIDs != nil {
		o.AMIIDs = *so.AMIIDs
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.NGFWMode != nil {
		o.NGFWMode = *so.NGFWMode
	}
	if so.VPCAvailabilityZoneSubnets != nil {
		o.VPCAvailabilityZoneSubnets = *so.VPCAvailabilityZoneSubnets
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.DynamicPolicyUpdateEnabled != nil {
		o.DynamicPolicyUpdateEnabled = *so.DynamicPolicyUpdateEnabled
	}
	if so.Filter != nil {
		o.Filter = so.Filter
	}
	if so.InstanceIDs != nil {
		o.InstanceIDs = *so.InstanceIDs
	}
	if so.InstanceTags != nil {
		o.InstanceTags = *so.InstanceTags
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
}

// DeepCopy returns a deep copy if the DeploymentAdvisorTerraform.
func (o *DeploymentAdvisorTerraform) DeepCopy() *DeploymentAdvisorTerraform {

	if o == nil {
		return nil
	}

	out := &DeploymentAdvisorTerraform{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *DeploymentAdvisorTerraform.
func (o *DeploymentAdvisorTerraform) DeepCopyInto(out *DeploymentAdvisorTerraform) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy DeploymentAdvisorTerraform: %s", err))
	}

	*out = *target.(*DeploymentAdvisorTerraform)
}

// Validate valides the current information stored into the structure.
func (o *DeploymentAdvisorTerraform) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("NGFWMode", string(o.NGFWMode)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("NGFWMode", string(o.NGFWMode), []string{"TAP", "NGFW"}, false); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.VPCAvailabilityZoneSubnets {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if o.Filter != nil {
		elemental.ResetDefaultForZeroValues(o.Filter)
		if err := o.Filter.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*DeploymentAdvisorTerraform) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := DeploymentAdvisorTerraformAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return DeploymentAdvisorTerraformLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*DeploymentAdvisorTerraform) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return DeploymentAdvisorTerraformAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *DeploymentAdvisorTerraform) ValueForAttribute(name string) interface{} {

	switch name {
	case "AMIIDs":
		return o.AMIIDs
	case "ID":
		return o.ID
	case "NGFWMode":
		return o.NGFWMode
	case "VPCAvailabilityZoneSubnets":
		return o.VPCAvailabilityZoneSubnets
	case "description":
		return o.Description
	case "dynamicPolicyUpdateEnabled":
		return o.DynamicPolicyUpdateEnabled
	case "filter":
		return o.Filter
	case "instanceIDs":
		return o.InstanceIDs
	case "instanceTags":
		return o.InstanceTags
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	}

	return nil
}

// DeploymentAdvisorTerraformAttributesMap represents the map of attribute for DeploymentAdvisorTerraform.
var DeploymentAdvisorTerraformAttributesMap = map[string]elemental.AttributeSpecification{
	"AMIIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "amiids",
		ConvertedName:  "AMIIDs",
		Description: `The list of all AMI IDs where dynamic updates are to be performed on associated
instances.`,
		Exposed: true,
		Name:    "AMIIDs",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWMode": {
		AllowedChoices: []string{"TAP", "NGFW"},
		BSONFieldName:  "ngfwmode",
		ConvertedName:  "NGFWMode",
		DefaultValue:   DeploymentAdvisorTerraformNGFWModeTAP,
		Description:    `The mode of the Cloud NGFW instance.`,
		Exposed:        true,
		Name:           "NGFWMode",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"VPCAvailabilityZoneSubnets": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcavailabilityzonesubnets",
		ConvertedName:  "VPCAvailabilityZoneSubnets",
		Description: `List of AWS VPC IDs and information about associated firewall subnets in their
respective availability zones.`,
		Exposed: true,
		Name:    "VPCAvailabilityZoneSubnets",
		Stored:  true,
		SubType: "vpcavailabilityzonesubnet",
		Type:    "refList",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"DynamicPolicyUpdateEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "dynamicpolicyupdateenabled",
		ConvertedName:  "DynamicPolicyUpdateEnabled",
		Description: `Whether or not perform dynamic updates in customer VPC e.g. for creating
mirroring policies on new instances.`,
		Exposed: true,
		Name:    "dynamicPolicyUpdateEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"Filter": {
		AllowedChoices: []string{},
		BSONFieldName:  "filter",
		ConvertedName:  "Filter",
		Description:    `Traffic mirror filter to specify what traffic is to be mirrored.`,
		Exposed:        true,
		Name:           "filter",
		Stored:         true,
		SubType:        "mirrorfilter",
		Type:           "ref",
	},
	"InstanceIDs": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceids",
		ConvertedName:  "InstanceIDs",
		Description:    `The list of all instance IDs where dynamic updates are to be performed.`,
		Exposed:        true,
		Name:           "instanceIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"InstanceTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "instancetags",
		ConvertedName:  "InstanceTags",
		Description:    `The list of all instance tags where dynamic updates are to be performed.`,
		Exposed:        true,
		Name:           "instanceTags",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// DeploymentAdvisorTerraformLowerCaseAttributesMap represents the map of attribute for DeploymentAdvisorTerraform.
var DeploymentAdvisorTerraformLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"amiids": {
		AllowedChoices: []string{},
		BSONFieldName:  "amiids",
		ConvertedName:  "AMIIDs",
		Description: `The list of all AMI IDs where dynamic updates are to be performed on associated
instances.`,
		Exposed: true,
		Name:    "AMIIDs",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwmode": {
		AllowedChoices: []string{"TAP", "NGFW"},
		BSONFieldName:  "ngfwmode",
		ConvertedName:  "NGFWMode",
		DefaultValue:   DeploymentAdvisorTerraformNGFWModeTAP,
		Description:    `The mode of the Cloud NGFW instance.`,
		Exposed:        true,
		Name:           "NGFWMode",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"vpcavailabilityzonesubnets": {
		AllowedChoices: []string{},
		BSONFieldName:  "vpcavailabilityzonesubnets",
		ConvertedName:  "VPCAvailabilityZoneSubnets",
		Description: `List of AWS VPC IDs and information about associated firewall subnets in their
respective availability zones.`,
		Exposed: true,
		Name:    "VPCAvailabilityZoneSubnets",
		Stored:  true,
		SubType: "vpcavailabilityzonesubnet",
		Type:    "refList",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"dynamicpolicyupdateenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "dynamicpolicyupdateenabled",
		ConvertedName:  "DynamicPolicyUpdateEnabled",
		Description: `Whether or not perform dynamic updates in customer VPC e.g. for creating
mirroring policies on new instances.`,
		Exposed: true,
		Name:    "dynamicPolicyUpdateEnabled",
		Stored:  true,
		Type:    "boolean",
	},
	"filter": {
		AllowedChoices: []string{},
		BSONFieldName:  "filter",
		ConvertedName:  "Filter",
		Description:    `Traffic mirror filter to specify what traffic is to be mirrored.`,
		Exposed:        true,
		Name:           "filter",
		Stored:         true,
		SubType:        "mirrorfilter",
		Type:           "ref",
	},
	"instanceids": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceids",
		ConvertedName:  "InstanceIDs",
		Description:    `The list of all instance IDs where dynamic updates are to be performed.`,
		Exposed:        true,
		Name:           "instanceIDs",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"instancetags": {
		AllowedChoices: []string{},
		BSONFieldName:  "instancetags",
		ConvertedName:  "InstanceTags",
		Description:    `The list of all instance tags where dynamic updates are to be performed.`,
		Exposed:        true,
		Name:           "instanceTags",
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
}

// SparseDeploymentAdvisorTerraformsList represents a list of SparseDeploymentAdvisorTerraforms
type SparseDeploymentAdvisorTerraformsList []*SparseDeploymentAdvisorTerraform

// Identity returns the identity of the objects in the list.
func (o SparseDeploymentAdvisorTerraformsList) Identity() elemental.Identity {

	return DeploymentAdvisorTerraformIdentity
}

// Copy returns a pointer to a copy the SparseDeploymentAdvisorTerraformsList.
func (o SparseDeploymentAdvisorTerraformsList) Copy() elemental.Identifiables {

	copy := append(SparseDeploymentAdvisorTerraformsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseDeploymentAdvisorTerraformsList.
func (o SparseDeploymentAdvisorTerraformsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseDeploymentAdvisorTerraformsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseDeploymentAdvisorTerraform))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseDeploymentAdvisorTerraformsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseDeploymentAdvisorTerraformsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparseDeploymentAdvisorTerraformsList converted to DeploymentAdvisorTerraformsList.
func (o SparseDeploymentAdvisorTerraformsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseDeploymentAdvisorTerraformsList) Version() int {

	return 1
}

// SparseDeploymentAdvisorTerraform represents the sparse version of a deploymentadvisorterraform.
type SparseDeploymentAdvisorTerraform struct {
	// The list of all AMI IDs where dynamic updates are to be performed on associated
	// instances.
	AMIIDs *[]string `json:"AMIIDs,omitempty" msgpack:"AMIIDs,omitempty" bson:"amiids,omitempty" mapstructure:"AMIIDs,omitempty"`

	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// The mode of the Cloud NGFW instance.
	NGFWMode *DeploymentAdvisorTerraformNGFWModeValue `json:"NGFWMode,omitempty" msgpack:"NGFWMode,omitempty" bson:"ngfwmode,omitempty" mapstructure:"NGFWMode,omitempty"`

	// List of AWS VPC IDs and information about associated firewall subnets in their
	// respective availability zones.
	VPCAvailabilityZoneSubnets *[]*VPCAvailabilityZoneSubnet `json:"VPCAvailabilityZoneSubnets,omitempty" msgpack:"VPCAvailabilityZoneSubnets,omitempty" bson:"vpcavailabilityzonesubnets,omitempty" mapstructure:"VPCAvailabilityZoneSubnets,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Whether or not perform dynamic updates in customer VPC e.g. for creating
	// mirroring policies on new instances.
	DynamicPolicyUpdateEnabled *bool `json:"dynamicPolicyUpdateEnabled,omitempty" msgpack:"dynamicPolicyUpdateEnabled,omitempty" bson:"dynamicpolicyupdateenabled,omitempty" mapstructure:"dynamicPolicyUpdateEnabled,omitempty"`

	// Traffic mirror filter to specify what traffic is to be mirrored.
	Filter *MirrorFilter `json:"filter,omitempty" msgpack:"filter,omitempty" bson:"filter,omitempty" mapstructure:"filter,omitempty"`

	// The list of all instance IDs where dynamic updates are to be performed.
	InstanceIDs *[]string `json:"instanceIDs,omitempty" msgpack:"instanceIDs,omitempty" bson:"instanceids,omitempty" mapstructure:"instanceIDs,omitempty"`

	// The list of all instance tags where dynamic updates are to be performed.
	InstanceTags *[]string `json:"instanceTags,omitempty" msgpack:"instanceTags,omitempty" bson:"instancetags,omitempty" mapstructure:"instanceTags,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseDeploymentAdvisorTerraform returns a new  SparseDeploymentAdvisorTerraform.
func NewSparseDeploymentAdvisorTerraform() *SparseDeploymentAdvisorTerraform {
	return &SparseDeploymentAdvisorTerraform{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseDeploymentAdvisorTerraform) Identity() elemental.Identity {

	return DeploymentAdvisorTerraformIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseDeploymentAdvisorTerraform) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseDeploymentAdvisorTerraform) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseDeploymentAdvisorTerraform) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseDeploymentAdvisorTerraform{}

	if o.AMIIDs != nil {
		s.AMIIDs = o.AMIIDs
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.NGFWMode != nil {
		s.NGFWMode = o.NGFWMode
	}
	if o.VPCAvailabilityZoneSubnets != nil {
		s.VPCAvailabilityZoneSubnets = o.VPCAvailabilityZoneSubnets
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.DynamicPolicyUpdateEnabled != nil {
		s.DynamicPolicyUpdateEnabled = o.DynamicPolicyUpdateEnabled
	}
	if o.Filter != nil {
		s.Filter = o.Filter
	}
	if o.InstanceIDs != nil {
		s.InstanceIDs = o.InstanceIDs
	}
	if o.InstanceTags != nil {
		s.InstanceTags = o.InstanceTags
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseDeploymentAdvisorTerraform) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseDeploymentAdvisorTerraform{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.AMIIDs != nil {
		o.AMIIDs = s.AMIIDs
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.NGFWMode != nil {
		o.NGFWMode = s.NGFWMode
	}
	if s.VPCAvailabilityZoneSubnets != nil {
		o.VPCAvailabilityZoneSubnets = s.VPCAvailabilityZoneSubnets
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.DynamicPolicyUpdateEnabled != nil {
		o.DynamicPolicyUpdateEnabled = s.DynamicPolicyUpdateEnabled
	}
	if s.Filter != nil {
		o.Filter = s.Filter
	}
	if s.InstanceIDs != nil {
		o.InstanceIDs = s.InstanceIDs
	}
	if s.InstanceTags != nil {
		o.InstanceTags = s.InstanceTags
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseDeploymentAdvisorTerraform) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseDeploymentAdvisorTerraform) ToPlain() elemental.PlainIdentifiable {

	out := NewDeploymentAdvisorTerraform()
	if o.AMIIDs != nil {
		out.AMIIDs = *o.AMIIDs
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.NGFWMode != nil {
		out.NGFWMode = *o.NGFWMode
	}
	if o.VPCAvailabilityZoneSubnets != nil {
		out.VPCAvailabilityZoneSubnets = *o.VPCAvailabilityZoneSubnets
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.DynamicPolicyUpdateEnabled != nil {
		out.DynamicPolicyUpdateEnabled = *o.DynamicPolicyUpdateEnabled
	}
	if o.Filter != nil {
		out.Filter = o.Filter
	}
	if o.InstanceIDs != nil {
		out.InstanceIDs = *o.InstanceIDs
	}
	if o.InstanceTags != nil {
		out.InstanceTags = *o.InstanceTags
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}

	return out
}

// GetDescription returns the Description of the receiver.
func (o *SparseDeploymentAdvisorTerraform) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparseDeploymentAdvisorTerraform) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparseDeploymentAdvisorTerraform) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparseDeploymentAdvisorTerraform) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseDeploymentAdvisorTerraform) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseDeploymentAdvisorTerraform) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparseDeploymentAdvisorTerraform.
func (o *SparseDeploymentAdvisorTerraform) DeepCopy() *SparseDeploymentAdvisorTerraform {

	if o == nil {
		return nil
	}

	out := &SparseDeploymentAdvisorTerraform{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseDeploymentAdvisorTerraform.
func (o *SparseDeploymentAdvisorTerraform) DeepCopyInto(out *SparseDeploymentAdvisorTerraform) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseDeploymentAdvisorTerraform: %s", err))
	}

	*out = *target.(*SparseDeploymentAdvisorTerraform)
}

type mongoAttributesDeploymentAdvisorTerraform struct {
	AMIIDs                     []string                                `bson:"amiids"`
	ID                         bson.ObjectId                           `bson:"_id,omitempty"`
	NGFWMode                   DeploymentAdvisorTerraformNGFWModeValue `bson:"ngfwmode"`
	VPCAvailabilityZoneSubnets []*VPCAvailabilityZoneSubnet            `bson:"vpcavailabilityzonesubnets"`
	Description                string                                  `bson:"description"`
	DynamicPolicyUpdateEnabled bool                                    `bson:"dynamicpolicyupdateenabled"`
	Filter                     *MirrorFilter                           `bson:"filter"`
	InstanceIDs                []string                                `bson:"instanceids"`
	InstanceTags               []string                                `bson:"instancetags"`
	Name                       string                                  `bson:"name"`
	Namespace                  string                                  `bson:"namespace"`
}
type mongoAttributesSparseDeploymentAdvisorTerraform struct {
	AMIIDs                     *[]string                                `bson:"amiids,omitempty"`
	ID                         bson.ObjectId                            `bson:"_id,omitempty"`
	NGFWMode                   *DeploymentAdvisorTerraformNGFWModeValue `bson:"ngfwmode,omitempty"`
	VPCAvailabilityZoneSubnets *[]*VPCAvailabilityZoneSubnet            `bson:"vpcavailabilityzonesubnets,omitempty"`
	Description                *string                                  `bson:"description,omitempty"`
	DynamicPolicyUpdateEnabled *bool                                    `bson:"dynamicpolicyupdateenabled,omitempty"`
	Filter                     *MirrorFilter                            `bson:"filter,omitempty"`
	InstanceIDs                *[]string                                `bson:"instanceids,omitempty"`
	InstanceTags               *[]string                                `bson:"instancetags,omitempty"`
	Name                       *string                                  `bson:"name,omitempty"`
	Namespace                  *string                                  `bson:"namespace,omitempty"`
}
