// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// PCFWAccountMirrorSourceStateStatusValue represents the possible values for attribute "status".
type PCFWAccountMirrorSourceStateStatusValue string

const (
	// PCFWAccountMirrorSourceStateStatusFailed represents the value Failed.
	PCFWAccountMirrorSourceStateStatusFailed PCFWAccountMirrorSourceStateStatusValue = "Failed"

	// PCFWAccountMirrorSourceStateStatusSuccess represents the value Success.
	PCFWAccountMirrorSourceStateStatusSuccess PCFWAccountMirrorSourceStateStatusValue = "Success"
)

// PCFWAccountMirrorSourceStateIdentity represents the Identity of the object.
var PCFWAccountMirrorSourceStateIdentity = elemental.Identity{
	Name:     "pcfwaccountmirrorsourcestate",
	Category: "pcfwaccountmirrorsourcestates",
	Package:  "deploymentadvisor",
	Private:  false,
}

// PCFWAccountMirrorSourceStatesList represents a list of PCFWAccountMirrorSourceStates
type PCFWAccountMirrorSourceStatesList []*PCFWAccountMirrorSourceState

// Identity returns the identity of the objects in the list.
func (o PCFWAccountMirrorSourceStatesList) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceStateIdentity
}

// Copy returns a pointer to a copy the PCFWAccountMirrorSourceStatesList.
func (o PCFWAccountMirrorSourceStatesList) Copy() elemental.Identifiables {

	copy := append(PCFWAccountMirrorSourceStatesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the PCFWAccountMirrorSourceStatesList.
func (o PCFWAccountMirrorSourceStatesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PCFWAccountMirrorSourceStatesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PCFWAccountMirrorSourceState))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PCFWAccountMirrorSourceStatesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PCFWAccountMirrorSourceStatesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the PCFWAccountMirrorSourceStatesList converted to SparsePCFWAccountMirrorSourceStatesList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PCFWAccountMirrorSourceStatesList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePCFWAccountMirrorSourceStatesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePCFWAccountMirrorSourceState)
	}

	return out
}

// Version returns the version of the content.
func (o PCFWAccountMirrorSourceStatesList) Version() int {

	return 1
}

// PCFWAccountMirrorSourceState represents the model of a pcfwaccountmirrorsourcestate
type PCFWAccountMirrorSourceState struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// The instance ID that is the source of traffic mirroring.
	InstanceID string `json:"instanceID" msgpack:"instanceID" bson:"instanceid" mapstructure:"instanceID,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// The ENI that is the source of traffic mirroring.
	NetworkInterface string `json:"networkInterface" msgpack:"networkInterface" bson:"networkinterface" mapstructure:"networkInterface,omitempty"`

	// The status of the traffic mirroring session.
	Status PCFWAccountMirrorSourceStateStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// The status description of the traffic mirroring session.
	StatusReason string `json:"statusReason" msgpack:"statusReason" bson:"statusreason" mapstructure:"statusReason,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPCFWAccountMirrorSourceState returns a new *PCFWAccountMirrorSourceState
func NewPCFWAccountMirrorSourceState() *PCFWAccountMirrorSourceState {

	return &PCFWAccountMirrorSourceState{
		ModelVersion: 1,
	}
}

// Identity returns the Identity of the object.
func (o *PCFWAccountMirrorSourceState) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceStateIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PCFWAccountMirrorSourceState) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PCFWAccountMirrorSourceState) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWAccountMirrorSourceState) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPCFWAccountMirrorSourceState{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Description = o.Description
	s.InstanceID = o.InstanceID
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.NetworkInterface = o.NetworkInterface
	s.Status = o.Status
	s.StatusReason = o.StatusReason
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWAccountMirrorSourceState) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPCFWAccountMirrorSourceState{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Description = s.Description
	o.InstanceID = s.InstanceID
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.NetworkInterface = s.NetworkInterface
	o.Status = s.Status
	o.StatusReason = s.StatusReason
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PCFWAccountMirrorSourceState) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PCFWAccountMirrorSourceState) BleveType() string {

	return "pcfwaccountmirrorsourcestate"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PCFWAccountMirrorSourceState) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *PCFWAccountMirrorSourceState) Doc() string {

	return `Represents state of traffic mirror session setup associated with an instance and
network interface for a firewall associatd with a customer account.`
}

func (o *PCFWAccountMirrorSourceState) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetDescription returns the Description of the receiver.
func (o *PCFWAccountMirrorSourceState) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *PCFWAccountMirrorSourceState) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *PCFWAccountMirrorSourceState) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *PCFWAccountMirrorSourceState) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *PCFWAccountMirrorSourceState) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *PCFWAccountMirrorSourceState) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PCFWAccountMirrorSourceState) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePCFWAccountMirrorSourceState{
			ID:               &o.ID,
			Description:      &o.Description,
			InstanceID:       &o.InstanceID,
			Name:             &o.Name,
			Namespace:        &o.Namespace,
			NetworkInterface: &o.NetworkInterface,
			Status:           &o.Status,
			StatusReason:     &o.StatusReason,
			ZHash:            &o.ZHash,
			Zone:             &o.Zone,
		}
	}

	sp := &SparsePCFWAccountMirrorSourceState{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "description":
			sp.Description = &(o.Description)
		case "instanceID":
			sp.InstanceID = &(o.InstanceID)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "networkInterface":
			sp.NetworkInterface = &(o.NetworkInterface)
		case "status":
			sp.Status = &(o.Status)
		case "statusReason":
			sp.StatusReason = &(o.StatusReason)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePCFWAccountMirrorSourceState to the object.
func (o *PCFWAccountMirrorSourceState) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePCFWAccountMirrorSourceState)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.InstanceID != nil {
		o.InstanceID = *so.InstanceID
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NetworkInterface != nil {
		o.NetworkInterface = *so.NetworkInterface
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.StatusReason != nil {
		o.StatusReason = *so.StatusReason
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the PCFWAccountMirrorSourceState.
func (o *PCFWAccountMirrorSourceState) DeepCopy() *PCFWAccountMirrorSourceState {

	if o == nil {
		return nil
	}

	out := &PCFWAccountMirrorSourceState{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PCFWAccountMirrorSourceState.
func (o *PCFWAccountMirrorSourceState) DeepCopyInto(out *PCFWAccountMirrorSourceState) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PCFWAccountMirrorSourceState: %s", err))
	}

	*out = *target.(*PCFWAccountMirrorSourceState)
}

// Validate valides the current information stored into the structure.
func (o *PCFWAccountMirrorSourceState) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Success", "Failed"}, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PCFWAccountMirrorSourceState) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PCFWAccountMirrorSourceStateAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PCFWAccountMirrorSourceStateLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PCFWAccountMirrorSourceState) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PCFWAccountMirrorSourceStateAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PCFWAccountMirrorSourceState) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "description":
		return o.Description
	case "instanceID":
		return o.InstanceID
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "networkInterface":
		return o.NetworkInterface
	case "status":
		return o.Status
	case "statusReason":
		return o.StatusReason
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PCFWAccountMirrorSourceStateAttributesMap represents the map of attribute for PCFWAccountMirrorSourceState.
var PCFWAccountMirrorSourceStateAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"InstanceID": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceid",
		ConvertedName:  "InstanceID",
		Description:    `The instance ID that is the source of traffic mirroring.`,
		Exposed:        true,
		Name:           "instanceID",
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NetworkInterface": {
		AllowedChoices: []string{},
		BSONFieldName:  "networkinterface",
		ConvertedName:  "NetworkInterface",
		Description:    `The ENI that is the source of traffic mirroring.`,
		Exposed:        true,
		Name:           "networkInterface",
		Stored:         true,
		Type:           "string",
	},
	"Status": {
		AllowedChoices: []string{"Success", "Failed"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `The status of the traffic mirroring session.`,
		Exposed:        true,
		Name:           "status",
		Stored:         true,
		Type:           "enum",
	},
	"StatusReason": {
		AllowedChoices: []string{},
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `The status description of the traffic mirroring session.`,
		Exposed:        true,
		Name:           "statusReason",
		Stored:         true,
		Type:           "string",
	},
}

// PCFWAccountMirrorSourceStateLowerCaseAttributesMap represents the map of attribute for PCFWAccountMirrorSourceState.
var PCFWAccountMirrorSourceStateLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"instanceid": {
		AllowedChoices: []string{},
		BSONFieldName:  "instanceid",
		ConvertedName:  "InstanceID",
		Description:    `The instance ID that is the source of traffic mirroring.`,
		Exposed:        true,
		Name:           "instanceID",
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"networkinterface": {
		AllowedChoices: []string{},
		BSONFieldName:  "networkinterface",
		ConvertedName:  "NetworkInterface",
		Description:    `The ENI that is the source of traffic mirroring.`,
		Exposed:        true,
		Name:           "networkInterface",
		Stored:         true,
		Type:           "string",
	},
	"status": {
		AllowedChoices: []string{"Success", "Failed"},
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `The status of the traffic mirroring session.`,
		Exposed:        true,
		Name:           "status",
		Stored:         true,
		Type:           "enum",
	},
	"statusreason": {
		AllowedChoices: []string{},
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `The status description of the traffic mirroring session.`,
		Exposed:        true,
		Name:           "statusReason",
		Stored:         true,
		Type:           "string",
	},
}

// SparsePCFWAccountMirrorSourceStatesList represents a list of SparsePCFWAccountMirrorSourceStates
type SparsePCFWAccountMirrorSourceStatesList []*SparsePCFWAccountMirrorSourceState

// Identity returns the identity of the objects in the list.
func (o SparsePCFWAccountMirrorSourceStatesList) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceStateIdentity
}

// Copy returns a pointer to a copy the SparsePCFWAccountMirrorSourceStatesList.
func (o SparsePCFWAccountMirrorSourceStatesList) Copy() elemental.Identifiables {

	copy := append(SparsePCFWAccountMirrorSourceStatesList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePCFWAccountMirrorSourceStatesList.
func (o SparsePCFWAccountMirrorSourceStatesList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePCFWAccountMirrorSourceStatesList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePCFWAccountMirrorSourceState))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePCFWAccountMirrorSourceStatesList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePCFWAccountMirrorSourceStatesList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparsePCFWAccountMirrorSourceStatesList converted to PCFWAccountMirrorSourceStatesList.
func (o SparsePCFWAccountMirrorSourceStatesList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePCFWAccountMirrorSourceStatesList) Version() int {

	return 1
}

// SparsePCFWAccountMirrorSourceState represents the sparse version of a pcfwaccountmirrorsourcestate.
type SparsePCFWAccountMirrorSourceState struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// The instance ID that is the source of traffic mirroring.
	InstanceID *string `json:"instanceID,omitempty" msgpack:"instanceID,omitempty" bson:"instanceid,omitempty" mapstructure:"instanceID,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// The ENI that is the source of traffic mirroring.
	NetworkInterface *string `json:"networkInterface,omitempty" msgpack:"networkInterface,omitempty" bson:"networkinterface,omitempty" mapstructure:"networkInterface,omitempty"`

	// The status of the traffic mirroring session.
	Status *PCFWAccountMirrorSourceStateStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// The status description of the traffic mirroring session.
	StatusReason *string `json:"statusReason,omitempty" msgpack:"statusReason,omitempty" bson:"statusreason,omitempty" mapstructure:"statusReason,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePCFWAccountMirrorSourceState returns a new  SparsePCFWAccountMirrorSourceState.
func NewSparsePCFWAccountMirrorSourceState() *SparsePCFWAccountMirrorSourceState {
	return &SparsePCFWAccountMirrorSourceState{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePCFWAccountMirrorSourceState) Identity() elemental.Identity {

	return PCFWAccountMirrorSourceStateIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePCFWAccountMirrorSourceState) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePCFWAccountMirrorSourceState) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWAccountMirrorSourceState) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePCFWAccountMirrorSourceState{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.InstanceID != nil {
		s.InstanceID = o.InstanceID
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NetworkInterface != nil {
		s.NetworkInterface = o.NetworkInterface
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.StatusReason != nil {
		s.StatusReason = o.StatusReason
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWAccountMirrorSourceState) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePCFWAccountMirrorSourceState{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.InstanceID != nil {
		o.InstanceID = s.InstanceID
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NetworkInterface != nil {
		o.NetworkInterface = s.NetworkInterface
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.StatusReason != nil {
		o.StatusReason = s.StatusReason
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePCFWAccountMirrorSourceState) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePCFWAccountMirrorSourceState) ToPlain() elemental.PlainIdentifiable {

	out := NewPCFWAccountMirrorSourceState()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.InstanceID != nil {
		out.InstanceID = *o.InstanceID
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NetworkInterface != nil {
		out.NetworkInterface = *o.NetworkInterface
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.StatusReason != nil {
		out.StatusReason = *o.StatusReason
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetDescription returns the Description of the receiver.
func (o *SparsePCFWAccountMirrorSourceState) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparsePCFWAccountMirrorSourceState) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparsePCFWAccountMirrorSourceState) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparsePCFWAccountMirrorSourceState) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePCFWAccountMirrorSourceState) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePCFWAccountMirrorSourceState) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// DeepCopy returns a deep copy if the SparsePCFWAccountMirrorSourceState.
func (o *SparsePCFWAccountMirrorSourceState) DeepCopy() *SparsePCFWAccountMirrorSourceState {

	if o == nil {
		return nil
	}

	out := &SparsePCFWAccountMirrorSourceState{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePCFWAccountMirrorSourceState.
func (o *SparsePCFWAccountMirrorSourceState) DeepCopyInto(out *SparsePCFWAccountMirrorSourceState) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePCFWAccountMirrorSourceState: %s", err))
	}

	*out = *target.(*SparsePCFWAccountMirrorSourceState)
}

type mongoAttributesPCFWAccountMirrorSourceState struct {
	ID               bson.ObjectId                           `bson:"_id,omitempty"`
	Description      string                                  `bson:"description"`
	InstanceID       string                                  `bson:"instanceid"`
	Name             string                                  `bson:"name"`
	Namespace        string                                  `bson:"namespace"`
	NetworkInterface string                                  `bson:"networkinterface"`
	Status           PCFWAccountMirrorSourceStateStatusValue `bson:"status"`
	StatusReason     string                                  `bson:"statusreason"`
	ZHash            int                                     `bson:"zhash"`
	Zone             int                                     `bson:"zone"`
}
type mongoAttributesSparsePCFWAccountMirrorSourceState struct {
	ID               bson.ObjectId                            `bson:"_id,omitempty"`
	Description      *string                                  `bson:"description,omitempty"`
	InstanceID       *string                                  `bson:"instanceid,omitempty"`
	Name             *string                                  `bson:"name,omitempty"`
	Namespace        *string                                  `bson:"namespace,omitempty"`
	NetworkInterface *string                                  `bson:"networkinterface,omitempty"`
	Status           *PCFWAccountMirrorSourceStateStatusValue `bson:"status,omitempty"`
	StatusReason     *string                                  `bson:"statusreason,omitempty"`
	ZHash            *int                                     `bson:"zhash,omitempty"`
	Zone             *int                                     `bson:"zone,omitempty"`
}
