// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// AWSLogDefinitionLogDestinationTypeValue represents the possible values for attribute "logDestinationType".
type AWSLogDefinitionLogDestinationTypeValue string

const (
	// AWSLogDefinitionLogDestinationTypeCloudwatch represents the value Cloudwatch.
	AWSLogDefinitionLogDestinationTypeCloudwatch AWSLogDefinitionLogDestinationTypeValue = "Cloudwatch"

	// AWSLogDefinitionLogDestinationTypeKinesisFirehose represents the value KinesisFirehose.
	AWSLogDefinitionLogDestinationTypeKinesisFirehose AWSLogDefinitionLogDestinationTypeValue = "KinesisFirehose"

	// AWSLogDefinitionLogDestinationTypePrisma represents the value Prisma.
	AWSLogDefinitionLogDestinationTypePrisma AWSLogDefinitionLogDestinationTypeValue = "Prisma"

	// AWSLogDefinitionLogDestinationTypeS3 represents the value S3.
	AWSLogDefinitionLogDestinationTypeS3 AWSLogDefinitionLogDestinationTypeValue = "S3"
)

// AWSLogDefinitionIdentity represents the Identity of the object.
var AWSLogDefinitionIdentity = elemental.Identity{
	Name:     "awslogdefinition",
	Category: "awslogdefinitions",
	Package:  "ngfw",
	Private:  false,
}

// AWSLogDefinitionsList represents a list of AWSLogDefinitions
type AWSLogDefinitionsList []*AWSLogDefinition

// Identity returns the identity of the objects in the list.
func (o AWSLogDefinitionsList) Identity() elemental.Identity {

	return AWSLogDefinitionIdentity
}

// Copy returns a pointer to a copy the AWSLogDefinitionsList.
func (o AWSLogDefinitionsList) Copy() elemental.Identifiables {

	out := append(AWSLogDefinitionsList{}, o...)
	return &out
}

// Append appends the objects to the a new copy of the AWSLogDefinitionsList.
func (o AWSLogDefinitionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(AWSLogDefinitionsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*AWSLogDefinition))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o AWSLogDefinitionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o AWSLogDefinitionsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToSparse returns the AWSLogDefinitionsList converted to SparseAWSLogDefinitionsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o AWSLogDefinitionsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseAWSLogDefinitionsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseAWSLogDefinition)
	}

	return out
}

// Version returns the version of the content.
func (o AWSLogDefinitionsList) Version() int {

	return 1
}

// AWSLogDefinition represents the model of a awslogdefinition
type AWSLogDefinition struct {
	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// Stores additional information about an entity.
	Annotations map[string][]string `json:"annotations" msgpack:"annotations" bson:"annotations" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags []string `json:"associatedTags" msgpack:"associatedTags" bson:"associatedtags" mapstructure:"associatedTags,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey string `json:"-" msgpack:"-" bson:"createidempotencykey" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// The Decryption log is enabled.
	DecryptionEnabled bool `json:"decryptionEnabled" msgpack:"decryptionEnabled" bson:"decryptionenabled" mapstructure:"decryptionEnabled,omitempty"`

	// Description of the object.
	Description string `json:"description" msgpack:"description" bson:"description" mapstructure:"description,omitempty"`

	// Destination for log output.
	LogDestination string `json:"logDestination" msgpack:"logDestination" bson:"logdestination" mapstructure:"logDestination,omitempty"`

	// Destination type for log output.
	LogDestinationType AWSLogDefinitionLogDestinationTypeValue `json:"logDestinationType" msgpack:"logDestinationType" bson:"logdestinationtype" mapstructure:"logDestinationType,omitempty"`

	// The ARN for NGFW to write to the destination.
	LogPushRoleARN string `json:"logPushRoleARN" msgpack:"logPushRoleARN" bson:"logpushrolearn" mapstructure:"logPushRoleARN,omitempty"`

	// The ARN for PCFW to query the destination.
	LogQueryRoleARN string `json:"logQueryRoleARN" msgpack:"logQueryRoleARN" bson:"logqueryrolearn" mapstructure:"logQueryRoleARN,omitempty"`

	// The AWS region where logging data lives.
	LogRegion string `json:"logRegion" msgpack:"logRegion" bson:"logregion" mapstructure:"logRegion,omitempty"`

	// Prefix to use for logging resources.
	LogResourcePrefix string `json:"logResourcePrefix" msgpack:"logResourcePrefix" bson:"logresourceprefix" mapstructure:"logResourcePrefix,omitempty"`

	// Name of the entity.
	Name string `json:"name" msgpack:"name" bson:"name" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags []string `json:"normalizedTags" msgpack:"normalizedTags" bson:"normalizedtags" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected bool `json:"protected" msgpack:"protected" bson:"protected" mapstructure:"protected,omitempty"`

	// The Threat log is enabled.
	ThreatEnabled bool `json:"threatEnabled" msgpack:"threatEnabled" bson:"threatenabled" mapstructure:"threatEnabled,omitempty"`

	// The Traffic log is enabled.
	TrafficEnabled bool `json:"trafficEnabled" msgpack:"trafficEnabled" bson:"trafficenabled" mapstructure:"trafficEnabled,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey string `json:"-" msgpack:"-" bson:"updateidempotencykey" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAWSLogDefinition returns a new *AWSLogDefinition
func NewAWSLogDefinition() *AWSLogDefinition {

	return &AWSLogDefinition{
		ModelVersion:      1,
		Annotations:       map[string][]string{},
		AssociatedTags:    []string{},
		LogResourcePrefix: "pcfw",
		NormalizedTags:    []string{},
	}
}

// Identity returns the Identity of the object.
func (o *AWSLogDefinition) Identity() elemental.Identity {

	return AWSLogDefinitionIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *AWSLogDefinition) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *AWSLogDefinition) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AWSLogDefinition) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAWSLogDefinition{}

	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.Annotations = o.Annotations
	s.AssociatedTags = o.AssociatedTags
	s.CreateIdempotencyKey = o.CreateIdempotencyKey
	s.CreateTime = o.CreateTime
	s.DecryptionEnabled = o.DecryptionEnabled
	s.Description = o.Description
	s.LogDestination = o.LogDestination
	s.LogDestinationType = o.LogDestinationType
	s.LogPushRoleARN = o.LogPushRoleARN
	s.LogQueryRoleARN = o.LogQueryRoleARN
	s.LogRegion = o.LogRegion
	s.LogResourcePrefix = o.LogResourcePrefix
	s.Name = o.Name
	s.Namespace = o.Namespace
	s.NormalizedTags = o.NormalizedTags
	s.Protected = o.Protected
	s.ThreatEnabled = o.ThreatEnabled
	s.TrafficEnabled = o.TrafficEnabled
	s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AWSLogDefinition) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAWSLogDefinition{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.ID = s.ID.Hex()
	o.Annotations = s.Annotations
	o.AssociatedTags = s.AssociatedTags
	o.CreateIdempotencyKey = s.CreateIdempotencyKey
	o.CreateTime = s.CreateTime
	o.DecryptionEnabled = s.DecryptionEnabled
	o.Description = s.Description
	o.LogDestination = s.LogDestination
	o.LogDestinationType = s.LogDestinationType
	o.LogPushRoleARN = s.LogPushRoleARN
	o.LogQueryRoleARN = s.LogQueryRoleARN
	o.LogRegion = s.LogRegion
	o.LogResourcePrefix = s.LogResourcePrefix
	o.Name = s.Name
	o.Namespace = s.Namespace
	o.NormalizedTags = s.NormalizedTags
	o.Protected = s.Protected
	o.ThreatEnabled = s.ThreatEnabled
	o.TrafficEnabled = s.TrafficEnabled
	o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *AWSLogDefinition) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *AWSLogDefinition) BleveType() string {

	return "awslogdefinition"
}

// DefaultOrder returns the list of default ordering fields.
func (o *AWSLogDefinition) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// Doc returns the documentation for the object
func (o *AWSLogDefinition) Doc() string {

	return `Represents a Log Definition.`
}

func (o *AWSLogDefinition) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetAnnotations returns the Annotations of the receiver.
func (o *AWSLogDefinition) GetAnnotations() map[string][]string {

	return o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the given value.
func (o *AWSLogDefinition) SetAnnotations(annotations map[string][]string) {

	o.Annotations = annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *AWSLogDefinition) GetAssociatedTags() []string {

	return o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the given value.
func (o *AWSLogDefinition) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *AWSLogDefinition) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *AWSLogDefinition) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetDescription returns the Description of the receiver.
func (o *AWSLogDefinition) GetDescription() string {

	return o.Description
}

// SetDescription sets the property Description of the receiver using the given value.
func (o *AWSLogDefinition) SetDescription(description string) {

	o.Description = description
}

// GetName returns the Name of the receiver.
func (o *AWSLogDefinition) GetName() string {

	return o.Name
}

// SetName sets the property Name of the receiver using the given value.
func (o *AWSLogDefinition) SetName(name string) {

	o.Name = name
}

// GetNamespace returns the Namespace of the receiver.
func (o *AWSLogDefinition) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *AWSLogDefinition) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *AWSLogDefinition) GetNormalizedTags() []string {

	return o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the given value.
func (o *AWSLogDefinition) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *AWSLogDefinition) GetProtected() bool {

	return o.Protected
}

// SetProtected sets the property Protected of the receiver using the given value.
func (o *AWSLogDefinition) SetProtected(protected bool) {

	o.Protected = protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *AWSLogDefinition) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *AWSLogDefinition) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *AWSLogDefinition) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseAWSLogDefinition{
			ID:                   &o.ID,
			Annotations:          &o.Annotations,
			AssociatedTags:       &o.AssociatedTags,
			CreateIdempotencyKey: &o.CreateIdempotencyKey,
			CreateTime:           &o.CreateTime,
			DecryptionEnabled:    &o.DecryptionEnabled,
			Description:          &o.Description,
			LogDestination:       &o.LogDestination,
			LogDestinationType:   &o.LogDestinationType,
			LogPushRoleARN:       &o.LogPushRoleARN,
			LogQueryRoleARN:      &o.LogQueryRoleARN,
			LogRegion:            &o.LogRegion,
			LogResourcePrefix:    &o.LogResourcePrefix,
			Name:                 &o.Name,
			Namespace:            &o.Namespace,
			NormalizedTags:       &o.NormalizedTags,
			Protected:            &o.Protected,
			ThreatEnabled:        &o.ThreatEnabled,
			TrafficEnabled:       &o.TrafficEnabled,
			UpdateIdempotencyKey: &o.UpdateIdempotencyKey,
			UpdateTime:           &o.UpdateTime,
			ZHash:                &o.ZHash,
			Zone:                 &o.Zone,
		}
	}

	sp := &SparseAWSLogDefinition{}
	for _, f := range fields {
		switch f {
		case "ID":
			sp.ID = &(o.ID)
		case "annotations":
			sp.Annotations = &(o.Annotations)
		case "associatedTags":
			sp.AssociatedTags = &(o.AssociatedTags)
		case "createIdempotencyKey":
			sp.CreateIdempotencyKey = &(o.CreateIdempotencyKey)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "decryptionEnabled":
			sp.DecryptionEnabled = &(o.DecryptionEnabled)
		case "description":
			sp.Description = &(o.Description)
		case "logDestination":
			sp.LogDestination = &(o.LogDestination)
		case "logDestinationType":
			sp.LogDestinationType = &(o.LogDestinationType)
		case "logPushRoleARN":
			sp.LogPushRoleARN = &(o.LogPushRoleARN)
		case "logQueryRoleARN":
			sp.LogQueryRoleARN = &(o.LogQueryRoleARN)
		case "logRegion":
			sp.LogRegion = &(o.LogRegion)
		case "logResourcePrefix":
			sp.LogResourcePrefix = &(o.LogResourcePrefix)
		case "name":
			sp.Name = &(o.Name)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "normalizedTags":
			sp.NormalizedTags = &(o.NormalizedTags)
		case "protected":
			sp.Protected = &(o.Protected)
		case "threatEnabled":
			sp.ThreatEnabled = &(o.ThreatEnabled)
		case "trafficEnabled":
			sp.TrafficEnabled = &(o.TrafficEnabled)
		case "updateIdempotencyKey":
			sp.UpdateIdempotencyKey = &(o.UpdateIdempotencyKey)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseAWSLogDefinition to the object.
func (o *AWSLogDefinition) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseAWSLogDefinition)
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.Annotations != nil {
		o.Annotations = *so.Annotations
	}
	if so.AssociatedTags != nil {
		o.AssociatedTags = *so.AssociatedTags
	}
	if so.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = *so.CreateIdempotencyKey
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DecryptionEnabled != nil {
		o.DecryptionEnabled = *so.DecryptionEnabled
	}
	if so.Description != nil {
		o.Description = *so.Description
	}
	if so.LogDestination != nil {
		o.LogDestination = *so.LogDestination
	}
	if so.LogDestinationType != nil {
		o.LogDestinationType = *so.LogDestinationType
	}
	if so.LogPushRoleARN != nil {
		o.LogPushRoleARN = *so.LogPushRoleARN
	}
	if so.LogQueryRoleARN != nil {
		o.LogQueryRoleARN = *so.LogQueryRoleARN
	}
	if so.LogRegion != nil {
		o.LogRegion = *so.LogRegion
	}
	if so.LogResourcePrefix != nil {
		o.LogResourcePrefix = *so.LogResourcePrefix
	}
	if so.Name != nil {
		o.Name = *so.Name
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.NormalizedTags != nil {
		o.NormalizedTags = *so.NormalizedTags
	}
	if so.Protected != nil {
		o.Protected = *so.Protected
	}
	if so.ThreatEnabled != nil {
		o.ThreatEnabled = *so.ThreatEnabled
	}
	if so.TrafficEnabled != nil {
		o.TrafficEnabled = *so.TrafficEnabled
	}
	if so.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = *so.UpdateIdempotencyKey
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the AWSLogDefinition.
func (o *AWSLogDefinition) DeepCopy() *AWSLogDefinition {

	if o == nil {
		return nil
	}

	out := &AWSLogDefinition{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AWSLogDefinition.
func (o *AWSLogDefinition) DeepCopyInto(out *AWSLogDefinition) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AWSLogDefinition: %s", err))
	}

	*out = *target.(*AWSLogDefinition)
}

// Validate valides the current information stored into the structure.
func (o *AWSLogDefinition) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateTagsWithoutReservedPrefixes("associatedTags", o.AssociatedTags); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("description", o.Description, 1024, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestination", o.LogDestination); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestinationType", string(o.LogDestinationType)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("logDestinationType", string(o.LogDestinationType), []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logRegion", o.LogRegion); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logResourcePrefix", o.LogResourcePrefix); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("name", o.Name); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateMaximumLength("name", o.Name, 256, false); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AWSLogDefinition) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AWSLogDefinitionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AWSLogDefinitionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AWSLogDefinition) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AWSLogDefinitionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AWSLogDefinition) ValueForAttribute(name string) any {

	switch name {
	case "ID":
		return o.ID
	case "annotations":
		return o.Annotations
	case "associatedTags":
		return o.AssociatedTags
	case "createIdempotencyKey":
		return o.CreateIdempotencyKey
	case "createTime":
		return o.CreateTime
	case "decryptionEnabled":
		return o.DecryptionEnabled
	case "description":
		return o.Description
	case "logDestination":
		return o.LogDestination
	case "logDestinationType":
		return o.LogDestinationType
	case "logPushRoleARN":
		return o.LogPushRoleARN
	case "logQueryRoleARN":
		return o.LogQueryRoleARN
	case "logRegion":
		return o.LogRegion
	case "logResourcePrefix":
		return o.LogResourcePrefix
	case "name":
		return o.Name
	case "namespace":
		return o.Namespace
	case "normalizedTags":
		return o.NormalizedTags
	case "protected":
		return o.Protected
	case "threatEnabled":
		return o.ThreatEnabled
	case "trafficEnabled":
		return o.TrafficEnabled
	case "updateIdempotencyKey":
		return o.UpdateIdempotencyKey
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// AWSLogDefinitionAttributesMap represents the map of attribute for AWSLogDefinition.
var AWSLogDefinitionAttributesMap = map[string]elemental.AttributeSpecification{
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"Annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"AssociatedTags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DecryptionEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionenabled",
		ConvertedName:  "DecryptionEnabled",
		Description:    `The Decryption log is enabled.`,
		Exposed:        true,
		Name:           "decryptionEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"Description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `Destination for log output.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestinationType": {
		AllowedChoices: []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"},
		BSONFieldName:  "logdestinationtype",
		ConvertedName:  "LogDestinationType",
		Description:    `Destination type for log output.`,
		Exposed:        true,
		Name:           "logDestinationType",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"LogPushRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "logpushrolearn",
		ConvertedName:  "LogPushRoleARN",
		Description:    `The ARN for NGFW to write to the destination.`,
		Exposed:        true,
		Name:           "logPushRoleARN",
		Stored:         true,
		Type:           "string",
	},
	"LogQueryRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "logqueryrolearn",
		ConvertedName:  "LogQueryRoleARN",
		Description:    `The ARN for PCFW to query the destination.`,
		Exposed:        true,
		Name:           "logQueryRoleARN",
		Stored:         true,
		Type:           "string",
	},
	"LogRegion": {
		AllowedChoices: []string{},
		BSONFieldName:  "logregion",
		ConvertedName:  "LogRegion",
		Description:    `The AWS region where logging data lives.`,
		Exposed:        true,
		Name:           "logRegion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogResourcePrefix": {
		AllowedChoices: []string{},
		BSONFieldName:  "logresourceprefix",
		ConvertedName:  "LogResourcePrefix",
		DefaultValue:   "pcfw",
		Description:    `Prefix to use for logging resources.`,
		Exposed:        true,
		Name:           "logResourcePrefix",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"NormalizedTags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"Protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"ThreatEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "threatenabled",
		ConvertedName:  "ThreatEnabled",
		Description:    `The Threat log is enabled.`,
		Exposed:        true,
		Name:           "threatEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"TrafficEnabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "trafficenabled",
		ConvertedName:  "TrafficEnabled",
		Description:    `The Traffic log is enabled.`,
		Exposed:        true,
		Name:           "trafficEnabled",
		Stored:         true,
		Type:           "boolean",
	},

	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// AWSLogDefinitionLowerCaseAttributesMap represents the map of attribute for AWSLogDefinition.
var AWSLogDefinitionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"annotations": {
		AllowedChoices: []string{},
		BSONFieldName:  "annotations",
		ConvertedName:  "Annotations",
		Description:    `Stores additional information about an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "annotations",
		Setter:         true,
		Stored:         true,
		SubType:        "map[string][]string",
		Type:           "external",
	},
	"associatedtags": {
		AllowedChoices: []string{},
		BSONFieldName:  "associatedtags",
		ConvertedName:  "AssociatedTags",
		Description:    `List of tags attached to an entity.`,
		Exposed:        true,
		Getter:         true,
		Name:           "associatedTags",
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Type:           "list",
	},

	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"decryptionenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionenabled",
		ConvertedName:  "DecryptionEnabled",
		Description:    `The Decryption log is enabled.`,
		Exposed:        true,
		Name:           "decryptionEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"description": {
		AllowedChoices: []string{},
		BSONFieldName:  "description",
		ConvertedName:  "Description",
		Description:    `Description of the object.`,
		Exposed:        true,
		Getter:         true,
		MaxLength:      1024,
		Name:           "description",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"logdestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `Destination for log output.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logdestinationtype": {
		AllowedChoices: []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"},
		BSONFieldName:  "logdestinationtype",
		ConvertedName:  "LogDestinationType",
		Description:    `Destination type for log output.`,
		Exposed:        true,
		Name:           "logDestinationType",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"logpushrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "logpushrolearn",
		ConvertedName:  "LogPushRoleARN",
		Description:    `The ARN for NGFW to write to the destination.`,
		Exposed:        true,
		Name:           "logPushRoleARN",
		Stored:         true,
		Type:           "string",
	},
	"logqueryrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "logqueryrolearn",
		ConvertedName:  "LogQueryRoleARN",
		Description:    `The ARN for PCFW to query the destination.`,
		Exposed:        true,
		Name:           "logQueryRoleARN",
		Stored:         true,
		Type:           "string",
	},
	"logregion": {
		AllowedChoices: []string{},
		BSONFieldName:  "logregion",
		ConvertedName:  "LogRegion",
		Description:    `The AWS region where logging data lives.`,
		Exposed:        true,
		Name:           "logRegion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logresourceprefix": {
		AllowedChoices: []string{},
		BSONFieldName:  "logresourceprefix",
		ConvertedName:  "LogResourcePrefix",
		DefaultValue:   "pcfw",
		Description:    `Prefix to use for logging resources.`,
		Exposed:        true,
		Name:           "logResourcePrefix",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"name": {
		AllowedChoices: []string{},
		BSONFieldName:  "name",
		ConvertedName:  "Name",
		Description:    `Name of the entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		MaxLength:      256,
		Name:           "name",
		Orderable:      true,
		Required:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"normalizedtags": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "normalizedtags",
		ConvertedName:  "NormalizedTags",
		Description:    `Contains the list of normalized tags of the entities.`,
		Exposed:        true,
		Getter:         true,
		Name:           "normalizedTags",
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		SubType:        "string",
		Transient:      true,
		Type:           "list",
	},
	"protected": {
		AllowedChoices: []string{},
		BSONFieldName:  "protected",
		ConvertedName:  "Protected",
		Description:    `Defines if the object is protected.`,
		Exposed:        true,
		Getter:         true,
		Name:           "protected",
		Orderable:      true,
		Setter:         true,
		Stored:         true,
		Type:           "boolean",
	},
	"threatenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "threatenabled",
		ConvertedName:  "ThreatEnabled",
		Description:    `The Threat log is enabled.`,
		Exposed:        true,
		Name:           "threatEnabled",
		Stored:         true,
		Type:           "boolean",
	},
	"trafficenabled": {
		AllowedChoices: []string{},
		BSONFieldName:  "trafficenabled",
		ConvertedName:  "TrafficEnabled",
		Description:    `The Traffic log is enabled.`,
		Exposed:        true,
		Name:           "trafficEnabled",
		Stored:         true,
		Type:           "boolean",
	},

	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparseAWSLogDefinitionsList represents a list of SparseAWSLogDefinitions
type SparseAWSLogDefinitionsList []*SparseAWSLogDefinition

// Identity returns the identity of the objects in the list.
func (o SparseAWSLogDefinitionsList) Identity() elemental.Identity {

	return AWSLogDefinitionIdentity
}

// Copy returns a pointer to a copy the SparseAWSLogDefinitionsList.
func (o SparseAWSLogDefinitionsList) Copy() elemental.Identifiables {

	copy := append(SparseAWSLogDefinitionsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseAWSLogDefinitionsList.
func (o SparseAWSLogDefinitionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseAWSLogDefinitionsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseAWSLogDefinition))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseAWSLogDefinitionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseAWSLogDefinitionsList) DefaultOrder() []string {

	return []string{
		"name",
	}
}

// ToPlain returns the SparseAWSLogDefinitionsList converted to AWSLogDefinitionsList.
func (o SparseAWSLogDefinitionsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseAWSLogDefinitionsList) Version() int {

	return 1
}

// SparseAWSLogDefinition represents the sparse version of a awslogdefinition.
type SparseAWSLogDefinition struct {
	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// Stores additional information about an entity.
	Annotations *map[string][]string `json:"annotations,omitempty" msgpack:"annotations,omitempty" bson:"annotations,omitempty" mapstructure:"annotations,omitempty"`

	// List of tags attached to an entity.
	AssociatedTags *[]string `json:"associatedTags,omitempty" msgpack:"associatedTags,omitempty" bson:"associatedtags,omitempty" mapstructure:"associatedTags,omitempty"`

	// internal idempotency key for a create operation.
	CreateIdempotencyKey *string `json:"-" msgpack:"-" bson:"createidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// The Decryption log is enabled.
	DecryptionEnabled *bool `json:"decryptionEnabled,omitempty" msgpack:"decryptionEnabled,omitempty" bson:"decryptionenabled,omitempty" mapstructure:"decryptionEnabled,omitempty"`

	// Description of the object.
	Description *string `json:"description,omitempty" msgpack:"description,omitempty" bson:"description,omitempty" mapstructure:"description,omitempty"`

	// Destination for log output.
	LogDestination *string `json:"logDestination,omitempty" msgpack:"logDestination,omitempty" bson:"logdestination,omitempty" mapstructure:"logDestination,omitempty"`

	// Destination type for log output.
	LogDestinationType *AWSLogDefinitionLogDestinationTypeValue `json:"logDestinationType,omitempty" msgpack:"logDestinationType,omitempty" bson:"logdestinationtype,omitempty" mapstructure:"logDestinationType,omitempty"`

	// The ARN for NGFW to write to the destination.
	LogPushRoleARN *string `json:"logPushRoleARN,omitempty" msgpack:"logPushRoleARN,omitempty" bson:"logpushrolearn,omitempty" mapstructure:"logPushRoleARN,omitempty"`

	// The ARN for PCFW to query the destination.
	LogQueryRoleARN *string `json:"logQueryRoleARN,omitempty" msgpack:"logQueryRoleARN,omitempty" bson:"logqueryrolearn,omitempty" mapstructure:"logQueryRoleARN,omitempty"`

	// The AWS region where logging data lives.
	LogRegion *string `json:"logRegion,omitempty" msgpack:"logRegion,omitempty" bson:"logregion,omitempty" mapstructure:"logRegion,omitempty"`

	// Prefix to use for logging resources.
	LogResourcePrefix *string `json:"logResourcePrefix,omitempty" msgpack:"logResourcePrefix,omitempty" bson:"logresourceprefix,omitempty" mapstructure:"logResourcePrefix,omitempty"`

	// Name of the entity.
	Name *string `json:"name,omitempty" msgpack:"name,omitempty" bson:"name,omitempty" mapstructure:"name,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// Contains the list of normalized tags of the entities.
	NormalizedTags *[]string `json:"normalizedTags,omitempty" msgpack:"normalizedTags,omitempty" bson:"normalizedtags,omitempty" mapstructure:"normalizedTags,omitempty"`

	// Defines if the object is protected.
	Protected *bool `json:"protected,omitempty" msgpack:"protected,omitempty" bson:"protected,omitempty" mapstructure:"protected,omitempty"`

	// The Threat log is enabled.
	ThreatEnabled *bool `json:"threatEnabled,omitempty" msgpack:"threatEnabled,omitempty" bson:"threatenabled,omitempty" mapstructure:"threatEnabled,omitempty"`

	// The Traffic log is enabled.
	TrafficEnabled *bool `json:"trafficEnabled,omitempty" msgpack:"trafficEnabled,omitempty" bson:"trafficenabled,omitempty" mapstructure:"trafficEnabled,omitempty"`

	// internal idempotency key for a update operation.
	UpdateIdempotencyKey *string `json:"-" msgpack:"-" bson:"updateidempotencykey,omitempty" mapstructure:"-,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseAWSLogDefinition returns a new  SparseAWSLogDefinition.
func NewSparseAWSLogDefinition() *SparseAWSLogDefinition {
	return &SparseAWSLogDefinition{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseAWSLogDefinition) Identity() elemental.Identity {

	return AWSLogDefinitionIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseAWSLogDefinition) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseAWSLogDefinition) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAWSLogDefinition) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseAWSLogDefinition{}

	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.Annotations != nil {
		s.Annotations = o.Annotations
	}
	if o.AssociatedTags != nil {
		s.AssociatedTags = o.AssociatedTags
	}
	if o.CreateIdempotencyKey != nil {
		s.CreateIdempotencyKey = o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DecryptionEnabled != nil {
		s.DecryptionEnabled = o.DecryptionEnabled
	}
	if o.Description != nil {
		s.Description = o.Description
	}
	if o.LogDestination != nil {
		s.LogDestination = o.LogDestination
	}
	if o.LogDestinationType != nil {
		s.LogDestinationType = o.LogDestinationType
	}
	if o.LogPushRoleARN != nil {
		s.LogPushRoleARN = o.LogPushRoleARN
	}
	if o.LogQueryRoleARN != nil {
		s.LogQueryRoleARN = o.LogQueryRoleARN
	}
	if o.LogRegion != nil {
		s.LogRegion = o.LogRegion
	}
	if o.LogResourcePrefix != nil {
		s.LogResourcePrefix = o.LogResourcePrefix
	}
	if o.Name != nil {
		s.Name = o.Name
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.NormalizedTags != nil {
		s.NormalizedTags = o.NormalizedTags
	}
	if o.Protected != nil {
		s.Protected = o.Protected
	}
	if o.ThreatEnabled != nil {
		s.ThreatEnabled = o.ThreatEnabled
	}
	if o.TrafficEnabled != nil {
		s.TrafficEnabled = o.TrafficEnabled
	}
	if o.UpdateIdempotencyKey != nil {
		s.UpdateIdempotencyKey = o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseAWSLogDefinition) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseAWSLogDefinition{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	id := s.ID.Hex()
	o.ID = &id
	if s.Annotations != nil {
		o.Annotations = s.Annotations
	}
	if s.AssociatedTags != nil {
		o.AssociatedTags = s.AssociatedTags
	}
	if s.CreateIdempotencyKey != nil {
		o.CreateIdempotencyKey = s.CreateIdempotencyKey
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DecryptionEnabled != nil {
		o.DecryptionEnabled = s.DecryptionEnabled
	}
	if s.Description != nil {
		o.Description = s.Description
	}
	if s.LogDestination != nil {
		o.LogDestination = s.LogDestination
	}
	if s.LogDestinationType != nil {
		o.LogDestinationType = s.LogDestinationType
	}
	if s.LogPushRoleARN != nil {
		o.LogPushRoleARN = s.LogPushRoleARN
	}
	if s.LogQueryRoleARN != nil {
		o.LogQueryRoleARN = s.LogQueryRoleARN
	}
	if s.LogRegion != nil {
		o.LogRegion = s.LogRegion
	}
	if s.LogResourcePrefix != nil {
		o.LogResourcePrefix = s.LogResourcePrefix
	}
	if s.Name != nil {
		o.Name = s.Name
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.NormalizedTags != nil {
		o.NormalizedTags = s.NormalizedTags
	}
	if s.Protected != nil {
		o.Protected = s.Protected
	}
	if s.ThreatEnabled != nil {
		o.ThreatEnabled = s.ThreatEnabled
	}
	if s.TrafficEnabled != nil {
		o.TrafficEnabled = s.TrafficEnabled
	}
	if s.UpdateIdempotencyKey != nil {
		o.UpdateIdempotencyKey = s.UpdateIdempotencyKey
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseAWSLogDefinition) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseAWSLogDefinition) ToPlain() elemental.PlainIdentifiable {

	out := NewAWSLogDefinition()
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.Annotations != nil {
		out.Annotations = *o.Annotations
	}
	if o.AssociatedTags != nil {
		out.AssociatedTags = *o.AssociatedTags
	}
	if o.CreateIdempotencyKey != nil {
		out.CreateIdempotencyKey = *o.CreateIdempotencyKey
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DecryptionEnabled != nil {
		out.DecryptionEnabled = *o.DecryptionEnabled
	}
	if o.Description != nil {
		out.Description = *o.Description
	}
	if o.LogDestination != nil {
		out.LogDestination = *o.LogDestination
	}
	if o.LogDestinationType != nil {
		out.LogDestinationType = *o.LogDestinationType
	}
	if o.LogPushRoleARN != nil {
		out.LogPushRoleARN = *o.LogPushRoleARN
	}
	if o.LogQueryRoleARN != nil {
		out.LogQueryRoleARN = *o.LogQueryRoleARN
	}
	if o.LogRegion != nil {
		out.LogRegion = *o.LogRegion
	}
	if o.LogResourcePrefix != nil {
		out.LogResourcePrefix = *o.LogResourcePrefix
	}
	if o.Name != nil {
		out.Name = *o.Name
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.NormalizedTags != nil {
		out.NormalizedTags = *o.NormalizedTags
	}
	if o.Protected != nil {
		out.Protected = *o.Protected
	}
	if o.ThreatEnabled != nil {
		out.ThreatEnabled = *o.ThreatEnabled
	}
	if o.TrafficEnabled != nil {
		out.TrafficEnabled = *o.TrafficEnabled
	}
	if o.UpdateIdempotencyKey != nil {
		out.UpdateIdempotencyKey = *o.UpdateIdempotencyKey
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetAnnotations returns the Annotations of the receiver.
func (o *SparseAWSLogDefinition) GetAnnotations() (out map[string][]string) {

	if o.Annotations == nil {
		return
	}

	return *o.Annotations
}

// SetAnnotations sets the property Annotations of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetAnnotations(annotations map[string][]string) {

	o.Annotations = &annotations
}

// GetAssociatedTags returns the AssociatedTags of the receiver.
func (o *SparseAWSLogDefinition) GetAssociatedTags() (out []string) {

	if o.AssociatedTags == nil {
		return
	}

	return *o.AssociatedTags
}

// SetAssociatedTags sets the property AssociatedTags of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetAssociatedTags(associatedTags []string) {

	o.AssociatedTags = &associatedTags
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparseAWSLogDefinition) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetDescription returns the Description of the receiver.
func (o *SparseAWSLogDefinition) GetDescription() (out string) {

	if o.Description == nil {
		return
	}

	return *o.Description
}

// SetDescription sets the property Description of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetDescription(description string) {

	o.Description = &description
}

// GetName returns the Name of the receiver.
func (o *SparseAWSLogDefinition) GetName() (out string) {

	if o.Name == nil {
		return
	}

	return *o.Name
}

// SetName sets the property Name of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetName(name string) {

	o.Name = &name
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparseAWSLogDefinition) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetNormalizedTags returns the NormalizedTags of the receiver.
func (o *SparseAWSLogDefinition) GetNormalizedTags() (out []string) {

	if o.NormalizedTags == nil {
		return
	}

	return *o.NormalizedTags
}

// SetNormalizedTags sets the property NormalizedTags of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetNormalizedTags(normalizedTags []string) {

	o.NormalizedTags = &normalizedTags
}

// GetProtected returns the Protected of the receiver.
func (o *SparseAWSLogDefinition) GetProtected() (out bool) {

	if o.Protected == nil {
		return
	}

	return *o.Protected
}

// SetProtected sets the property Protected of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetProtected(protected bool) {

	o.Protected = &protected
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparseAWSLogDefinition) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparseAWSLogDefinition) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparseAWSLogDefinition.
func (o *SparseAWSLogDefinition) DeepCopy() *SparseAWSLogDefinition {

	if o == nil {
		return nil
	}

	out := &SparseAWSLogDefinition{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseAWSLogDefinition.
func (o *SparseAWSLogDefinition) DeepCopyInto(out *SparseAWSLogDefinition) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseAWSLogDefinition: %s", err))
	}

	*out = *target.(*SparseAWSLogDefinition)
}

type mongoAttributesAWSLogDefinition struct {
	ID                   bson.ObjectId                           `bson:"_id,omitempty"`
	Annotations          map[string][]string                     `bson:"annotations"`
	AssociatedTags       []string                                `bson:"associatedtags"`
	CreateIdempotencyKey string                                  `bson:"createidempotencykey"`
	CreateTime           time.Time                               `bson:"createtime"`
	DecryptionEnabled    bool                                    `bson:"decryptionenabled"`
	Description          string                                  `bson:"description"`
	LogDestination       string                                  `bson:"logdestination"`
	LogDestinationType   AWSLogDefinitionLogDestinationTypeValue `bson:"logdestinationtype"`
	LogPushRoleARN       string                                  `bson:"logpushrolearn"`
	LogQueryRoleARN      string                                  `bson:"logqueryrolearn"`
	LogRegion            string                                  `bson:"logregion"`
	LogResourcePrefix    string                                  `bson:"logresourceprefix"`
	Name                 string                                  `bson:"name"`
	Namespace            string                                  `bson:"namespace"`
	NormalizedTags       []string                                `bson:"normalizedtags"`
	Protected            bool                                    `bson:"protected"`
	ThreatEnabled        bool                                    `bson:"threatenabled"`
	TrafficEnabled       bool                                    `bson:"trafficenabled"`
	UpdateIdempotencyKey string                                  `bson:"updateidempotencykey"`
	UpdateTime           time.Time                               `bson:"updatetime"`
	ZHash                int                                     `bson:"zhash"`
	Zone                 int                                     `bson:"zone"`
}
type mongoAttributesSparseAWSLogDefinition struct {
	ID                   bson.ObjectId                            `bson:"_id,omitempty"`
	Annotations          *map[string][]string                     `bson:"annotations,omitempty"`
	AssociatedTags       *[]string                                `bson:"associatedtags,omitempty"`
	CreateIdempotencyKey *string                                  `bson:"createidempotencykey,omitempty"`
	CreateTime           *time.Time                               `bson:"createtime,omitempty"`
	DecryptionEnabled    *bool                                    `bson:"decryptionenabled,omitempty"`
	Description          *string                                  `bson:"description,omitempty"`
	LogDestination       *string                                  `bson:"logdestination,omitempty"`
	LogDestinationType   *AWSLogDefinitionLogDestinationTypeValue `bson:"logdestinationtype,omitempty"`
	LogPushRoleARN       *string                                  `bson:"logpushrolearn,omitempty"`
	LogQueryRoleARN      *string                                  `bson:"logqueryrolearn,omitempty"`
	LogRegion            *string                                  `bson:"logregion,omitempty"`
	LogResourcePrefix    *string                                  `bson:"logresourceprefix,omitempty"`
	Name                 *string                                  `bson:"name,omitempty"`
	Namespace            *string                                  `bson:"namespace,omitempty"`
	NormalizedTags       *[]string                                `bson:"normalizedtags,omitempty"`
	Protected            *bool                                    `bson:"protected,omitempty"`
	ThreatEnabled        *bool                                    `bson:"threatenabled,omitempty"`
	TrafficEnabled       *bool                                    `bson:"trafficenabled,omitempty"`
	UpdateIdempotencyKey *string                                  `bson:"updateidempotencykey,omitempty"`
	UpdateTime           *time.Time                               `bson:"updatetime,omitempty"`
	ZHash                *int                                     `bson:"zhash,omitempty"`
	Zone                 *int                                     `bson:"zone,omitempty"`
}
