// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// FirewallRollbackActionActionStatusValue represents the possible values for attribute "actionStatus".
type FirewallRollbackActionActionStatusValue string

const (
	// FirewallRollbackActionActionStatusFailure represents the value Failure.
	FirewallRollbackActionActionStatusFailure FirewallRollbackActionActionStatusValue = "Failure"

	// FirewallRollbackActionActionStatusSuccess represents the value Success.
	FirewallRollbackActionActionStatusSuccess FirewallRollbackActionActionStatusValue = "Success"
)

// FirewallRollbackActionIdentity represents the Identity of the object.
var FirewallRollbackActionIdentity = elemental.Identity{
	Name:     "firewallrollbackaction",
	Category: "firewallrollbackactions",
	Package:  "ngfw",
	Private:  false,
}

// FirewallRollbackActionsList represents a list of FirewallRollbackActions
type FirewallRollbackActionsList []*FirewallRollbackAction

// Identity returns the identity of the objects in the list.
func (o FirewallRollbackActionsList) Identity() elemental.Identity {

	return FirewallRollbackActionIdentity
}

// Copy returns a pointer to a copy the FirewallRollbackActionsList.
func (o FirewallRollbackActionsList) Copy() elemental.Identifiables {

	copy := append(FirewallRollbackActionsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the FirewallRollbackActionsList.
func (o FirewallRollbackActionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(FirewallRollbackActionsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*FirewallRollbackAction))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o FirewallRollbackActionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o FirewallRollbackActionsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the FirewallRollbackActionsList converted to SparseFirewallRollbackActionsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o FirewallRollbackActionsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparseFirewallRollbackActionsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparseFirewallRollbackAction)
	}

	return out
}

// Version returns the version of the content.
func (o FirewallRollbackActionsList) Version() int {

	return 1
}

// FirewallRollbackAction represents the model of a firewallrollbackaction
type FirewallRollbackAction struct {
	// The status of action.
	ActionStatus FirewallRollbackActionActionStatusValue `json:"actionStatus" msgpack:"actionStatus" bson:"-" mapstructure:"actionStatus,omitempty"`

	// The action status description.
	ActionStatusReason string `json:"actionStatusReason" msgpack:"actionStatusReason" bson:"-" mapstructure:"actionStatusReason,omitempty"`

	// The firewalls affected by the rollback action.
	AffectedFirewalls []*FirewallStatus `json:"affectedFirewalls" msgpack:"affectedFirewalls" bson:"affectedfirewalls" mapstructure:"affectedFirewalls,omitempty"`

	// The ID of the committedfirewallruleset that we are rolling back to.
	CommittedFirewallRulesetID string `json:"committedFirewallRulesetID" msgpack:"committedFirewallRulesetID" bson:"-" mapstructure:"committedFirewallRulesetID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewFirewallRollbackAction returns a new *FirewallRollbackAction
func NewFirewallRollbackAction() *FirewallRollbackAction {

	return &FirewallRollbackAction{
		ModelVersion:      1,
		AffectedFirewalls: []*FirewallStatus{},
	}
}

// Identity returns the Identity of the object.
func (o *FirewallRollbackAction) Identity() elemental.Identity {

	return FirewallRollbackActionIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *FirewallRollbackAction) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *FirewallRollbackAction) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallRollbackAction) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesFirewallRollbackAction{}

	s.AffectedFirewalls = o.AffectedFirewalls

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *FirewallRollbackAction) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesFirewallRollbackAction{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AffectedFirewalls = s.AffectedFirewalls

	return nil
}

// Version returns the hardcoded version of the model.
func (o *FirewallRollbackAction) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *FirewallRollbackAction) BleveType() string {

	return "firewallrollbackaction"
}

// DefaultOrder returns the list of default ordering fields.
func (o *FirewallRollbackAction) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *FirewallRollbackAction) Doc() string {

	return `Represents rolling back a committed Rulesets.`
}

func (o *FirewallRollbackAction) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *FirewallRollbackAction) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparseFirewallRollbackAction{
			ActionStatus:               &o.ActionStatus,
			ActionStatusReason:         &o.ActionStatusReason,
			AffectedFirewalls:          &o.AffectedFirewalls,
			CommittedFirewallRulesetID: &o.CommittedFirewallRulesetID,
		}
	}

	sp := &SparseFirewallRollbackAction{}
	for _, f := range fields {
		switch f {
		case "actionStatus":
			sp.ActionStatus = &(o.ActionStatus)
		case "actionStatusReason":
			sp.ActionStatusReason = &(o.ActionStatusReason)
		case "affectedFirewalls":
			sp.AffectedFirewalls = &(o.AffectedFirewalls)
		case "committedFirewallRulesetID":
			sp.CommittedFirewallRulesetID = &(o.CommittedFirewallRulesetID)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparseFirewallRollbackAction to the object.
func (o *FirewallRollbackAction) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparseFirewallRollbackAction)
	if so.ActionStatus != nil {
		o.ActionStatus = *so.ActionStatus
	}
	if so.ActionStatusReason != nil {
		o.ActionStatusReason = *so.ActionStatusReason
	}
	if so.AffectedFirewalls != nil {
		o.AffectedFirewalls = *so.AffectedFirewalls
	}
	if so.CommittedFirewallRulesetID != nil {
		o.CommittedFirewallRulesetID = *so.CommittedFirewallRulesetID
	}
}

// DeepCopy returns a deep copy if the FirewallRollbackAction.
func (o *FirewallRollbackAction) DeepCopy() *FirewallRollbackAction {

	if o == nil {
		return nil
	}

	out := &FirewallRollbackAction{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *FirewallRollbackAction.
func (o *FirewallRollbackAction) DeepCopyInto(out *FirewallRollbackAction) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy FirewallRollbackAction: %s", err))
	}

	*out = *target.(*FirewallRollbackAction)
}

// Validate valides the current information stored into the structure.
func (o *FirewallRollbackAction) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateStringInList("actionStatus", string(o.ActionStatus), []string{"Success", "Failure"}, false); err != nil {
		errors = errors.Append(err)
	}

	for _, sub := range o.AffectedFirewalls {
		if sub == nil {
			continue
		}
		elemental.ResetDefaultForZeroValues(sub)
		if err := sub.Validate(); err != nil {
			errors = errors.Append(err)
		}
	}

	if err := elemental.ValidateRequiredString("committedFirewallRulesetID", o.CommittedFirewallRulesetID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*FirewallRollbackAction) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := FirewallRollbackActionAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return FirewallRollbackActionLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*FirewallRollbackAction) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return FirewallRollbackActionAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *FirewallRollbackAction) ValueForAttribute(name string) interface{} {

	switch name {
	case "actionStatus":
		return o.ActionStatus
	case "actionStatusReason":
		return o.ActionStatusReason
	case "affectedFirewalls":
		return o.AffectedFirewalls
	case "committedFirewallRulesetID":
		return o.CommittedFirewallRulesetID
	}

	return nil
}

// FirewallRollbackActionAttributesMap represents the map of attribute for FirewallRollbackAction.
var FirewallRollbackActionAttributesMap = map[string]elemental.AttributeSpecification{
	"ActionStatus": {
		AllowedChoices: []string{"Success", "Failure"},
		ConvertedName:  "ActionStatus",
		Description:    `The status of action.`,
		Exposed:        true,
		Name:           "actionStatus",
		ReadOnly:       true,
		Type:           "enum",
	},
	"ActionStatusReason": {
		AllowedChoices: []string{},
		ConvertedName:  "ActionStatusReason",
		Description:    `The action status description.`,
		Exposed:        true,
		Name:           "actionStatusReason",
		ReadOnly:       true,
		Type:           "string",
	},
	"AffectedFirewalls": {
		AllowedChoices: []string{},
		BSONFieldName:  "affectedfirewalls",
		ConvertedName:  "AffectedFirewalls",
		Description:    `The firewalls affected by the rollback action.`,
		Exposed:        true,
		Name:           "affectedFirewalls",
		Stored:         true,
		SubType:        "firewallstatus",
		Type:           "refList",
	},
	"CommittedFirewallRulesetID": {
		AllowedChoices: []string{},
		ConvertedName:  "CommittedFirewallRulesetID",
		Description:    `The ID of the committedfirewallruleset that we are rolling back to.`,
		Exposed:        true,
		Name:           "committedFirewallRulesetID",
		Required:       true,
		Type:           "string",
	},
}

// FirewallRollbackActionLowerCaseAttributesMap represents the map of attribute for FirewallRollbackAction.
var FirewallRollbackActionLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"actionstatus": {
		AllowedChoices: []string{"Success", "Failure"},
		ConvertedName:  "ActionStatus",
		Description:    `The status of action.`,
		Exposed:        true,
		Name:           "actionStatus",
		ReadOnly:       true,
		Type:           "enum",
	},
	"actionstatusreason": {
		AllowedChoices: []string{},
		ConvertedName:  "ActionStatusReason",
		Description:    `The action status description.`,
		Exposed:        true,
		Name:           "actionStatusReason",
		ReadOnly:       true,
		Type:           "string",
	},
	"affectedfirewalls": {
		AllowedChoices: []string{},
		BSONFieldName:  "affectedfirewalls",
		ConvertedName:  "AffectedFirewalls",
		Description:    `The firewalls affected by the rollback action.`,
		Exposed:        true,
		Name:           "affectedFirewalls",
		Stored:         true,
		SubType:        "firewallstatus",
		Type:           "refList",
	},
	"committedfirewallrulesetid": {
		AllowedChoices: []string{},
		ConvertedName:  "CommittedFirewallRulesetID",
		Description:    `The ID of the committedfirewallruleset that we are rolling back to.`,
		Exposed:        true,
		Name:           "committedFirewallRulesetID",
		Required:       true,
		Type:           "string",
	},
}

// SparseFirewallRollbackActionsList represents a list of SparseFirewallRollbackActions
type SparseFirewallRollbackActionsList []*SparseFirewallRollbackAction

// Identity returns the identity of the objects in the list.
func (o SparseFirewallRollbackActionsList) Identity() elemental.Identity {

	return FirewallRollbackActionIdentity
}

// Copy returns a pointer to a copy the SparseFirewallRollbackActionsList.
func (o SparseFirewallRollbackActionsList) Copy() elemental.Identifiables {

	copy := append(SparseFirewallRollbackActionsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparseFirewallRollbackActionsList.
func (o SparseFirewallRollbackActionsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparseFirewallRollbackActionsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparseFirewallRollbackAction))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparseFirewallRollbackActionsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparseFirewallRollbackActionsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparseFirewallRollbackActionsList converted to FirewallRollbackActionsList.
func (o SparseFirewallRollbackActionsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparseFirewallRollbackActionsList) Version() int {

	return 1
}

// SparseFirewallRollbackAction represents the sparse version of a firewallrollbackaction.
type SparseFirewallRollbackAction struct {
	// The status of action.
	ActionStatus *FirewallRollbackActionActionStatusValue `json:"actionStatus,omitempty" msgpack:"actionStatus,omitempty" bson:"-" mapstructure:"actionStatus,omitempty"`

	// The action status description.
	ActionStatusReason *string `json:"actionStatusReason,omitempty" msgpack:"actionStatusReason,omitempty" bson:"-" mapstructure:"actionStatusReason,omitempty"`

	// The firewalls affected by the rollback action.
	AffectedFirewalls *[]*FirewallStatus `json:"affectedFirewalls,omitempty" msgpack:"affectedFirewalls,omitempty" bson:"affectedfirewalls,omitempty" mapstructure:"affectedFirewalls,omitempty"`

	// The ID of the committedfirewallruleset that we are rolling back to.
	CommittedFirewallRulesetID *string `json:"committedFirewallRulesetID,omitempty" msgpack:"committedFirewallRulesetID,omitempty" bson:"-" mapstructure:"committedFirewallRulesetID,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparseFirewallRollbackAction returns a new  SparseFirewallRollbackAction.
func NewSparseFirewallRollbackAction() *SparseFirewallRollbackAction {
	return &SparseFirewallRollbackAction{}
}

// Identity returns the Identity of the sparse object.
func (o *SparseFirewallRollbackAction) Identity() elemental.Identity {

	return FirewallRollbackActionIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparseFirewallRollbackAction) Identifier() string {

	return ""
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparseFirewallRollbackAction) SetIdentifier(id string) {

}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallRollbackAction) GetBSON() (interface{}, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparseFirewallRollbackAction{}

	if o.AffectedFirewalls != nil {
		s.AffectedFirewalls = o.AffectedFirewalls
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparseFirewallRollbackAction) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparseFirewallRollbackAction{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.AffectedFirewalls != nil {
		o.AffectedFirewalls = s.AffectedFirewalls
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparseFirewallRollbackAction) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparseFirewallRollbackAction) ToPlain() elemental.PlainIdentifiable {

	out := NewFirewallRollbackAction()
	if o.ActionStatus != nil {
		out.ActionStatus = *o.ActionStatus
	}
	if o.ActionStatusReason != nil {
		out.ActionStatusReason = *o.ActionStatusReason
	}
	if o.AffectedFirewalls != nil {
		out.AffectedFirewalls = *o.AffectedFirewalls
	}
	if o.CommittedFirewallRulesetID != nil {
		out.CommittedFirewallRulesetID = *o.CommittedFirewallRulesetID
	}

	return out
}

// DeepCopy returns a deep copy if the SparseFirewallRollbackAction.
func (o *SparseFirewallRollbackAction) DeepCopy() *SparseFirewallRollbackAction {

	if o == nil {
		return nil
	}

	out := &SparseFirewallRollbackAction{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparseFirewallRollbackAction.
func (o *SparseFirewallRollbackAction) DeepCopyInto(out *SparseFirewallRollbackAction) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparseFirewallRollbackAction: %s", err))
	}

	*out = *target.(*SparseFirewallRollbackAction)
}

type mongoAttributesFirewallRollbackAction struct {
	AffectedFirewalls []*FirewallStatus `bson:"affectedfirewalls"`
}
type mongoAttributesSparseFirewallRollbackAction struct {
	AffectedFirewalls *[]*FirewallStatus `bson:"affectedfirewalls,omitempty"`
}
