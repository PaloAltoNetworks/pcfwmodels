// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"
	"time"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// PCFWAccountLogDestinationTypeValue represents the possible values for attribute "logDestinationType".
type PCFWAccountLogDestinationTypeValue string

const (
	// PCFWAccountLogDestinationTypeCloudwatch represents the value Cloudwatch.
	PCFWAccountLogDestinationTypeCloudwatch PCFWAccountLogDestinationTypeValue = "Cloudwatch"

	// PCFWAccountLogDestinationTypeKinesisFirehose represents the value KinesisFirehose.
	PCFWAccountLogDestinationTypeKinesisFirehose PCFWAccountLogDestinationTypeValue = "KinesisFirehose"

	// PCFWAccountLogDestinationTypePrisma represents the value Prisma.
	PCFWAccountLogDestinationTypePrisma PCFWAccountLogDestinationTypeValue = "Prisma"

	// PCFWAccountLogDestinationTypeS3 represents the value S3.
	PCFWAccountLogDestinationTypeS3 PCFWAccountLogDestinationTypeValue = "S3"
)

// PCFWAccountStatusValue represents the possible values for attribute "status".
type PCFWAccountStatusValue string

const (
	// PCFWAccountStatusCreating represents the value Creating.
	PCFWAccountStatusCreating PCFWAccountStatusValue = "Creating"

	// PCFWAccountStatusDeleting represents the value Deleting.
	PCFWAccountStatusDeleting PCFWAccountStatusValue = "Deleting"

	// PCFWAccountStatusFailed represents the value Failed.
	PCFWAccountStatusFailed PCFWAccountStatusValue = "Failed"

	// PCFWAccountStatusPending represents the value Pending.
	PCFWAccountStatusPending PCFWAccountStatusValue = "Pending"

	// PCFWAccountStatusSuccess represents the value Success.
	PCFWAccountStatusSuccess PCFWAccountStatusValue = "Success"
)

// PCFWAccountIdentity represents the Identity of the object.
var PCFWAccountIdentity = elemental.Identity{
	Name:     "pcfwaccount",
	Category: "pcfwaccounts",
	Package:  "ngfw",
	Private:  false,
}

// PCFWAccountsList represents a list of PCFWAccounts
type PCFWAccountsList []*PCFWAccount

// Identity returns the identity of the objects in the list.
func (o PCFWAccountsList) Identity() elemental.Identity {

	return PCFWAccountIdentity
}

// Copy returns a pointer to a copy the PCFWAccountsList.
func (o PCFWAccountsList) Copy() elemental.Identifiables {

	copy := append(PCFWAccountsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the PCFWAccountsList.
func (o PCFWAccountsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(PCFWAccountsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*PCFWAccount))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o PCFWAccountsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o PCFWAccountsList) DefaultOrder() []string {

	return []string{}
}

// ToSparse returns the PCFWAccountsList converted to SparsePCFWAccountsList.
// Objects in the list will only contain the given fields. No field means entire field set.
func (o PCFWAccountsList) ToSparse(fields ...string) elemental.Identifiables {

	out := make(SparsePCFWAccountsList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToSparse(fields...).(*SparsePCFWAccount)
	}

	return out
}

// Version returns the version of the content.
func (o PCFWAccountsList) Version() int {

	return 1
}

// PCFWAccount represents the model of a pcfwaccount
type PCFWAccount struct {
	// AWS Account ID.
	AWSAccountID string `json:"AWSAccountID" msgpack:"AWSAccountID" bson:"awsaccountid" mapstructure:"AWSAccountID,omitempty"`

	// Identifier of the object.
	ID string `json:"ID" msgpack:"ID" bson:"-" mapstructure:"ID,omitempty"`

	// NGFW cloud formation template hash.
	NGFWCFTHash string `json:"NGFWCFTHash" msgpack:"NGFWCFTHash" bson:"ngfwcfthash" mapstructure:"NGFWCFTHash,omitempty"`

	// NGFW external ID.
	NGFWExternalID string `json:"NGFWExternalID" msgpack:"NGFWExternalID" bson:"ngfwexternalid" mapstructure:"NGFWExternalID,omitempty"`

	// NGFW onboarding status.
	NGFWOnboardingStatus string `json:"NGFWOnboardingStatus" msgpack:"NGFWOnboardingStatus" bson:"ngfwonboardingstatus" mapstructure:"NGFWOnboardingStatus,omitempty"`

	// NGFW AWS service account ID.
	NGFWServiceAccountID string `json:"NGFWServiceAccountID" msgpack:"NGFWServiceAccountID" bson:"ngfwserviceaccountid" mapstructure:"NGFWServiceAccountID,omitempty"`

	// NGFW tenant ID.
	NGFWTenantID string `json:"NGFWTenantID" msgpack:"NGFWTenantID" bson:"ngfwtenantid" mapstructure:"NGFWTenantID,omitempty"`

	// Creation date of the object.
	CreateTime time.Time `json:"createTime" msgpack:"createTime" bson:"createtime" mapstructure:"createTime,omitempty"`

	// AWS rulestack decryption role ARN.
	DecryptionRoleARN string `json:"decryptionRoleARN" msgpack:"decryptionRoleARN" bson:"decryptionrolearn" mapstructure:"decryptionRoleARN,omitempty"`

	// AWS endpoint role ARN.
	EndpointRoleARN string `json:"endpointRoleARN" msgpack:"endpointRoleARN" bson:"endpointrolearn" mapstructure:"endpointRoleARN,omitempty"`

	// The log destination for logging.
	LogDestination string `json:"logDestination" msgpack:"logDestination" bson:"logdestination" mapstructure:"logDestination,omitempty"`

	// Destination type for log output.
	LogDestinationType PCFWAccountLogDestinationTypeValue `json:"logDestinationType" msgpack:"logDestinationType" bson:"logdestinationtype" mapstructure:"logDestinationType,omitempty"`

	// The AWS region where logging data lives.
	LogRegion string `json:"logRegion" msgpack:"logRegion" bson:"logregion" mapstructure:"logRegion,omitempty"`

	// AWS logging role ARN.
	LoggingRoleARN string `json:"loggingRoleARN" msgpack:"loggingRoleARN" bson:"loggingrolearn" mapstructure:"loggingRoleARN,omitempty"`

	// Namespace tag attached to an entity.
	Namespace string `json:"namespace" msgpack:"namespace" bson:"namespace" mapstructure:"namespace,omitempty"`

	// indicates the primary AWS account.
	PrimaryAccount bool `json:"primaryAccount" msgpack:"primaryAccount" bson:"primaryaccount" mapstructure:"primaryAccount,omitempty"`

	// status of account.
	Status PCFWAccountStatusValue `json:"status" msgpack:"status" bson:"status" mapstructure:"status,omitempty"`

	// status failure reason.
	StatusReason string `json:"statusReason" msgpack:"statusReason" bson:"statusreason" mapstructure:"statusReason,omitempty"`

	// Last update date of the object.
	UpdateTime time.Time `json:"updateTime" msgpack:"updateTime" bson:"updatetime" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash int `json:"-" msgpack:"-" bson:"zhash" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone int `json:"-" msgpack:"-" bson:"zone" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewPCFWAccount returns a new *PCFWAccount
func NewPCFWAccount() *PCFWAccount {

	return &PCFWAccount{
		ModelVersion:       1,
		LogDestinationType: PCFWAccountLogDestinationTypePrisma,
	}
}

// Identity returns the Identity of the object.
func (o *PCFWAccount) Identity() elemental.Identity {

	return PCFWAccountIdentity
}

// Identifier returns the value of the object's unique identifier.
func (o *PCFWAccount) Identifier() string {

	return o.ID
}

// SetIdentifier sets the value of the object's unique identifier.
func (o *PCFWAccount) SetIdentifier(id string) {

	o.ID = id
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWAccount) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesPCFWAccount{}

	s.AWSAccountID = o.AWSAccountID
	if o.ID != "" {
		s.ID = bson.ObjectIdHex(o.ID)
	}
	s.NGFWCFTHash = o.NGFWCFTHash
	s.NGFWExternalID = o.NGFWExternalID
	s.NGFWOnboardingStatus = o.NGFWOnboardingStatus
	s.NGFWServiceAccountID = o.NGFWServiceAccountID
	s.NGFWTenantID = o.NGFWTenantID
	s.CreateTime = o.CreateTime
	s.DecryptionRoleARN = o.DecryptionRoleARN
	s.EndpointRoleARN = o.EndpointRoleARN
	s.LogDestination = o.LogDestination
	s.LogDestinationType = o.LogDestinationType
	s.LogRegion = o.LogRegion
	s.LoggingRoleARN = o.LoggingRoleARN
	s.Namespace = o.Namespace
	s.PrimaryAccount = o.PrimaryAccount
	s.Status = o.Status
	s.StatusReason = o.StatusReason
	s.UpdateTime = o.UpdateTime
	s.ZHash = o.ZHash
	s.Zone = o.Zone

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *PCFWAccount) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesPCFWAccount{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AWSAccountID = s.AWSAccountID
	o.ID = s.ID.Hex()
	o.NGFWCFTHash = s.NGFWCFTHash
	o.NGFWExternalID = s.NGFWExternalID
	o.NGFWOnboardingStatus = s.NGFWOnboardingStatus
	o.NGFWServiceAccountID = s.NGFWServiceAccountID
	o.NGFWTenantID = s.NGFWTenantID
	o.CreateTime = s.CreateTime
	o.DecryptionRoleARN = s.DecryptionRoleARN
	o.EndpointRoleARN = s.EndpointRoleARN
	o.LogDestination = s.LogDestination
	o.LogDestinationType = s.LogDestinationType
	o.LogRegion = s.LogRegion
	o.LoggingRoleARN = s.LoggingRoleARN
	o.Namespace = s.Namespace
	o.PrimaryAccount = s.PrimaryAccount
	o.Status = s.Status
	o.StatusReason = s.StatusReason
	o.UpdateTime = s.UpdateTime
	o.ZHash = s.ZHash
	o.Zone = s.Zone

	return nil
}

// Version returns the hardcoded version of the model.
func (o *PCFWAccount) Version() int {

	return 1
}

// BleveType implements the bleve.Classifier Interface.
func (o *PCFWAccount) BleveType() string {

	return "pcfwaccount"
}

// DefaultOrder returns the list of default ordering fields.
func (o *PCFWAccount) DefaultOrder() []string {

	return []string{}
}

// Doc returns the documentation for the object
func (o *PCFWAccount) Doc() string {

	return `Represents Prisma Cloud Firewall Account.`
}

func (o *PCFWAccount) String() string {

	return fmt.Sprintf("<%s:%s>", o.Identity().Name, o.Identifier())
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *PCFWAccount) GetCreateTime() time.Time {

	return o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the given value.
func (o *PCFWAccount) SetCreateTime(createTime time.Time) {

	o.CreateTime = createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *PCFWAccount) GetNamespace() string {

	return o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the given value.
func (o *PCFWAccount) SetNamespace(namespace string) {

	o.Namespace = namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *PCFWAccount) GetUpdateTime() time.Time {

	return o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the given value.
func (o *PCFWAccount) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = updateTime
}

// ToSparse returns the sparse version of the model.
// The returned object will only contain the given fields. No field means entire field set.
func (o *PCFWAccount) ToSparse(fields ...string) elemental.SparseIdentifiable {

	if len(fields) == 0 {
		// nolint: goimports
		return &SparsePCFWAccount{
			AWSAccountID:         &o.AWSAccountID,
			ID:                   &o.ID,
			NGFWCFTHash:          &o.NGFWCFTHash,
			NGFWExternalID:       &o.NGFWExternalID,
			NGFWOnboardingStatus: &o.NGFWOnboardingStatus,
			NGFWServiceAccountID: &o.NGFWServiceAccountID,
			NGFWTenantID:         &o.NGFWTenantID,
			CreateTime:           &o.CreateTime,
			DecryptionRoleARN:    &o.DecryptionRoleARN,
			EndpointRoleARN:      &o.EndpointRoleARN,
			LogDestination:       &o.LogDestination,
			LogDestinationType:   &o.LogDestinationType,
			LogRegion:            &o.LogRegion,
			LoggingRoleARN:       &o.LoggingRoleARN,
			Namespace:            &o.Namespace,
			PrimaryAccount:       &o.PrimaryAccount,
			Status:               &o.Status,
			StatusReason:         &o.StatusReason,
			UpdateTime:           &o.UpdateTime,
			ZHash:                &o.ZHash,
			Zone:                 &o.Zone,
		}
	}

	sp := &SparsePCFWAccount{}
	for _, f := range fields {
		switch f {
		case "AWSAccountID":
			sp.AWSAccountID = &(o.AWSAccountID)
		case "ID":
			sp.ID = &(o.ID)
		case "NGFWCFTHash":
			sp.NGFWCFTHash = &(o.NGFWCFTHash)
		case "NGFWExternalID":
			sp.NGFWExternalID = &(o.NGFWExternalID)
		case "NGFWOnboardingStatus":
			sp.NGFWOnboardingStatus = &(o.NGFWOnboardingStatus)
		case "NGFWServiceAccountID":
			sp.NGFWServiceAccountID = &(o.NGFWServiceAccountID)
		case "NGFWTenantID":
			sp.NGFWTenantID = &(o.NGFWTenantID)
		case "createTime":
			sp.CreateTime = &(o.CreateTime)
		case "decryptionRoleARN":
			sp.DecryptionRoleARN = &(o.DecryptionRoleARN)
		case "endpointRoleARN":
			sp.EndpointRoleARN = &(o.EndpointRoleARN)
		case "logDestination":
			sp.LogDestination = &(o.LogDestination)
		case "logDestinationType":
			sp.LogDestinationType = &(o.LogDestinationType)
		case "logRegion":
			sp.LogRegion = &(o.LogRegion)
		case "loggingRoleARN":
			sp.LoggingRoleARN = &(o.LoggingRoleARN)
		case "namespace":
			sp.Namespace = &(o.Namespace)
		case "primaryAccount":
			sp.PrimaryAccount = &(o.PrimaryAccount)
		case "status":
			sp.Status = &(o.Status)
		case "statusReason":
			sp.StatusReason = &(o.StatusReason)
		case "updateTime":
			sp.UpdateTime = &(o.UpdateTime)
		case "zHash":
			sp.ZHash = &(o.ZHash)
		case "zone":
			sp.Zone = &(o.Zone)
		}
	}

	return sp
}

// Patch apply the non nil value of a *SparsePCFWAccount to the object.
func (o *PCFWAccount) Patch(sparse elemental.SparseIdentifiable) {
	if !sparse.Identity().IsEqual(o.Identity()) {
		panic("cannot patch from a parse with different identity")
	}

	so := sparse.(*SparsePCFWAccount)
	if so.AWSAccountID != nil {
		o.AWSAccountID = *so.AWSAccountID
	}
	if so.ID != nil {
		o.ID = *so.ID
	}
	if so.NGFWCFTHash != nil {
		o.NGFWCFTHash = *so.NGFWCFTHash
	}
	if so.NGFWExternalID != nil {
		o.NGFWExternalID = *so.NGFWExternalID
	}
	if so.NGFWOnboardingStatus != nil {
		o.NGFWOnboardingStatus = *so.NGFWOnboardingStatus
	}
	if so.NGFWServiceAccountID != nil {
		o.NGFWServiceAccountID = *so.NGFWServiceAccountID
	}
	if so.NGFWTenantID != nil {
		o.NGFWTenantID = *so.NGFWTenantID
	}
	if so.CreateTime != nil {
		o.CreateTime = *so.CreateTime
	}
	if so.DecryptionRoleARN != nil {
		o.DecryptionRoleARN = *so.DecryptionRoleARN
	}
	if so.EndpointRoleARN != nil {
		o.EndpointRoleARN = *so.EndpointRoleARN
	}
	if so.LogDestination != nil {
		o.LogDestination = *so.LogDestination
	}
	if so.LogDestinationType != nil {
		o.LogDestinationType = *so.LogDestinationType
	}
	if so.LogRegion != nil {
		o.LogRegion = *so.LogRegion
	}
	if so.LoggingRoleARN != nil {
		o.LoggingRoleARN = *so.LoggingRoleARN
	}
	if so.Namespace != nil {
		o.Namespace = *so.Namespace
	}
	if so.PrimaryAccount != nil {
		o.PrimaryAccount = *so.PrimaryAccount
	}
	if so.Status != nil {
		o.Status = *so.Status
	}
	if so.StatusReason != nil {
		o.StatusReason = *so.StatusReason
	}
	if so.UpdateTime != nil {
		o.UpdateTime = *so.UpdateTime
	}
	if so.ZHash != nil {
		o.ZHash = *so.ZHash
	}
	if so.Zone != nil {
		o.Zone = *so.Zone
	}
}

// DeepCopy returns a deep copy if the PCFWAccount.
func (o *PCFWAccount) DeepCopy() *PCFWAccount {

	if o == nil {
		return nil
	}

	out := &PCFWAccount{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *PCFWAccount.
func (o *PCFWAccount) DeepCopyInto(out *PCFWAccount) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy PCFWAccount: %s", err))
	}

	*out = *target.(*PCFWAccount)
}

// Validate valides the current information stored into the structure.
func (o *PCFWAccount) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := elemental.ValidateRequiredString("AWSAccountID", o.AWSAccountID); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("decryptionRoleARN", o.DecryptionRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("endpointRoleARN", o.EndpointRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestination", o.LogDestination); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logDestinationType", string(o.LogDestinationType)); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("logDestinationType", string(o.LogDestinationType), []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"}, false); err != nil {
		errors = errors.Append(err)
	}

	if err := elemental.ValidateRequiredString("logRegion", o.LogRegion); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateRequiredString("loggingRoleARN", o.LoggingRoleARN); err != nil {
		requiredErrors = requiredErrors.Append(err)
	}

	if err := elemental.ValidateStringInList("status", string(o.Status), []string{"Creating", "Pending", "Success", "Failed", "Deleting"}, true); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*PCFWAccount) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := PCFWAccountAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return PCFWAccountLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*PCFWAccount) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return PCFWAccountAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *PCFWAccount) ValueForAttribute(name string) any {

	switch name {
	case "AWSAccountID":
		return o.AWSAccountID
	case "ID":
		return o.ID
	case "NGFWCFTHash":
		return o.NGFWCFTHash
	case "NGFWExternalID":
		return o.NGFWExternalID
	case "NGFWOnboardingStatus":
		return o.NGFWOnboardingStatus
	case "NGFWServiceAccountID":
		return o.NGFWServiceAccountID
	case "NGFWTenantID":
		return o.NGFWTenantID
	case "createTime":
		return o.CreateTime
	case "decryptionRoleARN":
		return o.DecryptionRoleARN
	case "endpointRoleARN":
		return o.EndpointRoleARN
	case "logDestination":
		return o.LogDestination
	case "logDestinationType":
		return o.LogDestinationType
	case "logRegion":
		return o.LogRegion
	case "loggingRoleARN":
		return o.LoggingRoleARN
	case "namespace":
		return o.Namespace
	case "primaryAccount":
		return o.PrimaryAccount
	case "status":
		return o.Status
	case "statusReason":
		return o.StatusReason
	case "updateTime":
		return o.UpdateTime
	case "zHash":
		return o.ZHash
	case "zone":
		return o.Zone
	}

	return nil
}

// PCFWAccountAttributesMap represents the map of attribute for PCFWAccount.
var PCFWAccountAttributesMap = map[string]elemental.AttributeSpecification{
	"AWSAccountID": {
		AllowedChoices: []string{},
		BSONFieldName:  "awsaccountid",
		ConvertedName:  "AWSAccountID",
		Description:    `AWS Account ID.`,
		Exposed:        true,
		Name:           "AWSAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"ID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWCFTHash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwcfthash",
		ConvertedName:  "NGFWCFTHash",
		Description:    `NGFW cloud formation template hash.`,
		Exposed:        true,
		Name:           "NGFWCFTHash",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWExternalID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwexternalid",
		ConvertedName:  "NGFWExternalID",
		Description:    `NGFW external ID.`,
		Exposed:        true,
		Name:           "NGFWExternalID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWOnboardingStatus": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwonboardingstatus",
		ConvertedName:  "NGFWOnboardingStatus",
		Description:    `NGFW onboarding status.`,
		Exposed:        true,
		Name:           "NGFWOnboardingStatus",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWServiceAccountID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwserviceaccountid",
		ConvertedName:  "NGFWServiceAccountID",
		Description:    `NGFW AWS service account ID.`,
		Exposed:        true,
		Name:           "NGFWServiceAccountID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"NGFWTenantID": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwtenantid",
		ConvertedName:  "NGFWTenantID",
		Description:    `NGFW tenant ID.`,
		Exposed:        true,
		Name:           "NGFWTenantID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"CreateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"DecryptionRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionrolearn",
		ConvertedName:  "DecryptionRoleARN",
		Description:    `AWS rulestack decryption role ARN.`,
		Exposed:        true,
		Name:           "decryptionRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"EndpointRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointrolearn",
		ConvertedName:  "EndpointRoleARN",
		Description:    `AWS endpoint role ARN.`,
		Exposed:        true,
		Name:           "endpointRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `The log destination for logging.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LogDestinationType": {
		AllowedChoices: []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"},
		BSONFieldName:  "logdestinationtype",
		ConvertedName:  "LogDestinationType",
		DefaultValue:   PCFWAccountLogDestinationTypePrisma,
		Description:    `Destination type for log output.`,
		Exposed:        true,
		Name:           "logDestinationType",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"LogRegion": {
		AllowedChoices: []string{},
		BSONFieldName:  "logregion",
		ConvertedName:  "LogRegion",
		Description:    `The AWS region where logging data lives.`,
		Exposed:        true,
		Name:           "logRegion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"LoggingRoleARN": {
		AllowedChoices: []string{},
		BSONFieldName:  "loggingrolearn",
		ConvertedName:  "LoggingRoleARN",
		Description:    `AWS logging role ARN.`,
		Exposed:        true,
		Name:           "loggingRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"Namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"PrimaryAccount": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "primaryaccount",
		ConvertedName:  "PrimaryAccount",
		Description:    `indicates the primary AWS account.`,
		Exposed:        true,
		Name:           "primaryAccount",
		ReadOnly:       true,
		Stored:         true,
		Type:           "boolean",
	},
	"Status": {
		AllowedChoices: []string{"Creating", "Pending", "Success", "Failed", "Deleting"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `status of account.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"StatusReason": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `status failure reason.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"UpdateTime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// PCFWAccountLowerCaseAttributesMap represents the map of attribute for PCFWAccount.
var PCFWAccountLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"awsaccountid": {
		AllowedChoices: []string{},
		BSONFieldName:  "awsaccountid",
		ConvertedName:  "AWSAccountID",
		Description:    `AWS Account ID.`,
		Exposed:        true,
		Name:           "AWSAccountID",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"id": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "_id",
		ConvertedName:  "ID",
		Description:    `Identifier of the object.`,
		Exposed:        true,
		Filterable:     true,
		Identifier:     true,
		Name:           "ID",
		Orderable:      true,
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwcfthash": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwcfthash",
		ConvertedName:  "NGFWCFTHash",
		Description:    `NGFW cloud formation template hash.`,
		Exposed:        true,
		Name:           "NGFWCFTHash",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwexternalid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwexternalid",
		ConvertedName:  "NGFWExternalID",
		Description:    `NGFW external ID.`,
		Exposed:        true,
		Name:           "NGFWExternalID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwonboardingstatus": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwonboardingstatus",
		ConvertedName:  "NGFWOnboardingStatus",
		Description:    `NGFW onboarding status.`,
		Exposed:        true,
		Name:           "NGFWOnboardingStatus",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwserviceaccountid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwserviceaccountid",
		ConvertedName:  "NGFWServiceAccountID",
		Description:    `NGFW AWS service account ID.`,
		Exposed:        true,
		Name:           "NGFWServiceAccountID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"ngfwtenantid": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "ngfwtenantid",
		ConvertedName:  "NGFWTenantID",
		Description:    `NGFW tenant ID.`,
		Exposed:        true,
		Name:           "NGFWTenantID",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"createtime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "createtime",
		ConvertedName:  "CreateTime",
		Description:    `Creation date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "createTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
	"decryptionrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "decryptionrolearn",
		ConvertedName:  "DecryptionRoleARN",
		Description:    `AWS rulestack decryption role ARN.`,
		Exposed:        true,
		Name:           "decryptionRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"endpointrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "endpointrolearn",
		ConvertedName:  "EndpointRoleARN",
		Description:    `AWS endpoint role ARN.`,
		Exposed:        true,
		Name:           "endpointRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logdestination": {
		AllowedChoices: []string{},
		BSONFieldName:  "logdestination",
		ConvertedName:  "LogDestination",
		Description:    `The log destination for logging.`,
		Exposed:        true,
		Name:           "logDestination",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"logdestinationtype": {
		AllowedChoices: []string{"Prisma", "S3", "Cloudwatch", "KinesisFirehose"},
		BSONFieldName:  "logdestinationtype",
		ConvertedName:  "LogDestinationType",
		DefaultValue:   PCFWAccountLogDestinationTypePrisma,
		Description:    `Destination type for log output.`,
		Exposed:        true,
		Name:           "logDestinationType",
		Required:       true,
		Stored:         true,
		Type:           "enum",
	},
	"logregion": {
		AllowedChoices: []string{},
		BSONFieldName:  "logregion",
		ConvertedName:  "LogRegion",
		Description:    `The AWS region where logging data lives.`,
		Exposed:        true,
		Name:           "logRegion",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"loggingrolearn": {
		AllowedChoices: []string{},
		BSONFieldName:  "loggingrolearn",
		ConvertedName:  "LoggingRoleARN",
		Description:    `AWS logging role ARN.`,
		Exposed:        true,
		Name:           "loggingRoleARN",
		Required:       true,
		Stored:         true,
		Type:           "string",
	},
	"namespace": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "namespace",
		ConvertedName:  "Namespace",
		Description:    `Namespace tag attached to an entity.`,
		Exposed:        true,
		Filterable:     true,
		Getter:         true,
		Name:           "namespace",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "string",
	},
	"primaryaccount": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "primaryaccount",
		ConvertedName:  "PrimaryAccount",
		Description:    `indicates the primary AWS account.`,
		Exposed:        true,
		Name:           "primaryAccount",
		ReadOnly:       true,
		Stored:         true,
		Type:           "boolean",
	},
	"status": {
		AllowedChoices: []string{"Creating", "Pending", "Success", "Failed", "Deleting"},
		Autogenerated:  true,
		BSONFieldName:  "status",
		ConvertedName:  "Status",
		Description:    `status of account.`,
		Exposed:        true,
		Name:           "status",
		ReadOnly:       true,
		Stored:         true,
		Type:           "enum",
	},
	"statusreason": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "statusreason",
		ConvertedName:  "StatusReason",
		Description:    `status failure reason.`,
		Exposed:        true,
		Name:           "statusReason",
		ReadOnly:       true,
		Stored:         true,
		Type:           "string",
	},
	"updatetime": {
		AllowedChoices: []string{},
		Autogenerated:  true,
		BSONFieldName:  "updatetime",
		ConvertedName:  "UpdateTime",
		Description:    `Last update date of the object.`,
		Exposed:        true,
		Getter:         true,
		Name:           "updateTime",
		Orderable:      true,
		ReadOnly:       true,
		Setter:         true,
		Stored:         true,
		Type:           "time",
	},
}

// SparsePCFWAccountsList represents a list of SparsePCFWAccounts
type SparsePCFWAccountsList []*SparsePCFWAccount

// Identity returns the identity of the objects in the list.
func (o SparsePCFWAccountsList) Identity() elemental.Identity {

	return PCFWAccountIdentity
}

// Copy returns a pointer to a copy the SparsePCFWAccountsList.
func (o SparsePCFWAccountsList) Copy() elemental.Identifiables {

	copy := append(SparsePCFWAccountsList{}, o...)
	return &copy
}

// Append appends the objects to the a new copy of the SparsePCFWAccountsList.
func (o SparsePCFWAccountsList) Append(objects ...elemental.Identifiable) elemental.Identifiables {

	out := append(SparsePCFWAccountsList{}, o...)
	for _, obj := range objects {
		out = append(out, obj.(*SparsePCFWAccount))
	}

	return out
}

// List converts the object to an elemental.IdentifiablesList.
func (o SparsePCFWAccountsList) List() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i]
	}

	return out
}

// DefaultOrder returns the default ordering fields of the content.
func (o SparsePCFWAccountsList) DefaultOrder() []string {

	return []string{}
}

// ToPlain returns the SparsePCFWAccountsList converted to PCFWAccountsList.
func (o SparsePCFWAccountsList) ToPlain() elemental.IdentifiablesList {

	out := make(elemental.IdentifiablesList, len(o))
	for i := 0; i < len(o); i++ {
		out[i] = o[i].ToPlain()
	}

	return out
}

// Version returns the version of the content.
func (o SparsePCFWAccountsList) Version() int {

	return 1
}

// SparsePCFWAccount represents the sparse version of a pcfwaccount.
type SparsePCFWAccount struct {
	// AWS Account ID.
	AWSAccountID *string `json:"AWSAccountID,omitempty" msgpack:"AWSAccountID,omitempty" bson:"awsaccountid,omitempty" mapstructure:"AWSAccountID,omitempty"`

	// Identifier of the object.
	ID *string `json:"ID,omitempty" msgpack:"ID,omitempty" bson:"-" mapstructure:"ID,omitempty"`

	// NGFW cloud formation template hash.
	NGFWCFTHash *string `json:"NGFWCFTHash,omitempty" msgpack:"NGFWCFTHash,omitempty" bson:"ngfwcfthash,omitempty" mapstructure:"NGFWCFTHash,omitempty"`

	// NGFW external ID.
	NGFWExternalID *string `json:"NGFWExternalID,omitempty" msgpack:"NGFWExternalID,omitempty" bson:"ngfwexternalid,omitempty" mapstructure:"NGFWExternalID,omitempty"`

	// NGFW onboarding status.
	NGFWOnboardingStatus *string `json:"NGFWOnboardingStatus,omitempty" msgpack:"NGFWOnboardingStatus,omitempty" bson:"ngfwonboardingstatus,omitempty" mapstructure:"NGFWOnboardingStatus,omitempty"`

	// NGFW AWS service account ID.
	NGFWServiceAccountID *string `json:"NGFWServiceAccountID,omitempty" msgpack:"NGFWServiceAccountID,omitempty" bson:"ngfwserviceaccountid,omitempty" mapstructure:"NGFWServiceAccountID,omitempty"`

	// NGFW tenant ID.
	NGFWTenantID *string `json:"NGFWTenantID,omitempty" msgpack:"NGFWTenantID,omitempty" bson:"ngfwtenantid,omitempty" mapstructure:"NGFWTenantID,omitempty"`

	// Creation date of the object.
	CreateTime *time.Time `json:"createTime,omitempty" msgpack:"createTime,omitempty" bson:"createtime,omitempty" mapstructure:"createTime,omitempty"`

	// AWS rulestack decryption role ARN.
	DecryptionRoleARN *string `json:"decryptionRoleARN,omitempty" msgpack:"decryptionRoleARN,omitempty" bson:"decryptionrolearn,omitempty" mapstructure:"decryptionRoleARN,omitempty"`

	// AWS endpoint role ARN.
	EndpointRoleARN *string `json:"endpointRoleARN,omitempty" msgpack:"endpointRoleARN,omitempty" bson:"endpointrolearn,omitempty" mapstructure:"endpointRoleARN,omitempty"`

	// The log destination for logging.
	LogDestination *string `json:"logDestination,omitempty" msgpack:"logDestination,omitempty" bson:"logdestination,omitempty" mapstructure:"logDestination,omitempty"`

	// Destination type for log output.
	LogDestinationType *PCFWAccountLogDestinationTypeValue `json:"logDestinationType,omitempty" msgpack:"logDestinationType,omitempty" bson:"logdestinationtype,omitempty" mapstructure:"logDestinationType,omitempty"`

	// The AWS region where logging data lives.
	LogRegion *string `json:"logRegion,omitempty" msgpack:"logRegion,omitempty" bson:"logregion,omitempty" mapstructure:"logRegion,omitempty"`

	// AWS logging role ARN.
	LoggingRoleARN *string `json:"loggingRoleARN,omitempty" msgpack:"loggingRoleARN,omitempty" bson:"loggingrolearn,omitempty" mapstructure:"loggingRoleARN,omitempty"`

	// Namespace tag attached to an entity.
	Namespace *string `json:"namespace,omitempty" msgpack:"namespace,omitempty" bson:"namespace,omitempty" mapstructure:"namespace,omitempty"`

	// indicates the primary AWS account.
	PrimaryAccount *bool `json:"primaryAccount,omitempty" msgpack:"primaryAccount,omitempty" bson:"primaryaccount,omitempty" mapstructure:"primaryAccount,omitempty"`

	// status of account.
	Status *PCFWAccountStatusValue `json:"status,omitempty" msgpack:"status,omitempty" bson:"status,omitempty" mapstructure:"status,omitempty"`

	// status failure reason.
	StatusReason *string `json:"statusReason,omitempty" msgpack:"statusReason,omitempty" bson:"statusreason,omitempty" mapstructure:"statusReason,omitempty"`

	// Last update date of the object.
	UpdateTime *time.Time `json:"updateTime,omitempty" msgpack:"updateTime,omitempty" bson:"updatetime,omitempty" mapstructure:"updateTime,omitempty"`

	// geographical hash of the data. This is used for sharding and
	// georedundancy.
	ZHash *int `json:"-" msgpack:"-" bson:"zhash,omitempty" mapstructure:"-,omitempty"`

	// Logical storage zone. Used for sharding.
	Zone *int `json:"-" msgpack:"-" bson:"zone,omitempty" mapstructure:"-,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewSparsePCFWAccount returns a new  SparsePCFWAccount.
func NewSparsePCFWAccount() *SparsePCFWAccount {
	return &SparsePCFWAccount{}
}

// Identity returns the Identity of the sparse object.
func (o *SparsePCFWAccount) Identity() elemental.Identity {

	return PCFWAccountIdentity
}

// Identifier returns the value of the sparse object's unique identifier.
func (o *SparsePCFWAccount) Identifier() string {

	if o.ID == nil {
		return ""
	}
	return *o.ID
}

// SetIdentifier sets the value of the sparse object's unique identifier.
func (o *SparsePCFWAccount) SetIdentifier(id string) {

	if id != "" {
		o.ID = &id
	} else {
		o.ID = nil
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWAccount) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesSparsePCFWAccount{}

	if o.AWSAccountID != nil {
		s.AWSAccountID = o.AWSAccountID
	}
	if o.ID != nil {
		s.ID = bson.ObjectIdHex(*o.ID)
	}
	if o.NGFWCFTHash != nil {
		s.NGFWCFTHash = o.NGFWCFTHash
	}
	if o.NGFWExternalID != nil {
		s.NGFWExternalID = o.NGFWExternalID
	}
	if o.NGFWOnboardingStatus != nil {
		s.NGFWOnboardingStatus = o.NGFWOnboardingStatus
	}
	if o.NGFWServiceAccountID != nil {
		s.NGFWServiceAccountID = o.NGFWServiceAccountID
	}
	if o.NGFWTenantID != nil {
		s.NGFWTenantID = o.NGFWTenantID
	}
	if o.CreateTime != nil {
		s.CreateTime = o.CreateTime
	}
	if o.DecryptionRoleARN != nil {
		s.DecryptionRoleARN = o.DecryptionRoleARN
	}
	if o.EndpointRoleARN != nil {
		s.EndpointRoleARN = o.EndpointRoleARN
	}
	if o.LogDestination != nil {
		s.LogDestination = o.LogDestination
	}
	if o.LogDestinationType != nil {
		s.LogDestinationType = o.LogDestinationType
	}
	if o.LogRegion != nil {
		s.LogRegion = o.LogRegion
	}
	if o.LoggingRoleARN != nil {
		s.LoggingRoleARN = o.LoggingRoleARN
	}
	if o.Namespace != nil {
		s.Namespace = o.Namespace
	}
	if o.PrimaryAccount != nil {
		s.PrimaryAccount = o.PrimaryAccount
	}
	if o.Status != nil {
		s.Status = o.Status
	}
	if o.StatusReason != nil {
		s.StatusReason = o.StatusReason
	}
	if o.UpdateTime != nil {
		s.UpdateTime = o.UpdateTime
	}
	if o.ZHash != nil {
		s.ZHash = o.ZHash
	}
	if o.Zone != nil {
		s.Zone = o.Zone
	}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *SparsePCFWAccount) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesSparsePCFWAccount{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	if s.AWSAccountID != nil {
		o.AWSAccountID = s.AWSAccountID
	}
	id := s.ID.Hex()
	o.ID = &id
	if s.NGFWCFTHash != nil {
		o.NGFWCFTHash = s.NGFWCFTHash
	}
	if s.NGFWExternalID != nil {
		o.NGFWExternalID = s.NGFWExternalID
	}
	if s.NGFWOnboardingStatus != nil {
		o.NGFWOnboardingStatus = s.NGFWOnboardingStatus
	}
	if s.NGFWServiceAccountID != nil {
		o.NGFWServiceAccountID = s.NGFWServiceAccountID
	}
	if s.NGFWTenantID != nil {
		o.NGFWTenantID = s.NGFWTenantID
	}
	if s.CreateTime != nil {
		o.CreateTime = s.CreateTime
	}
	if s.DecryptionRoleARN != nil {
		o.DecryptionRoleARN = s.DecryptionRoleARN
	}
	if s.EndpointRoleARN != nil {
		o.EndpointRoleARN = s.EndpointRoleARN
	}
	if s.LogDestination != nil {
		o.LogDestination = s.LogDestination
	}
	if s.LogDestinationType != nil {
		o.LogDestinationType = s.LogDestinationType
	}
	if s.LogRegion != nil {
		o.LogRegion = s.LogRegion
	}
	if s.LoggingRoleARN != nil {
		o.LoggingRoleARN = s.LoggingRoleARN
	}
	if s.Namespace != nil {
		o.Namespace = s.Namespace
	}
	if s.PrimaryAccount != nil {
		o.PrimaryAccount = s.PrimaryAccount
	}
	if s.Status != nil {
		o.Status = s.Status
	}
	if s.StatusReason != nil {
		o.StatusReason = s.StatusReason
	}
	if s.UpdateTime != nil {
		o.UpdateTime = s.UpdateTime
	}
	if s.ZHash != nil {
		o.ZHash = s.ZHash
	}
	if s.Zone != nil {
		o.Zone = s.Zone
	}

	return nil
}

// Version returns the hardcoded version of the model.
func (o *SparsePCFWAccount) Version() int {

	return 1
}

// ToPlain returns the plain version of the sparse model.
func (o *SparsePCFWAccount) ToPlain() elemental.PlainIdentifiable {

	out := NewPCFWAccount()
	if o.AWSAccountID != nil {
		out.AWSAccountID = *o.AWSAccountID
	}
	if o.ID != nil {
		out.ID = *o.ID
	}
	if o.NGFWCFTHash != nil {
		out.NGFWCFTHash = *o.NGFWCFTHash
	}
	if o.NGFWExternalID != nil {
		out.NGFWExternalID = *o.NGFWExternalID
	}
	if o.NGFWOnboardingStatus != nil {
		out.NGFWOnboardingStatus = *o.NGFWOnboardingStatus
	}
	if o.NGFWServiceAccountID != nil {
		out.NGFWServiceAccountID = *o.NGFWServiceAccountID
	}
	if o.NGFWTenantID != nil {
		out.NGFWTenantID = *o.NGFWTenantID
	}
	if o.CreateTime != nil {
		out.CreateTime = *o.CreateTime
	}
	if o.DecryptionRoleARN != nil {
		out.DecryptionRoleARN = *o.DecryptionRoleARN
	}
	if o.EndpointRoleARN != nil {
		out.EndpointRoleARN = *o.EndpointRoleARN
	}
	if o.LogDestination != nil {
		out.LogDestination = *o.LogDestination
	}
	if o.LogDestinationType != nil {
		out.LogDestinationType = *o.LogDestinationType
	}
	if o.LogRegion != nil {
		out.LogRegion = *o.LogRegion
	}
	if o.LoggingRoleARN != nil {
		out.LoggingRoleARN = *o.LoggingRoleARN
	}
	if o.Namespace != nil {
		out.Namespace = *o.Namespace
	}
	if o.PrimaryAccount != nil {
		out.PrimaryAccount = *o.PrimaryAccount
	}
	if o.Status != nil {
		out.Status = *o.Status
	}
	if o.StatusReason != nil {
		out.StatusReason = *o.StatusReason
	}
	if o.UpdateTime != nil {
		out.UpdateTime = *o.UpdateTime
	}
	if o.ZHash != nil {
		out.ZHash = *o.ZHash
	}
	if o.Zone != nil {
		out.Zone = *o.Zone
	}

	return out
}

// GetCreateTime returns the CreateTime of the receiver.
func (o *SparsePCFWAccount) GetCreateTime() (out time.Time) {

	if o.CreateTime == nil {
		return
	}

	return *o.CreateTime
}

// SetCreateTime sets the property CreateTime of the receiver using the address of the given value.
func (o *SparsePCFWAccount) SetCreateTime(createTime time.Time) {

	o.CreateTime = &createTime
}

// GetNamespace returns the Namespace of the receiver.
func (o *SparsePCFWAccount) GetNamespace() (out string) {

	if o.Namespace == nil {
		return
	}

	return *o.Namespace
}

// SetNamespace sets the property Namespace of the receiver using the address of the given value.
func (o *SparsePCFWAccount) SetNamespace(namespace string) {

	o.Namespace = &namespace
}

// GetUpdateTime returns the UpdateTime of the receiver.
func (o *SparsePCFWAccount) GetUpdateTime() (out time.Time) {

	if o.UpdateTime == nil {
		return
	}

	return *o.UpdateTime
}

// SetUpdateTime sets the property UpdateTime of the receiver using the address of the given value.
func (o *SparsePCFWAccount) SetUpdateTime(updateTime time.Time) {

	o.UpdateTime = &updateTime
}

// DeepCopy returns a deep copy if the SparsePCFWAccount.
func (o *SparsePCFWAccount) DeepCopy() *SparsePCFWAccount {

	if o == nil {
		return nil
	}

	out := &SparsePCFWAccount{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *SparsePCFWAccount.
func (o *SparsePCFWAccount) DeepCopyInto(out *SparsePCFWAccount) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy SparsePCFWAccount: %s", err))
	}

	*out = *target.(*SparsePCFWAccount)
}

type mongoAttributesPCFWAccount struct {
	AWSAccountID         string                             `bson:"awsaccountid"`
	ID                   bson.ObjectId                      `bson:"_id,omitempty"`
	NGFWCFTHash          string                             `bson:"ngfwcfthash"`
	NGFWExternalID       string                             `bson:"ngfwexternalid"`
	NGFWOnboardingStatus string                             `bson:"ngfwonboardingstatus"`
	NGFWServiceAccountID string                             `bson:"ngfwserviceaccountid"`
	NGFWTenantID         string                             `bson:"ngfwtenantid"`
	CreateTime           time.Time                          `bson:"createtime"`
	DecryptionRoleARN    string                             `bson:"decryptionrolearn"`
	EndpointRoleARN      string                             `bson:"endpointrolearn"`
	LogDestination       string                             `bson:"logdestination"`
	LogDestinationType   PCFWAccountLogDestinationTypeValue `bson:"logdestinationtype"`
	LogRegion            string                             `bson:"logregion"`
	LoggingRoleARN       string                             `bson:"loggingrolearn"`
	Namespace            string                             `bson:"namespace"`
	PrimaryAccount       bool                               `bson:"primaryaccount"`
	Status               PCFWAccountStatusValue             `bson:"status"`
	StatusReason         string                             `bson:"statusreason"`
	UpdateTime           time.Time                          `bson:"updatetime"`
	ZHash                int                                `bson:"zhash"`
	Zone                 int                                `bson:"zone"`
}
type mongoAttributesSparsePCFWAccount struct {
	AWSAccountID         *string                             `bson:"awsaccountid,omitempty"`
	ID                   bson.ObjectId                       `bson:"_id,omitempty"`
	NGFWCFTHash          *string                             `bson:"ngfwcfthash,omitempty"`
	NGFWExternalID       *string                             `bson:"ngfwexternalid,omitempty"`
	NGFWOnboardingStatus *string                             `bson:"ngfwonboardingstatus,omitempty"`
	NGFWServiceAccountID *string                             `bson:"ngfwserviceaccountid,omitempty"`
	NGFWTenantID         *string                             `bson:"ngfwtenantid,omitempty"`
	CreateTime           *time.Time                          `bson:"createtime,omitempty"`
	DecryptionRoleARN    *string                             `bson:"decryptionrolearn,omitempty"`
	EndpointRoleARN      *string                             `bson:"endpointrolearn,omitempty"`
	LogDestination       *string                             `bson:"logdestination,omitempty"`
	LogDestinationType   *PCFWAccountLogDestinationTypeValue `bson:"logdestinationtype,omitempty"`
	LogRegion            *string                             `bson:"logregion,omitempty"`
	LoggingRoleARN       *string                             `bson:"loggingrolearn,omitempty"`
	Namespace            *string                             `bson:"namespace,omitempty"`
	PrimaryAccount       *bool                               `bson:"primaryaccount,omitempty"`
	Status               *PCFWAccountStatusValue             `bson:"status,omitempty"`
	StatusReason         *string                             `bson:"statusreason,omitempty"`
	UpdateTime           *time.Time                          `bson:"updatetime,omitempty"`
	ZHash                *int                                `bson:"zhash,omitempty"`
	Zone                 *int                                `bson:"zone,omitempty"`
}
