// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// AvailabilityZoneSubnetInterface represents the model of a availabilityzonesubnetinterface
type AvailabilityZoneSubnetInterface struct {
	// The availability zone in the VPC.
	AvailabilityZone string `json:"availabilityZone" msgpack:"availabilityZone" bson:"availabilityzone" mapstructure:"availabilityZone,omitempty"`

	// Source network interfaces in this availability zone from where traffic is to be
	// mirrored.
	SourceNetworkInterfaces []string `json:"sourceNetworkInterfaces" msgpack:"sourceNetworkInterfaces" bson:"sourcenetworkinterfaces" mapstructure:"sourceNetworkInterfaces,omitempty"`

	// The AWS subnet CIDR block in this availability zone.
	SubnetCIDR string `json:"subnetCIDR" msgpack:"subnetCIDR" bson:"subnetcidr" mapstructure:"subnetCIDR,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAvailabilityZoneSubnetInterface returns a new *AvailabilityZoneSubnetInterface
func NewAvailabilityZoneSubnetInterface() *AvailabilityZoneSubnetInterface {

	return &AvailabilityZoneSubnetInterface{
		ModelVersion:            1,
		SourceNetworkInterfaces: []string{},
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AvailabilityZoneSubnetInterface) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAvailabilityZoneSubnetInterface{}

	s.AvailabilityZone = o.AvailabilityZone
	s.SourceNetworkInterfaces = o.SourceNetworkInterfaces
	s.SubnetCIDR = o.SubnetCIDR

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AvailabilityZoneSubnetInterface) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAvailabilityZoneSubnetInterface{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	o.AvailabilityZone = s.AvailabilityZone
	o.SourceNetworkInterfaces = s.SourceNetworkInterfaces
	o.SubnetCIDR = s.SubnetCIDR

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AvailabilityZoneSubnetInterface) BleveType() string {

	return "availabilityzonesubnetinterface"
}

// DeepCopy returns a deep copy if the AvailabilityZoneSubnetInterface.
func (o *AvailabilityZoneSubnetInterface) DeepCopy() *AvailabilityZoneSubnetInterface {

	if o == nil {
		return nil
	}

	out := &AvailabilityZoneSubnetInterface{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AvailabilityZoneSubnetInterface.
func (o *AvailabilityZoneSubnetInterface) DeepCopyInto(out *AvailabilityZoneSubnetInterface) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AvailabilityZoneSubnetInterface: %s", err))
	}

	*out = *target.(*AvailabilityZoneSubnetInterface)
}

// Validate valides the current information stored into the structure.
func (o *AvailabilityZoneSubnetInterface) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateAvailabilityZone("availabilityZone", o.AvailabilityZone); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateEnis("sourceNetworkInterfaces", o.SourceNetworkInterfaces); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateCIDR("subnetCIDR", o.SubnetCIDR); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AvailabilityZoneSubnetInterface) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AvailabilityZoneSubnetInterfaceAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AvailabilityZoneSubnetInterfaceLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AvailabilityZoneSubnetInterface) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AvailabilityZoneSubnetInterfaceAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AvailabilityZoneSubnetInterface) ValueForAttribute(name string) any {

	switch name {
	case "availabilityZone":
		return o.AvailabilityZone
	case "sourceNetworkInterfaces":
		return o.SourceNetworkInterfaces
	case "subnetCIDR":
		return o.SubnetCIDR
	}

	return nil
}

// AvailabilityZoneSubnetInterfaceAttributesMap represents the map of attribute for AvailabilityZoneSubnetInterface.
var AvailabilityZoneSubnetInterfaceAttributesMap = map[string]elemental.AttributeSpecification{
	"AvailabilityZone": {
		AllowedChoices: []string{},
		BSONFieldName:  "availabilityzone",
		ConvertedName:  "AvailabilityZone",
		Description:    `The availability zone in the VPC.`,
		Exposed:        true,
		Name:           "availabilityZone",
		Stored:         true,
		Type:           "string",
	},
	"SourceNetworkInterfaces": {
		AllowedChoices: []string{},
		BSONFieldName:  "sourcenetworkinterfaces",
		ConvertedName:  "SourceNetworkInterfaces",
		Description: `Source network interfaces in this availability zone from where traffic is to be
mirrored.`,
		Exposed: true,
		Name:    "sourceNetworkInterfaces",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"SubnetCIDR": {
		AllowedChoices: []string{},
		BSONFieldName:  "subnetcidr",
		ConvertedName:  "SubnetCIDR",
		Description:    `The AWS subnet CIDR block in this availability zone.`,
		Exposed:        true,
		Name:           "subnetCIDR",
		Stored:         true,
		Type:           "string",
	},
}

// AvailabilityZoneSubnetInterfaceLowerCaseAttributesMap represents the map of attribute for AvailabilityZoneSubnetInterface.
var AvailabilityZoneSubnetInterfaceLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"availabilityzone": {
		AllowedChoices: []string{},
		BSONFieldName:  "availabilityzone",
		ConvertedName:  "AvailabilityZone",
		Description:    `The availability zone in the VPC.`,
		Exposed:        true,
		Name:           "availabilityZone",
		Stored:         true,
		Type:           "string",
	},
	"sourcenetworkinterfaces": {
		AllowedChoices: []string{},
		BSONFieldName:  "sourcenetworkinterfaces",
		ConvertedName:  "SourceNetworkInterfaces",
		Description: `Source network interfaces in this availability zone from where traffic is to be
mirrored.`,
		Exposed: true,
		Name:    "sourceNetworkInterfaces",
		Stored:  true,
		SubType: "string",
		Type:    "list",
	},
	"subnetcidr": {
		AllowedChoices: []string{},
		BSONFieldName:  "subnetcidr",
		ConvertedName:  "SubnetCIDR",
		Description:    `The AWS subnet CIDR block in this availability zone.`,
		Exposed:        true,
		Name:           "subnetCIDR",
		Stored:         true,
		Type:           "string",
	},
}

type mongoAttributesAvailabilityZoneSubnetInterface struct {
	AvailabilityZone        string   `bson:"availabilityzone"`
	SourceNetworkInterfaces []string `bson:"sourcenetworkinterfaces"`
	SubnetCIDR              string   `bson:"subnetcidr"`
}
