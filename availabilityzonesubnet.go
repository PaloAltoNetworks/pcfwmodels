// Code generated by elegen. DO NOT EDIT.
// Source: go.aporeto.io/elemental (templates/model.gotpl)

package api

import (
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/mitchellh/copystructure"
	"go.aporeto.io/elemental"
)

// AvailabilityZoneSubnet represents the model of a availabilityzonesubnet
type AvailabilityZoneSubnet struct {
	// The availability zone.
	AvailabilityZone string `json:"availabilityZone" msgpack:"availabilityZone" bson:"-" mapstructure:"availabilityZone,omitempty"`

	// The AWS subnet CIDR block in this availability zone.
	SubnetCIDR string `json:"subnetCIDR" msgpack:"subnetCIDR" bson:"-" mapstructure:"subnetCIDR,omitempty"`

	ModelVersion int `json:"-" msgpack:"-" bson:"_modelversion"`
}

// NewAvailabilityZoneSubnet returns a new *AvailabilityZoneSubnet
func NewAvailabilityZoneSubnet() *AvailabilityZoneSubnet {

	return &AvailabilityZoneSubnet{
		ModelVersion: 1,
	}
}

// GetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AvailabilityZoneSubnet) GetBSON() (any, error) {

	if o == nil {
		return nil, nil
	}

	s := &mongoAttributesAvailabilityZoneSubnet{}

	return s, nil
}

// SetBSON implements the bson marshaling interface.
// This is used to transparently convert ID to MongoDBID as ObectID.
func (o *AvailabilityZoneSubnet) SetBSON(raw bson.Raw) error {

	if o == nil {
		return nil
	}

	s := &mongoAttributesAvailabilityZoneSubnet{}
	if err := raw.Unmarshal(s); err != nil {
		return err
	}

	return nil
}

// BleveType implements the bleve.Classifier Interface.
func (o *AvailabilityZoneSubnet) BleveType() string {

	return "availabilityzonesubnet"
}

// DeepCopy returns a deep copy if the AvailabilityZoneSubnet.
func (o *AvailabilityZoneSubnet) DeepCopy() *AvailabilityZoneSubnet {

	if o == nil {
		return nil
	}

	out := &AvailabilityZoneSubnet{}
	o.DeepCopyInto(out)

	return out
}

// DeepCopyInto copies the receiver into the given *AvailabilityZoneSubnet.
func (o *AvailabilityZoneSubnet) DeepCopyInto(out *AvailabilityZoneSubnet) {

	target, err := copystructure.Copy(o)
	if err != nil {
		panic(fmt.Sprintf("Unable to deepcopy AvailabilityZoneSubnet: %s", err))
	}

	*out = *target.(*AvailabilityZoneSubnet)
}

// Validate valides the current information stored into the structure.
func (o *AvailabilityZoneSubnet) Validate() error {

	errors := elemental.Errors{}
	requiredErrors := elemental.Errors{}

	if err := ValidateAvailabilityZone("availabilityZone", o.AvailabilityZone); err != nil {
		errors = errors.Append(err)
	}

	if err := ValidateCIDR("subnetCIDR", o.SubnetCIDR); err != nil {
		errors = errors.Append(err)
	}

	if len(requiredErrors) > 0 {
		return requiredErrors
	}

	if len(errors) > 0 {
		return errors
	}

	return nil
}

// SpecificationForAttribute returns the AttributeSpecification for the given attribute name key.
func (*AvailabilityZoneSubnet) SpecificationForAttribute(name string) elemental.AttributeSpecification {

	if v, ok := AvailabilityZoneSubnetAttributesMap[name]; ok {
		return v
	}

	// We could not find it, so let's check on the lower case indexed spec map
	return AvailabilityZoneSubnetLowerCaseAttributesMap[name]
}

// AttributeSpecifications returns the full attribute specifications map.
func (*AvailabilityZoneSubnet) AttributeSpecifications() map[string]elemental.AttributeSpecification {

	return AvailabilityZoneSubnetAttributesMap
}

// ValueForAttribute returns the value for the given attribute.
// This is a very advanced function that you should not need but in some
// very specific use cases.
func (o *AvailabilityZoneSubnet) ValueForAttribute(name string) any {

	switch name {
	case "availabilityZone":
		return o.AvailabilityZone
	case "subnetCIDR":
		return o.SubnetCIDR
	}

	return nil
}

// AvailabilityZoneSubnetAttributesMap represents the map of attribute for AvailabilityZoneSubnet.
var AvailabilityZoneSubnetAttributesMap = map[string]elemental.AttributeSpecification{
	"AvailabilityZone": {
		AllowedChoices: []string{},
		ConvertedName:  "AvailabilityZone",
		Description:    `The availability zone.`,
		Exposed:        true,
		Name:           "availabilityZone",
		Type:           "string",
	},
	"SubnetCIDR": {
		AllowedChoices: []string{},
		ConvertedName:  "SubnetCIDR",
		Description:    `The AWS subnet CIDR block in this availability zone.`,
		Exposed:        true,
		Name:           "subnetCIDR",
		Type:           "string",
	},
}

// AvailabilityZoneSubnetLowerCaseAttributesMap represents the map of attribute for AvailabilityZoneSubnet.
var AvailabilityZoneSubnetLowerCaseAttributesMap = map[string]elemental.AttributeSpecification{
	"availabilityzone": {
		AllowedChoices: []string{},
		ConvertedName:  "AvailabilityZone",
		Description:    `The availability zone.`,
		Exposed:        true,
		Name:           "availabilityZone",
		Type:           "string",
	},
	"subnetcidr": {
		AllowedChoices: []string{},
		ConvertedName:  "SubnetCIDR",
		Description:    `The AWS subnet CIDR block in this availability zone.`,
		Exposed:        true,
		Name:           "subnetCIDR",
		Type:           "string",
	},
}

type mongoAttributesAvailabilityZoneSubnet struct {
}
